<section>
<h2 id="nodes">Nodes</h2>

<h3 id="nodes-introduction-to-the-dom">Introduction to "The DOM"</h3>

<p>In its original sense, "The DOM" is an API for
accessing and manipulating documents (in particular, HTML and XML
documents). In this specification, the term "document" is used for any
markup-based resource, ranging from short static documents to long essays or
reports with rich multimedia, as well as to fully-fledged interactive
applications.

<p>These documents are presented as a
<a href="#concept-node-tree" title="concept-node-tree">node tree</a>. Some of the
<a href="#concept-node" title="concept-node">nodes</a> in the
<a href="#concept-tree" title="concept-tree">tree</a> can have
<a href="#concept-tree-child" title="concept-tree-child">children</a>, while others are always leaves.

<p>To illustrate, consider this HTML document:

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html class=e&gt;
 &lt;head&gt;&lt;title&gt;Aliens?&lt;/title&gt;&lt;/head&gt;
 &lt;body&gt;Why yes.&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>It is represented as follows:

<ul class="domTree">
 <li>
  <a href="#concept-document" title="concept-document">Document</a>
  <ul>
   <li class="t10"><a href="#concept-doctype" title="concept-doctype">Doctype</a>: <code>html</code></li>
   <li class="t1"><a href="#concept-element" title="concept-element">Element</a>: <code>html</code> <span class="t2"><code class="attribute name">class</code>="<code class="attribute value">e</code>"</span>
    <ul>
     <li class="t1">
      <a href="#concept-element" title="concept-element">Element</a>: <code>head</code>
      <ul>
       <li class="t1">
        <a href="#concept-element" title="concept-element">Element</a>: <code>title</code>
        <ul>
         <li class="t3"><code><a href="#text">Text</a></code>: <span>Aliens?</span></li>
        </ul>
       </li>
      </ul>
     </li>
     <li class="t3"><code><a href="#text">Text</a></code>: <span>⏎␣</span></li>
     <li class="t1">
      <a href="#concept-element" title="concept-element">Element</a>: <code>body</code>
      <ul>
       <li class="t3"><code><a href="#text">Text</a></code>: <span>Why yes.⏎</span></li>
      </ul>
     </li>
    </ul>
   </li>
  </ul>
 </li>
</ul>

<!--
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0D%0A%3Chtml%20class%3De%3E%0D%0A%20%3Chead%3E%3Ctitle%3EAliens%3F%3C%2Ftitle%3E%3C%2Fhead%3E%0D%0A%20%3Cbody%3EWhy%20yes.%3C%2Fbody%3E%0D%0A%3C%2Fhtml%3E
-->

<p>Note that, due to the magic that is
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/syntax.html#html-parser" title="HTML parser">HTML parsing</a>, not all
<a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#ascii-whitespace">ASCII whitespace</a> were turned into
<code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">nodes</a>, but the general
concept is clear. Markup goes in, a <a href="#concept-tree" title="concept-tree">tree</a> of
<a href="#concept-node" title="concept-node">nodes</a> comes out.
<!-- You /can/ explain that! harharhar -->

<p class="note">Note: The most excellent
<a href="http://software.hixie.ch/utilities/js/live-dom-viewer/">Live DOM Viewer</a>
can be used to explore this matter in more detail.

<h3 id="nodes-node-tree">Node tree</h3>
<p>Objects implementing the <code><a href="#document">Document</a></code>,
<code><a href="#documentfragment">DocumentFragment</a></code>, <code><a href="#documenttype">DocumentType</a></code>,
<code><a href="#element">Element</a></code>, <code><a href="#text">Text</a></code>, <code><a href="#processinginstruction">ProcessingInstruction</a></code>,
or <code><a href="#comment">Comment</a></code> interface (simply called
<dfn id="concept-node" title="concept-node">nodes</dfn>)
<a href="#concept-tree-participate" title="concept-tree-participate">participate</a> in a
<a href="#concept-tree" title="concept-tree">tree</a>, simply named the
<dfn id="concept-node-tree" title="concept-node-tree">node tree</dfn>.

<p>A <a href="#concept-node-tree" title="concept-node-tree">node tree</a> is constrained as
follows, expressed as a relationship between the type of
<a href="#concept-node" title="concept-node">node</a> and its allowed
<a href="#concept-tree-child" title="concept-tree-child">children</a>:
<dl>
 <dt><code><a href="#document">Document</a></code>
 <dd>
  <p>In <a href="#concept-tree-order" title="concept-tree-order">tree order</a>:
  <ol>
   <li><p>Zero or more nodes each of which is either
   <code><a href="#processinginstruction">ProcessingInstruction</a></code> or <code><a href="#comment">Comment</a></code>.
   <li><p>Optionally one <code><a href="#documenttype">DocumentType</a></code> node.
   <li><p>Zero or more nodes each of which is either
   <code><a href="#processinginstruction">ProcessingInstruction</a></code> or <code><a href="#comment">Comment</a></code>.
   <li><p>Optionally one <code><a href="#element">Element</a></code> node.
   <li><p>Zero or more nodes each of which is either
   <code><a href="#processinginstruction">ProcessingInstruction</a></code> or <code><a href="#comment">Comment</a></code>.
  </ol>
 <dt><code><a href="#documentfragment">DocumentFragment</a></code>
 <dt><code><a href="#element">Element</a></code>
 <dd><p>Zero or more nodes each of which is one of <code><a href="#element">Element</a></code>,
 <code><a href="#processinginstruction">ProcessingInstruction</a></code>, <code><a href="#comment">Comment</a></code>, or
 <code><a href="#text">Text</a></code>.
 <dt><code><a href="#documenttype">DocumentType</a></code>
 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dd><p>None.
</dl>
<!--AttrExodus -->

<p>The <dfn id="concept-node-length" title="concept-node-length">length</dfn> of a
<a href="#concept-node" title="concept-node">node</a> <var>node</var> depends on
<var>node</var>:
<dl class="switch">
 <dt><code><a href="#documenttype">DocumentType</a></code>
 <dd><p>Zero.

 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dd><p>Its <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute
 value.

 <dt>Any other node
 <dd><p>Its number of <a href="#concept-tree-child" title="concept-tree-child">children</a>.
</dl>

<p>A <a href="#concept-node" title="concept-node">node</a> is considered
<dfn id="concept-node-empty" title="concept-node-empty">empty</dfn> if its
<a href="#concept-node-length" title="concept-node-length">length</a> is zero.


<h4 id="mutation-algorithms">Mutation algorithms</h4>

<p>To <dfn id="concept-node-ensure-pre-insertion-validity" title="concept-node-ensure-pre-insertion-validity">ensure pre-insertion validity</dfn>
of a <var>node</var> into a <var>parent</var> before a
<var>child</var>, run these steps:

<ol>
 <li><p>If <var>parent</var> is not a <code><a href="#document">Document</a></code>,
 <code><a href="#documentfragment">DocumentFragment</a></code>, or <code><a href="#element">Element</a></code>
 <a href="#concept-node" title="concept-node">node</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If <var>node</var> is a
 <a href="#concept-tree-host-including-inclusive-ancestor" title="concept-tree-host-including-inclusive-ancestor">host-including inclusive ancestor</a>
 of <var>parent</var>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If <var>child</var> is not null and its
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is not
 <var>parent</var>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notfounderror">NotFoundError</a></code>" exception.

 <li><p>If <var>node</var> is not a
 <code><a href="#documentfragment">DocumentFragment</a></code>, <code><a href="#documenttype">DocumentType</a></code>,
 <code><a href="#element">Element</a></code>, <code><a href="#text">Text</a></code>,
 <code><a href="#processinginstruction">ProcessingInstruction</a></code>, or <code><a href="#comment">Comment</a></code>
 <a href="#concept-node" title="concept-node">node</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If either <var>node</var> is a <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a> and <var>parent</var> is a
 <a href="#concept-document" title="concept-document">document</a>, or <var>node</var> is a
 <a href="#concept-doctype" title="concept-doctype">doctype</a> and <var>parent</var> is
 not a <a href="#concept-document" title="concept-document">document</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li>
  <p>If <var>parent</var> is a
  <a href="#concept-document" title="concept-document">document</a>, and any of the statements below, switched
  on <var>node</var>, are true, <a href="#dfn-throw" title="concept-throw">throw</a> a
  "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

  <dl class="switch">
   <dt><code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>
   <dd>
    <p>If <var>node</var> has more than one
    <a href="#concept-element" title="concept-element">element</a> <a href="#concept-tree-child" title="concept-tree-child">child</a>
    or has a <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
    <a href="#concept-tree-child" title="concept-tree-child">child</a>.

    <p>Otherwise, if <var>node</var> has one
    <a href="#concept-element" title="concept-element">element</a>
    <a href="#concept-tree-child" title="concept-tree-child">child</a> and either <var>parent</var> has an
    <a href="#concept-element" title="concept-element">element</a>
    <a href="#concept-tree-child" title="concept-tree-child">child</a>, <var>child</var> is a
    <a href="#concept-doctype" title="concept-doctype">doctype</a>, or <var>child</var> is not null and
    a <a href="#concept-doctype" title="concept-doctype">doctype</a> is
    <a href="#concept-tree-following" title="concept-tree-following">following</a> <var>child</var>.
    <!--"inclusively following"-->

   <dt><a href="#concept-element" title="concept-element">element</a>
   <dd><p><var>parent</var> has an <a href="#concept-element" title="concept-element">element</a>
   <a href="#concept-tree-child" title="concept-tree-child">child</a>, <var>child</var> is a
   <a href="#concept-doctype" title="concept-doctype">doctype</a>, or <var>child</var> is not null and a
   <a href="#concept-doctype" title="concept-doctype">doctype</a> is
   <a href="#concept-tree-following" title="concept-tree-following">following</a> <var>child</var>.
   <!--"inclusively following"-->

   <dt><a href="#concept-doctype" title="concept-doctype">doctype</a>
   <dd><p><var>parent</var> has a <a href="#concept-doctype" title="concept-doctype">doctype</a>
   <a href="#concept-tree-child" title="concept-tree-child">child</a>, an
   <a href="#concept-element" title="concept-element">element</a> is
   <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a> <var>child</var>, or
   <var>child</var> is null and <var>parent</var> has an
   <a href="#concept-element" title="concept-element">element</a> <a href="#concept-tree-child" title="concept-tree-child">child</a>.
  </dl>
</ol>

<p>To <dfn id="concept-node-pre-insert" title="concept-node-pre-insert">pre-insert</dfn> a
<var>node</var> into a <var>parent</var> before a
<var>child</var>, run these steps:

<ol>
 <li><p><a href="#concept-node-ensure-pre-insertion-validity" title="concept-node-ensure-pre-insertion-validity">Ensure pre-insertion validity</a>
 of <var>node</var> into <var>parent</var> before
 <var>child</var>.

 <li><p>Let <var>reference child</var> be <var>child</var>.

 <li><p>If <var>reference child</var> is <var>node</var>, set it
 to <var>node</var>'s
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.

 <li><p><a href="#concept-node-adopt" title="concept-node-adopt">Adopt</a>
 <var>node</var> into <var>parent</var>'s
 <a href="#concept-node-document" title="concept-node-document">node document</a>.

 <li><p><a href="#concept-node-insert" title="concept-node-insert">Insert</a> <var>node</var>
 into <var>parent</var> before <var>reference child</var>.

 <li><p>Return <var>node</var>.
 <!-- technically this is post-insert -->
</ol>

<p><a href="#other-applicable-specifications" title="Other applicable specifications">Specifications</a> may define
<dfn id="concept-node-insert-ext" title="concept-node-insert-ext">insertion steps</dfn> for all or some
<a href="#concept-node" title="concept-node">nodes</a>. The algorithm is passed <var>newNode</var> as
indicated in the <a href="#concept-node-insert" title="concept-node-insert">insert</a> algorithm below.

<p>To <dfn id="concept-node-insert" title="concept-node-insert">insert</dfn> a <var>node</var>
into a <var>parent</var> before a <var>child</var> with an optional <i>suppress observers flag</i>, run these steps:

<ol>
 <li><p>Let <var>count</var> be the number of
 <a href="#concept-tree-child" title="concept-tree-child">children</a> of <var>node</var> if
 it is a <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>,
 and one otherwise.

 <li>
  <p>If <var>child</var> is non-null, run these substeps:

  <ol>
   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
   <var>parent</var> and
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater than
   <var>child</var>'s <a href="#concept-tree-index" title="concept-tree-index">index</a>,
   increase its <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> by
   <var>count</var>.

   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
   <var>parent</var> and
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
   <var>child</var>'s <a href="#concept-tree-index" title="concept-tree-index">index</a>,
   increase its <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> by
   <var>count</var>.
  </ol>

 <li><p>Let <var>nodes</var> be <var>node</var>'s
 <a href="#concept-tree-child" title="concept-tree-child">children</a> if <var>node</var> is
 a <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>, and a
 list containing solely <var>node</var> otherwise.

 <li>
  <p>If <var>node</var> is a <code><a href="#documentfragment">DocumentFragment</a></code>
  <a href="#concept-node" title="concept-node">node</a>, <a href="#queue-a-mutation-record">queue a mutation record</a>
  of "<code>childList</code>" for <var>node</var> with removedNodes
  <var>nodes</var>.

  <p class="note">Note: This step intentionally does not pay attention to the
  <i>suppress observers flag</i>.

 <li><p>If <var>node</var> is a <code><a href="#documentfragment">DocumentFragment</a></code>
 <a href="#concept-node" title="concept-node">node</a>,
 <a href="#concept-node-remove" title="concept-node-remove">remove</a> its
 <a href="#concept-tree-child" title="concept-tree-child">children</a> with the
 <i>suppress observers flag</i> set.

 <li><p>If <i>suppress observers flag</i> is unset,
 <a href="#queue-a-mutation-record">queue a mutation record</a> of "<code>childList</code>" for
 <var>parent</var> with addedNodes <var>nodes</var>,
 nextSibling <var>child</var>, and previousSibling
 <var>child</var>'s
 <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>
 or <var>parent</var>'s
 <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a> if
 <var>child</var> is null.

 <li>
  <p>For each <var>newNode</var> in <var>nodes</var>, in
  <a href="#concept-tree-order" title="concept-tree-order">tree order</a>, run these substeps:

  <ol>
   <li><p>Insert <var>newNode</var> into <var>parent</var> before
   <var>child</var> or at the end of <var>parent</var> if
   <var>child</var> is null.

   <li><p>Run the <a href="#concept-node-insert-ext" title="concept-node-insert-ext">insertion steps</a> with
   <var>newNode</var>.
  </ol>
</ol>


<p>To <dfn id="concept-node-append" title="concept-node-append">append</dfn> a <var>node</var>
to a <var>parent</var>,
<a href="#concept-node-pre-insert" title="concept-node-pre-insert">pre-insert</a> <var>node</var>
into <var>parent</var> before null.


<p>To <dfn id="concept-node-replace" title="concept-node-replace">replace</dfn> a <var>child</var>
with <var>node</var> within a <var>parent</var>, run these
steps:

<!-- Step 1-5 could be shared with concept-node-pre-insert, although step 3
     in pre-insert is a superset (which is fine). Step 6.1.1 could also be
     shared. -->

<ol>
 <li><p>If <var>parent</var> is not a <code><a href="#document">Document</a></code>,
 <code><a href="#documentfragment">DocumentFragment</a></code>, or <code><a href="#element">Element</a></code>
 <a href="#concept-node" title="concept-node">node</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If <var>node</var> is a
 <a href="#concept-tree-host-including-inclusive-ancestor" title="concept-tree-host-including-inclusive-ancestor">host-including inclusive ancestor</a>
 of <var>parent</var>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If <var>child</var>'s
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is not
 <var>parent</var>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notfounderror">NotFoundError</a></code>" exception.

 <li><p>If <var>node</var> is not a
 <code><a href="#documentfragment">DocumentFragment</a></code>, <code><a href="#documenttype">DocumentType</a></code>,
 <code><a href="#element">Element</a></code>, <code><a href="#text">Text</a></code>,
 <code><a href="#processinginstruction">ProcessingInstruction</a></code>, or <code><a href="#comment">Comment</a></code>
 <a href="#concept-node" title="concept-node">node</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li><p>If either <var>node</var> is a <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a> and <var>parent</var> is a
 <a href="#concept-document" title="concept-document">document</a>, or <var>node</var> is a
 <a href="#concept-doctype" title="concept-doctype">doctype</a> and <var>parent</var> is
 not a <a href="#concept-document" title="concept-document">document</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

 <li>
  <p>If <var>parent</var> is a
  <a href="#concept-document" title="concept-document">document</a>, and any of the statements below, switched
  on <var>node</var>, are true, <a href="#dfn-throw" title="concept-throw">throw</a> a
  "<code><a href="#hierarchyrequesterror">HierarchyRequestError</a></code>".

  <dl class="switch">
   <dt><code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>
   <dd>
    <p>If <var>node</var> has more than one
    <a href="#concept-element" title="concept-element">element</a> <a href="#concept-tree-child" title="concept-tree-child">child</a>
    or has a <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
    <a href="#concept-tree-child" title="concept-tree-child">child</a>.

    <p>Otherwise, if <var>node</var> has one
    <a href="#concept-element" title="concept-element">element</a> <a href="#concept-tree-child" title="concept-tree-child">child</a>
    and either <var>parent</var> has an <a href="#concept-element" title="concept-element">element</a>
    <a href="#concept-tree-child" title="concept-tree-child">child</a> that is not <var>child</var> or a
    <a href="#concept-doctype" title="concept-doctype">doctype</a> is
    <a href="#concept-tree-following" title="concept-tree-following">following</a> <var>child</var>.

   <dt><a href="#concept-element" title="concept-element">element</a>
   <dd><p><var>parent</var> has an <a href="#concept-element" title="concept-element">element</a>
   <a href="#concept-tree-child" title="concept-tree-child">child</a> that is not <var>child</var> or a
   <a href="#concept-doctype" title="concept-doctype">doctype</a> is
   <a href="#concept-tree-following" title="concept-tree-following">following</a> <var>child</var>.

   <dt><a href="#concept-doctype" title="concept-doctype">doctype</a>
   <dd><var>parent</var> has a <a href="#concept-doctype" title="concept-doctype">doctype</a>
   <a href="#concept-tree-child" title="concept-tree-child">child</a> that is not <var>child</var>, or an
   <a href="#concept-element" title="concept-element">element</a> is
   <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a> <var>child</var>.
  </dl>

  <p class="note">Note: The above statements differ from the
  <a href="#concept-node-pre-insert" title="concept-node-pre-insert">pre-insert</a> algorithm.

 <li><p>Let <var>reference child</var> be <var>child</var>'s
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.

 <li><p>If <var>reference child</var> is <var>node</var>, set it
 to <var>node</var>'s
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.

 <li><p><a href="#concept-node-adopt" title="concept-node-adopt">Adopt</a>
 <var>node</var> into <var>parent</var>'s
 <a href="#concept-node-document" title="concept-node-document">node document</a>.

 <li><p><a href="#concept-node-remove" title="concept-node-remove">Remove</a> <var>child</var>
 from its <var>parent</var> with the
 <i>suppress observers flag</i> set.

 <li><p><a href="#concept-node-insert" title="concept-node-insert">Insert</a> <var>node</var>
 into <var>parent</var> before <var>reference child</var> with
 the <i>suppress observers flag</i> set.

 <li><p>Let <var>nodes</var> be <var>node</var>'s
 <a href="#concept-tree-child" title="concept-tree-child">children</a> if <var>node</var> is
 a <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>, and a
 list containing solely <var>node</var> otherwise.

 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code>childList</code>" for
 target <var>parent</var> with addedNodes
 <var>nodes</var>, removedNodes a list solely containing
 <var>child</var>, nextSibling <var>reference child</var>, and
 previousSibling <var>child</var>'s
 <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>.

 <li><p>Return <var>child</var>.
</ol>


<p>To <dfn id="concept-node-replace-all" title="concept-node-replace-all">replace all</dfn> with a
<var>node</var> within a <var>parent</var>, run these steps:

<ol>
 <li><p>If <var>node</var> is not null,
 <a href="#concept-node-adopt" title="concept-node-adopt">adopt</a> <var>node</var> into
 <var>parent</var>'s
 <a href="#concept-node-document" title="concept-node-document">node document</a>.

 <li><p>Let <var>removedNodes</var> be <var>parent</var>'s
 <a href="#concept-tree-child" title="concept-tree-child">children</a>.

 <li><p>Let <var>addedNodes</var> be the empty list if <var>node</var> is
 null, <var>node</var>'s <a href="#concept-tree-child" title="concept-tree-child">children</a> if
 <var>node</var> is a <code><a href="#documentfragment">DocumentFragment</a></code>
 <a href="#concept-node" title="concept-node">node</a>, and a list containing <var>node</var>
 otherwise.

 <li><p><a href="#concept-node-remove" title="concept-node-remove">Remove</a> all
 <var>parent</var>'s <a href="#concept-tree-child" title="concept-tree-child">children</a>, in
 <a href="#concept-tree-order" title="concept-tree-order">tree order</a>, with the
 <i>suppress observers flag</i> set.

 <li><p>If <var>node</var> is not null,
 <a href="#concept-node-insert" title="concept-node-insert">insert</a> <var>node</var> into
 <var>parent</var> before null with the <i>suppress observers flag</i> set.

 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code>childList</code>" for
 <var>parent</var> with addedNodes <var>addedNodes</var> and
 removedNodes <var>removedNodes</var>.
</ol>

<p class="note">Note: This algorithm does not make any checks with regards to the
<a href="#concept-node-tree" title="concept-node-tree">node tree</a> constraints. Specification authors need to use it wisely.


<p>To <dfn id="concept-node-pre-remove" title="concept-node-pre-remove">pre-remove</dfn> a
<var>child</var> from a <var>parent</var>, run these steps:</p>

<ol>
 <li><p>If <var>child</var>'s
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is not
 <var>parent</var>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notfounderror">NotFoundError</a></code>" exception.

 <li><p><a href="#concept-node-remove" title="concept-node-remove">Remove</a> <var>child</var>
 from <var>parent</var>.

 <li><p>Return <var>child</var>.
 <!-- technically this is post-remove -->
</ol>


<p><a href="#other-applicable-specifications" title="Other applicable specifications">Specifications</a> may define
<dfn id="concept-node-remove-ext" title="concept-node-remove-ext">removing steps</dfn> for all or some
<a href="#concept-node" title="concept-node">nodes</a>. The algorithm is passed <var>removedNode</var>,
<var>oldParent</var>, and <var>oldPreviousSibling</var>, as indicated in the
<a href="#concept-node-remove" title="concept-node-remove">remove</a> algorithm below.

<p>To <dfn id="concept-node-remove" title="concept-node-remove">remove</dfn> a <var>node</var>
from a <var>parent</var> with an optional
<i>suppress observers flag</i> set, run these steps:

<ol>
 <li><p>Let <var>index</var> be <var>node</var>'s
 <a href="#concept-tree-index" title="concept-tree-index">index</a>.

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is an
 <a href="#concept-tree-inclusive-descendant" title="concept-tree-inclusive-descendant">inclusive descendant</a> of
 <var>node</var>, set its
 <a href="#concept-range-start" title="concept-range-start">start</a> to
 (<var>parent</var>, <var>index</var>).

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is an
 <a href="#concept-tree-inclusive-descendant" title="concept-tree-inclusive-descendant">inclusive descendant</a> of
 <var>node</var>, set its
 <a href="#concept-range-end" title="concept-range-end">end</a> to
 (<var>parent</var>, <var>index</var>).

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
 <var>parent</var> and
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater than
 <var>index</var>, decrease its
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> by one.

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
 <var>parent</var> and
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
 <var>index</var>, decrease its
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> by one.

 <li><p>Let <var>oldPreviousSibling</var> be <var>node</var>'s
 <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>

 <li><p>If <i>suppress observers flag</i> is unset,
 <a href="#queue-a-mutation-record">queue a mutation record</a> of "<code>childList</code>" for
 <var>parent</var> with removedNodes a list solely containing
 <var>node</var>, nextSibling <var>node</var>'s
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>,
 and previousSibling <var>oldPreviousSibling</var>.

 <li><p>For each <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestor</a>
 <var>ancestor</var> of <var>node</var>, if
 <var>ancestor</var> has any
 <a href="#registered-observer" title="registered observer">registered observers</a> whose
 <b>options</b>'s
 <code title="dom-MutationObserverInit-subtree">subtree</code> is true, then
 for each such <a href="#registered-observer">registered observer</a> <var>registered</var>, append a
 <a href="#transient-registered-observer">transient registered observer</a> whose <b>observer</b> and
 <b>options</b> are identical to those of <var>registered</var> and <b>source</b>
 which is <var>registered</var> to <var>node</var>'s list of
 <a href="#registered-observer" title="registered observer">registered observers</a>.

 <li><p>Remove <var>node</var> from its <var>parent</var>.

 <li><p>Run the <a href="#concept-node-remove-ext" title="concept-node-remove-ext">removing steps</a> with
 <var>node</var>, <var>parent</var>, and <var>oldPreviousSibling</var>.
</ol>

<h4 id="interface-nonelementparentnode">Interface <code><a href="#nonelementparentnode">NonElementParentNode</a></code></h4>
<p class="note no-backref">Note: The
<code title="dom-NonElementParentNode-getElementById"><a href="#dom-nonelementparentnode-getelementbyid">getElementById()</a></code> method is not
on <a href="#concept-element" title="concept-element">elements</a> for compatibility with older versions of
jQuery. If a time comes where that version of jQuery has disappeared, we might be able to
support it.

<pre class='idl'>
[NoInterfaceObject,
 Exposed=Window]
interface NonElementParentNode {
  Element? getElementById(DOMString elementId);
};
Document implements NonElementParentNode;
DocumentFragment implements NonElementParentNode;
</pre>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-nonelementparentnode-getelementbyid" title="dom-NonElementParentNode-getElementById">getElementById</a>(<var>elementId</var>)</code>
 <dd><p>Returns the first <a href="#concept-element" title="concept-element">element</a> within
 <var>node</var>'s <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a> whose
 <a href="#concept-id" title="concept-id">ID</a> is <var>elementId</var>.
</dl>

<p>The
<dfn id="dom-nonelementparentnode-getelementbyid" title="dom-NonElementParentNode-getElementById"><code>getElementById(<var>elementId</var>)</code></dfn>
method must return the first <a href="#concept-element" title="concept-element">element</a>, in
<a href="#concept-tree-order" title="concept-tree-order">tree order</a>, within <a href="#context-object">context object</a>'s
<a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a>, whose
<a href="#concept-id" title="concept-id">ID</a> is <var>elementId</var>, and null if there is no
such <a href="#concept-element" title="concept-element">element</a> otherwise.

<h4 id="interface-parentnode">Interface <code><a href="#parentnode">ParentNode</a></code></h4>

<p>The <dfn id="mutation-method-macro">mutation method macro</dfn>:

<ol>
 <li><p>Let <var>node</var> be null.

 <li><p>Replace each string in <var>nodes</var> with a
 <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a> whose
 <a href="#concept-cd-data" title="concept-CD-data">data</a> is the string value.

 <li>
  <p>If <var>nodes</var> contains more than one
  <a href="#concept-node" title="concept-node">node</a>, set <var>node</var> to a new
  <code><a href="#documentfragment">DocumentFragment</a></code> and
  <a href="#concept-node-append" title="concept-node-append">append</a> each
  <a href="#concept-node" title="concept-node">node</a> in <var>nodes</var> to it. Rethrow any
  exceptions.

  <p>Otherwise, set <var>node</var> to the single
  <a href="#concept-node" title="concept-node">node</a> <var>nodes</var> contains.
</ol>

<pre class='idl'>
[NoInterfaceObject,
 Exposed=Window]
interface ParentNode {
  [SameObject] readonly attribute HTMLCollection children;
  readonly attribute Element? firstElementChild;
  readonly attribute Element? lastElementChild;
  readonly attribute unsigned long childElementCount;

  Element? querySelector(DOMString selectors);
  [NewObject] NodeList querySelectorAll(DOMString selectors);
};
Document implements ParentNode;
DocumentFragment implements ParentNode;
Element implements ParentNode;
</pre>

<dl class="domintro">
 <dt><code><var>collection</var> = <var>node</var> . <a href="#dom-parentnode-children" title="dom-ParentNode-children">children</a></code>
 <dd><p>Returns the <a href="#concept-tree-child" title="concept-tree-child">child</a>
 <a href="#concept-element" title="concept-element">elements</a>.

 <dt><code><var>element</var> = <var>node</var> . <a href="#dom-parentnode-firstelementchild" title="dom-ParentNode-firstElementChild">firstElementChild</a></code>
 <dd><p>Returns the first <a href="#concept-tree-child" title="concept-tree-child">child</a> that
 is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.

 <dt><code><var>element</var> = <var>node</var> . <a href="#dom-parentnode-lastelementchild" title="dom-ParentNode-lastElementChild">lastElementChild</a></code>
 <dd><p>Returns the last <a href="#concept-tree-child" title="concept-tree-child">child</a> that
 is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.

 <!-- childElementCount is redundant -->

 <dt><code><var>node</var> . <a href="#dom-parentnode-queryselector" title="dom-ParentNode-querySelector">querySelector</a>(<var>selectors</var>)</code>
 <dd>
  <p>Returns the first <a href="#concept-element" title="concept-element">element</a> that is a
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a> of <var>node</var> that
  matches <var>selectors</var>.

 <dt><code><var>node</var> . <a href="#dom-parentnode-queryselectorall" title="dom-ParentNode-querySelectorAll">querySelectorAll</a>(<var>selectors</var>)</code>
 <dd>
  <p>Returns all <a href="#concept-element" title="concept-element">element</a>
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a> of <var>node</var> that
  match <var>selectors</var>.
</dl>

<p>The <dfn id="dom-parentnode-children" title="dom-ParentNode-children"><code>children</code></dfn>
attribute must return an <code><a href="#htmlcollection">HTMLCollection</a></code>
<a href="#concept-collection" title="concept-collection">collection</a> rooted at the
<a href="#context-object">context object</a> matching only
<a href="#concept-element" title="concept-element">element</a>
<a href="#concept-tree-child" title="concept-tree-child">children</a>.

<p>The
<dfn id="dom-parentnode-firstelementchild" title="dom-ParentNode-firstElementChild"><code>firstElementChild</code></dfn>
attribute must return the first <a href="#concept-tree-child" title="concept-tree-child">child</a>
that is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.

<p>The
<dfn id="dom-parentnode-lastelementchild" title="dom-ParentNode-lastElementChild"><code>lastElementChild</code></dfn>
attribute must return the last <a href="#concept-tree-child" title="concept-tree-child">child</a>
that is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.

<p>The
<dfn id="dom-parentnode-childelementcount" title="dom-ParentNode-childElementCount"><code>childElementCount</code></dfn>
attribute must return the number of
<a href="#concept-tree-child" title="concept-tree-child">children</a> of the
<a href="#context-object">context object</a> that are
<a href="#concept-element" title="concept-element">elements</a>.

<p>To <dfn id="match-a-relative-selectors-string">match a relative selectors string</dfn> <var>relativeSelectors</var>
against a <var>set</var>, run these steps:

<ol>
 <li><p>Let <var>s</var> be the result of
 <a class="external" data-anolis-spec="selectors" href="#css4-parse-a-relative-selector">parse a relative selector</a> from
 <var>relativeSelectors</var> against <var>set</var>.
 [[!SELECTORS4]]

 <li><p>If <var>s</var> is failure, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#syntaxerror">SyntaxError</a></code>".

 <li><p>Return the result of <a class="external" data-anolis-spec="selectors" href="#css4-evaluate-a-selector">evaluate a selector</a>
 <var>s</var> using
 <a class="external" data-anolis-spec="selectors" href="#css4-scope-element" title=":scope element">:scope elements</a>
 <var>set</var>. [[!SELECTORS4]]
</ol>

<p>To <dfn id="scope-match-a-selectors-string">scope-match a selectors string</dfn> <var>selectors</var> against a
<var>node</var>, run these steps:

<ol>
 <li><p>Let <var>s</var> be the result of
 <a class="external" data-anolis-spec="selectors" href="#css4-parse-a-selector">parse a selector</a> <var>selectors</var>. [[!SELECTORS4]]

 <li><p>If <var>s</var> is failure, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#syntaxerror">SyntaxError</a></code>".

 <li><p>Return the result of <a class="external" data-anolis-spec="selectors" href="#css4-evaluate-a-selector">evaluate a selector</a>
 <var>s</var> against
 <var>node</var>'s <a href="#concept-tree-root" title="concept-tree-root">root</a> using
 <a class="external" data-anolis-spec="selectors" href="#css4-scoping-root">scoping root</a> <var>node</var> and
 scoping method
 <a class="external" data-anolis-spec="selectors" href="#css4-scope_filtered" title="scope_filtered">scope-filtered</a>. [[!SELECTORS4]].
</ol>

<p>The
<dfn id="dom-parentnode-queryselector" title="dom-ParentNode-querySelector"><code>querySelector(<var>selectors</var>)</code></dfn>
method must return the first result of running <a href="#scope-match-a-selectors-string">scope-match a selectors string</a>
<var>selectors</var> against the <a href="#context-object">context object</a>, and null if the result
is an empty list otherwise.

<p>The
<dfn id="dom-parentnode-queryselectorall" title="dom-ParentNode-querySelectorAll"><code>querySelectorAll(<var>selectors</var>)</code></dfn>
method must return the <a href="#concept-collection-static" title="concept-collection-static">static</a> result of
running <a href="#scope-match-a-selectors-string">scope-match a selectors string</a> <var>selectors</var> against the
<a href="#context-object">context object</a>.

<h4 id="interface-nondocumenttypechildnode">Interface <code><a href="#nondocumenttypechildnode">NonDocumentTypeChildNode</a></code></h4>

<p class="note no-backref">Note: The
<code title="dom-NonDocumentTypeChildNode-previousElementSibling"><a href="#dom-nondocumenttypechildnode-previouselementsibling">previousElementSibling</a></code>
and <code title="dom-NonDocumentTypeChildNode-nextElementSibling"><a href="#dom-nondocumenttypechildnode-nextelementsibling">nextElementSibling</a></code>
attributes have been removed from <code><a href="#documenttype">DocumentType</a></code> nodes for compatibility
reasons. If these additions are deemed compatible enough in the future, they could be
reinstated.

<pre class='idl'>
[NoInterfaceObject,
 Exposed=Window]
interface NonDocumentTypeChildNode {
  readonly attribute Element? previousElementSibling;
  readonly attribute Element? nextElementSibling;
};
Element implements NonDocumentTypeChildNode;
CharacterData implements NonDocumentTypeChildNode;
</pre>

<dl class="domintro">
 <dt><code><var>element</var> = <var>node</var> . <a href="#dom-nondocumenttypechildnode-previouselementsibling" title="dom-NonDocumentTypeChildNode-previousElementSibling">previousElementSibling</a></code>
 <dd><p>Returns the first
 <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a>
 <a href="#concept-tree-sibling" title="concept-tree-sibling">sibling</a> that
 is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.

 <dt><code><var>element</var> = <var>node</var> . <a href="#dom-nondocumenttypechildnode-nextelementsibling" title="dom-NonDocumentTypeChildNode-nextElementSibling">nextElementSibling</a></code>
 <dd><p>Returns the first
 <a href="#concept-tree-following" title="concept-tree-following">following</a>
 <a href="#concept-tree-sibling" title="concept-tree-sibling">sibling</a> that
 is an <a href="#concept-element" title="concept-element">element</a>, and null otherwise.
</dl>

<p>The
<dfn id="dom-nondocumenttypechildnode-previouselementsibling" title="dom-NonDocumentTypeChildNode-previousElementSibling"><code>previousElementSibling</code></dfn>
attribute must return the first
<a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a>
<a href="#concept-tree-sibling" title="concept-tree-sibling">sibling</a> that is an
<a href="#concept-element" title="concept-element">element</a>, and null otherwise.

<p>The
<dfn id="dom-nondocumenttypechildnode-nextelementsibling" title="dom-NonDocumentTypeChildNode-nextElementSibling"><code>nextElementSibling</code></dfn>
attribute must return the first
<a href="#concept-tree-following" title="concept-tree-following">following</a>
<a href="#concept-tree-sibling" title="concept-tree-sibling">sibling</a> that is an
<a href="#concept-element" title="concept-element">element</a>, and null otherwise.

<h4 id="interface-childnode">Interface <code><a href="#childnode">ChildNode</a></code></h4>
<pre class='idl'>
[NoInterfaceObject,
 Exposed=Window]
interface ChildNode {
  void remove();
};
DocumentType implements ChildNode;
Element implements ChildNode;
CharacterData implements ChildNode;
</pre>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-childnode-remove" title="dom-ChildNode-remove">remove</a>()</code>
 <dd><p>Removes <var>node</var>.
</dl>

<p>The
<dfn id="dom-childnode-remove" title="dom-ChildNode-remove"><code>remove()</code></dfn>
method must run these steps:

<ol>
 <li><p>If the <a href="#context-object">context object</a> does not have a
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>, terminate these steps.

 <li><p><a href="#concept-node-remove" title="concept-node-remove">Remove</a> the
 <a href="#context-object">context object</a> from the
 <a href="#context-object">context object</a>'s
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.
</ol>

<h4 id="old-style-collections:-nodelist-and-htmlcollection">Old-style collections: <code><a href="#nodelist">NodeList</a></code> and <code><a href="#htmlcollection">HTMLCollection</a></code></h4>

<p>A <dfn id="concept-collection" title="concept-collection">collection</dfn> is an object that
represents a lists of DOM nodes. A
<a href="#concept-collection" title="concept-collection">collection</a> can be either
<dfn id="concept-collection-live" title="concept-collection-live">live</dfn> or
<dfn id="concept-collection-static" title="concept-collection-static">static</dfn>. Unless otherwise stated,
a <a href="#concept-collection" title="concept-collection">collection</a> must be
<a href="#concept-collection-live" title="concept-collection-live">live</a>.

<p>If a <a href="#concept-collection" title="concept-collection">collection</a> is <a href="#concept-collection-live" title="concept-collection-live">live</a>, then the attributes and methods
on that object must operate on the actual underlying data, not a snapshot of
the data.

<p>When a <a href="#concept-collection" title="concept-collection">collection</a> is created, a
filter and a root are associated with it.

<p>The <a href="#concept-collection" title="concept-collection">collection</a> then
<dfn id="represented-by-the-collection" title="represented by the collection">represents</dfn> a view of the
subtree rooted at the <a href="#concept-collection" title="concept-collection">collection's</a>
root, containing only nodes that match the given filter. The view is linear.
In the absence of specific requirements to the contrary, the nodes within
the <a href="#concept-collection" title="concept-collection">collection</a> must be sorted in
<a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

<h5 id="interface-nodelist">Interface <code><a href="#nodelist">NodeList</a></code></h5>

<p>A <code><a href="#nodelist">NodeList</a></code> object is a
<a href="#concept-collection" title="concept-collection">collection</a> of
<a href="#concept-node" title="concept-node">nodes</a>.

<pre class='idl'>
[Exposed=Window]
interface NodeList {
  getter Node? item(unsigned long index);
  readonly attribute unsigned long length;
  iterable<Node>;
};
</pre>

<dl class="domintro">
 <dt><var>collection</var> . <code title="dom-NodeList-length"><a href="#dom-nodelist-length">length</a></code>
 <dd>
  <p>Returns the number of <a href="#concept-node" title="concept-node">nodes</a> in the
  <a href="#concept-collection" title="concept-collection">collection</a>.

 <dt><var>element</var> = <var>collection</var> . <code title="dom-NodeList-item"><a href="#dom-nodelist-item">item</a></code>(<var>index</var>)
 <dt><var>element</var> = <var>collection</var>[<var>index</var>]
 <dd>
  <p>Returns the <a href="#concept-node" title="concept-node">node</a> with index
  <var>index</var> from the
  <a href="#concept-collection" title="concept-collection">collection</a>. The
  <a href="#concept-node" title="concept-node">nodes</a> are sorted in
  <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.
</dl>

<div class="impl">

<p>The object's <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-supported-property-indices">supported property indices</a>
are the numbers in the range zero to one less than the number of nodes
<a href="#represented-by-the-collection">represented by the collection</a>. If there are no such elements, then
there are no <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-supported-property-indices">supported property indices</a>.

<p>The <dfn id="dom-nodelist-length" title="dom-NodeList-length"><code>length</code></dfn> attribute must
return the number of nodes <a href="#represented-by-the-collection">represented by the collection</a>.

<p>The
<dfn id="dom-nodelist-item" title="dom-NodeList-item"><code>item(<var>index</var>)</code></dfn>
method must return the <var>index</var>th
node in the <a href="#concept-collection" title="concept-collection">collection</a>. If there is no
<var>index</var>th node in the <a href="#concept-collection" title="concept-collection">collection</a>, then the method must return null.

</div>

<h5 id="interface-htmlcollection">Interface <code><a href="#htmlcollection">HTMLCollection</a></code></h5>

<pre class='idl'>
[Exposed=Window]
interface HTMLCollection {
  readonly attribute unsigned long length;
  getter Element? item(unsigned long index);
  getter Element? namedItem(DOMString name);
};
</pre>

<p>An <code><a href="#htmlcollection">HTMLCollection</a></code> object is a
<a href="#concept-collection" title="concept-collection">collection</a> of
<a href="#concept-element" title="concept-element">elements</a>.

<p class="note">Note: <code>Elements</code> is the better solution for representing a
<a href="#concept-collection" title="concept-collection">collection</a> of
<a href="#concept-element" title="concept-element">elements</a>. <code><a href="#htmlcollection">HTMLCollection</a></code> is an historical
artifact we cannot rid the web of.

<dl class="domintro">
 <dt><var>collection</var> . <code title="dom-HTMLCollection-length"><a href="#dom-htmlcollection-length">length</a></code>
 <dd>
  <p>Returns the number of <a href="#concept-element" title="concept-element">elements</a> in
  the <a href="#concept-collection" title="concept-collection">collection</a>.

 <dt><var>element</var> = <var>collection</var> . <code title="dom-HTMLCollection-item"><a href="#dom-htmlcollection-item">item</a></code>(<var>index</var>)
 <dt><var>element</var> = <var>collection</var>[<var>index</var>]
 <dd>
  <p>Returns the <a href="#concept-element" title="concept-element">element</a> with index
  <var>index</var> from the <a href="#concept-collection" title="concept-collection">collection</a>.
  The <a href="#concept-element" title="concept-element">elements</a> are sorted in <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

 <dt><var>element</var> = <var>collection</var> . <code title="dom-HTMLCollection-namedItem"><a href="#dom-htmlcollection-nameditem">namedItem</a></code>(<var>name</var>)
 <dt><var>element</var> = <var>collection</var>[<var>name</var>]
 <dd>
  <p>Returns the first <a href="#concept-element" title="concept-element">element</a> with <a href="#concept-id" title="concept-id">ID</a> or name <var>name</var>
  from the collection.
</dl>

<div class="impl">

<p>The object's <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-supported-property-indices">supported property indices</a>
are the numbers in the range zero to one less than the number of nodes
<a href="#represented-by-the-collection">represented by the collection</a>. If there are no such elements, then
there are no <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-supported-property-indices">supported property indices</a>.

<p>The <dfn id="dom-htmlcollection-length" title="dom-HTMLCollection-length"><code>length</code></dfn> attribute
must return the number of nodes <a href="#represented-by-the-collection">represented by the collection</a>.

<p>The
<dfn id="dom-htmlcollection-item" title="dom-HTMLCollection-item"><code>item(<var>index</var>)</code></dfn>
method must return the <var>index</var>th
<a href="#concept-element" title="concept-element">element</a> in the <a href="#concept-collection" title="concept-collection">collection</a>. If there is no
<var>index</var>th <a href="#concept-element" title="concept-element">element</a> in the <a href="#concept-collection" title="concept-collection">collection</a>, then the method must return null.

<p>The <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-supported-property-names">supported property names</a>, all
<a class="external" data-anolis-spec="webidl" href="http://heycam.github.io/webidl/#dfn-unenumerable">unenumerable</a>, are the values from the list returned
by these steps:

<ol>
 <li><p>Let <var>result</var> be an empty list.
 <li>
  <p>For each <var>element</var>
  <a href="#represented-by-the-collection">represented by the collection</a>, in
  <a href="#concept-tree-order" title="concept-tree-order">tree order</a>, run these substeps:
  <ol>
   <li><p>If <var>element</var> has an
   <a href="#concept-id" title="concept-id">ID</a> which is neither the empty string nor is
   in <var>result</var>, append <var>element</var>'s
   <a href="#concept-id" title="concept-id">ID</a> to <var>result</var>.

   <li><p>If <var>element</var> is in the <a href="#html-namespace">HTML namespace</a>
   and <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> a
   <a href="#concept-named-attribute" title="concept-named-attribute"><code>name</code> attribute</a>
   whose <a href="#concept-attribute-value" title="concept-attribute-value">value</a> is neither the
   empty string nor is in <var>result</var>, append
   <var>element</var>'s
   <a href="#concept-named-attribute" title="concept-named-attribute"><code>name</code> attribute</a>
   <a href="#concept-attribute-value" title="concept-attribute-value">value</a> to <var>result</var>.
  </ol>
 <li><p>Return <var>result</var>.
</ol>

<p>The
<dfn id="dom-htmlcollection-nameditem" title="dom-HTMLCollection-namedItem"><code>namedItem(<var>key</var>)</code></dfn>
method must run these steps:
<ol>
 <li>If <var>key</var> is the empty string, return null.</li>
 <li>
  <p>Return the first <a href="#concept-element" title="concept-element">element</a> in the
  <a href="#concept-collection" title="concept-collection">collection</a> for which at least one of
  the following is true:
  <ul>
   <li>it has an <a href="#concept-id" title="concept-id">ID</a> which is <var>key</var>.
   <li>it <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> a
   <a href="#concept-named-attribute" title="concept-named-attribute"><code>name</code> attribute</a>
   whose <a href="#concept-attribute-value" title="concept-attribute-value">value</a> is
   <var>key</var>;
  </ul>
  <p>or null if there is no such <a href="#concept-element" title="concept-element">element</a>.
</ol>

</div>

<h3 id="nodes-mutation-observers">Mutation observers</h3>
<p>Each
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#unit-of-related-similar-origin-browsing-contexts">unit of related similar-origin browsing contexts</a> has a
<dfn id="mutation-observer-compound-microtask-queued-flag">mutation observer compound microtask queued flag</dfn> and an associated list of
<code><a href="#mutationobserver">MutationObserver</a></code> objects which is initially empty.
[[!HTML5]

<p>To <dfn id="queue-a-mutation-observer-compound-microtask">queue a mutation observer compound microtask</dfn>, run these steps:

<ol>
 <li><p>If <a href="#mutation-observer-compound-microtask-queued-flag">mutation observer compound microtask queued flag</a> is set, terminate
 these steps.

 <li><p>Set <a href="#mutation-observer-compound-microtask-queued-flag">mutation observer compound microtask queued flag</a>.

 <li><p><a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/webappapis.html#queue-a-microtask" title="queue a microtask">Queue</a> a
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/webappapis.html#compound-microtask">compound microtask</a> to
 <a href="#notify-mutation-observers">notify mutation observers</a>.
</ol>

<p>To <dfn id="notify-mutation-observers">notify mutation observers</dfn>, run these steps:

<ol>
 <li><p>Unset <a href="#mutation-observer-compound-microtask-queued-flag">mutation observer compound microtask queued flag</a>.

 <li><p>Let <var>notify list</var> be a copy of
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#unit-of-related-similar-origin-browsing-contexts">unit of related similar-origin browsing contexts</a>'s
 list of <code><a href="#mutationobserver">MutationObserver</a></code> objects.

 <li>
  <p>For each <code><a href="#mutationobserver">MutationObserver</a></code> object <var>mo</var>
  in <var>notify list</var>,
  <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/webappapis.html#execute-a-compound-microtask-subtask">execute a compound microtask subtask</a> to run these
  steps:
  [[!HTML5]

  <ol>
   <li><p>Let <var>queue</var> be a copy of <var>mo</var>'s
   <a href="#concept-mo-queue" title="concept-MO-queue">record queue</a>.

   <li><p>Empty <var>mo</var>'s
   <a href="#concept-mo-queue" title="concept-MO-queue">record queue</a>.

   <li><p>Remove all
   <a href="#transient-registered-observer" title="transient registered observer">transient registered observers</a>
   whose <b>observer</b> is <var>mo</var>.

   <li><p>If <var>queue</var> is non-empty, call
   <var>mo</var>'s <a href="#concept-mo-callback" title="concept-MO-callback">callback</a>
   with <var>queue</var> as first argument, and
   <var>mo</var> (itself) as second argument and
   <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-callback-this-value">callback this value</a>. If this throws an exception,
   <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/webappapis.html#report-the-exception">report the exception</a>.
  </ol>
</ol>

<hr>

<p>Each <a href="#concept-node" title="concept-node">node</a> has an associated list of
<a href="#registered-observer" title="registered observer">registered observers</a>.
<!-- XXX also mention this in the <code>Node</code> section non-normatively? -->

<p>A <dfn id="registered-observer">registered observer</dfn> consists of an <b>observer</b> (a
<code><a href="#mutationobserver">MutationObserver</a></code> object) and <b>options</b> (a
<code><a href="#mutationobserverinit">MutationObserverInit</a></code> dictionary). A
<dfn id="transient-registered-observer">transient registered observer</dfn> is a specific type of
<a href="#registered-observer">registered observer</a> that has a <b>source</b> which is a
<a href="#registered-observer">registered observer</a>.Mutation observers</h3>

<h4 id="interface-mutationobserver">Interface <code><a href="#mutationobserver">MutationObserver</a></code></h4>

<pre class='idl'>
[Constructor(MutationCallback callback)]
interface MutationObserver {
  void observe(Node target, MutationObserverInit options);
  void disconnect();
  sequence<MutationRecord> takeRecords();
};

callback MutationCallback = void (sequence<MutationRecord> mutations, MutationObserver observer);

dictionary MutationObserverInit {
  boolean childList = false;
  boolean attributes;
  boolean characterData;
  boolean subtree = false;
  boolean attributeOldValue;
  boolean characterDataOldValue;
  sequence<DOMString> attributeFilter;
};
</pre>

<p>A <code><a href="#mutationobserver">MutationObserver</a></code> object can be used to observe mutations
to the <a href="#concept-tree" title="concept-tree">tree</a> of
<a href="#concept-node" title="concept-node">nodes</a>.

<p>Each <code><a href="#mutationobserver">MutationObserver</a></code> object has these associated concepts:
<ul>
 <li><p>A <dfn id="concept-mo-callback" title="concept-MO-callback">callback</dfn> set on creation.
 <li><p>A list of <a href="#concept-node" title="concept-node">nodes</a> on which it is a <a href="#registered-observer">registered observer</a>'s <b>observer</b> that is initially empty.
 <li><p>A list of <code><a href="#mutationrecord">MutationRecord</a></code> objects called the
 <dfn id="concept-mo-queue" title="concept-MO-queue">record queue</dfn> that is initially empty.
</ul>

<dl class="domintro">
 <dt><code><var>observer</var> = new <a href="#dom-mutationobserver" title="dom-MutationObserver">MutationObserver</a>(<var>callback</var>)</code>
 <dd><p>Constructs a <code><a href="#mutationobserver">MutationObserver</a></code> object and sets its
 <a href="#concept-mo-callback" title="concept-MO-callback">callback</a> to
 <var>callback</var>. The <var>callback</var> is invoked with a
 list of <code><a href="#mutationrecord">MutationRecord</a></code> objects as first argument and the
 constructed <code><a href="#mutationobserver">MutationObserver</a></code> object as second argument. It is
 invoked after <a href="#concept-node" title="concept-node">nodes</a> registered with the
 <code title="dom-MutationObserver-observe"><a href="#dom-mutationobserver-observe">observe()</a></code> method, are
 mutated.

 <dt><code><var>observer</var> . <a href="#dom-mutationobserver-observe" title="dom-MutationObserver-observe">observe</a>(<var>target</var>, <var>options</var>)</code>
 <dd>
  <p>Instructs the user agent to observe a given <var>target</var>
  (a <a href="#concept-node" title="concept-node">node</a>) and report any mutations based on
  the criteria given by <var>options</var> (an object).

  <p>The <var>options</var> argument allows for setting mutation
  observation options via object members. These are the object members that
  can be used:

  <dl>
   <dt><code title="dom-MutationObserverInit-childList">childList</code>
   <dd><p>Set to true if mutations to <var>target</var>'s
   <a href="#concept-tree-child" title="concept-tree-child">children</a> are to be observed.

   <dt><code title="dom-MutationObserverInit-attributes">attributes</code>
   <dd><p>Set to true if mutations to <var>target</var>'s
   <a href="#concept-attribute" title="concept-attribute">attributes</a> are to be observed. Can be omitted if
   <code title="dom-MutationObserverInit-attributeOldValue">attributeOldValue</code> and/or
   <code title="dom-MutationObserverInit-attributeFilter">attributeFilter</code> is
   specified.

   <dt><code title="dom-MutationObserverInit-characterData">characterData</code>
   <dd><p>Set to true if mutations to <var>target</var>'s
   <a href="#concept-cd-data" title="concept-CD-data">data</a> are to be observed. Can be omitted if
   <code title="dom-MutationObserverInit-characterDataOldValue">characterDataOldValue</code>
   is specified.

   <dt><code title="dom-MutationObserverInit-subtree">subtree</code>
   <dd><p>Set to true if mutations to not just <var>target</var>, but
   also <var>target</var>'s
   <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a> are to be
   observed.

   <dt><code title="dom-MutationObserverInit-attributeOldValue">attributeOldValue</code>
   <dd><p>Set to true if
   <code title="dom-MutationObserverInit-attributes">attributes</code> is true or omitted
   and <var>target</var>'s
   <a href="#concept-attribute" title="concept-attribute">attribute</a>
   <a href="#concept-attribute-value" title="concept-attribute-value">value</a> before the mutation
   needs to be recorded.

   <dt><code title="dom-MutationObserverInit-characterDataOldValue">characterDataOldValue</code>
   <dd><p>Set to true if
   <code title="dom-MutationObserverInit-characterData">characterData</code>
   is set to true or omitted and <var>target</var>'s
   <a href="#concept-cd-data" title="concept-CD-data">data</a> before the mutation
   needs to be recorded.

   <dt><code title="dom-MutationObserverInit-attributeFilter">attributeFilter</code>
   <dd><p>Set to a list of <a href="#concept-attribute" title="concept-attribute">attribute</a>
   <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local names</a> (without
   <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>) if not all
   <a href="#concept-attribute" title="concept-attribute">attribute</a> mutations need to be
   observed and <code title="dom-MutationObserverInit-attributes">attributes</code> is true
   or omitted.
  </dl>

 <dt><code><var>observer</var> . <a href="#dom-mutationobserver-disconnect" title="dom-MutationObserver-disconnect">disconnect</a>()</code>
 <dd><p>Stops <var>observer</var> from observing any mutations.
 Until the <code title="dom-MutationObserver-observe"><a href="#dom-mutationobserver-observe">observe()</a></code> method
 is used again, <var>observer</var>'s
 <a href="#concept-mo-callback" title="concept-MO-callback">callback</a> will not be invoked.

 <dt><code><var>observer</var> . <a href="#dom-mutationobserver-takerecords" title="dom-MutationObserver-takeRecords">takeRecords</a>()</code>
 <dd><p>Empties the <a href="#concept-mo-queue" title="concept-MO-queue">record queue</a> and
 returns what was in there.
</dl>

<p>The
<dfn id="dom-mutationobserver" title="dom-MutationObserver"><code>MutationObserver(<var>callback</var>)</code></dfn>
constructor must create a new <code><a href="#mutationobserver">MutationObserver</a></code> object with
<a href="#concept-mo-callback" title="concept-MO-callback">callback</a> set to <var>callback</var>,
append it to the
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#unit-of-related-similar-origin-browsing-contexts">unit of related similar-origin browsing contexts</a>'s list
of <code><a href="#mutationobserver">MutationObserver</a></code> objects, and then return it.

<p>The
<dfn id="dom-mutationobserver-observe" title="dom-MutationObserver-observe"><code>observe(<var>target</var>, <var>options</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>If either <var>options</var>'
 <code title="dom-MutationObserverInit-attributeOldValue">attributeOldValue</code> or
 <code title="dom-MutationObserverInit-attributeFilter">attributeFilter</code> is present
 and <var>options</var>'
 <code title="dom-MutationObserverInit-attributes">attributes</code> is omitted, set
 <var>options</var>'
 <code title="dom-MutationObserverInit-attributes">attributes</code> to true.

 <li><p>If <var>options</var>'
 <code title="dom-MutationObserverInit-characterDataOldValue">characterDataOldValue</code>
 is present and <var>options</var>'
 <code title="dom-MutationObserverInit-characterData">characterData</code> is omitted, set
 <var>options</var>'
 <code title="dom-MutationObserverInit-characterData">characterData</code> to true.

 <li><p>If none of <var>options</var>'
 <code title="dom-MutationObserverInit-childList">childList</code>
 <code title="dom-MutationObserverInit-attributes">attributes</code>, and
 <code title="dom-MutationObserverInit-characterData">characterData</code> is true,
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-throw">throw</a> a <code>TypeError</code>.

 <li><p>If <var>options</var>'
 <code title="dom-MutationObserverInit-attributeOldValue">attributeOldValue</code> is true
 and <var>options</var>'
 <code title="dom-MutationObserverInit-attributes">attributes</code> is false,
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-throw">throw</a> a JavaScript <code>TypeError</code>.

 <li><p>If <var>options</var>'
 <code title="dom-MutationObserverInit-attributeFilter">attributeFilter</code> is present
 and <var>options</var>'
 <code title="dom-MutationObserverInit-attributes">attributes</code> is false,
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-throw">throw</a> a JavaScript <code>TypeError</code>.

 <li><p>If <var>options</var>'
 <code title="dom-MutationObserverInit-characterDataOldValue">characterDataOldValue</code>
 is true and <var>options</var>'
 <code title="dom-MutationObserverInit-characterData">characterData</code> is false,
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-throw">throw</a> a JavaScript <code>TypeError</code>.

 <li>
  <p>For each <a href="#registered-observer">registered observer</a> <var>registered</var> in
  <var>target</var>'s list of
  <a href="#registered-observer" title="registered observer">registered observers</a> whose <b>observer</b> is
  the <a href="#context-object">context object</a>:

  <ol>
   <li><p>Remove all
   <a href="#transient-registered-observer" title="transient registered observer">transient registered observers</a> whose
   <b>source</b> is <var>registered</var>.

   <li><p>Replace <var>registered</var>'s <b>options</b> with
   <var>options</var>.
  </ol>

 <li><p>Otherwise, add a new <a href="#registered-observer">registered observer</a> to
 <var>target</var>'s list of
 <a href="#registered-observer" title="registered observer">registered observers</a> with the
 <a href="#context-object">context object</a> as the <b>observer</b> and <var>options</var> as the <b>options</b>,
 and add <var>target</var> to <a href="#context-object">context object</a>'s list of <a href="#concept-node" title="concept-node">nodes</a> on which it is registered.
</ol>

<p>The
<dfn id="dom-mutationobserver-disconnect" title="dom-MutationObserver-disconnect"><code>disconnect()</code></dfn>
method must, for each <a href="#concept-node" title="concept-node">node</a>
<var>node</var> in the <a href="#context-object">context object</a>'s list of
<a href="#concept-node" title="concept-node">nodes</a>, remove any
<a href="#registered-observer">registered observer</a> on <var>node</var>
for which the <a href="#context-object">context object</a> is the <b>observer</b>, and also
empty <a href="#context-object">context object</a>'s
<a href="#concept-mo-queue" title="concept-MO-queue">record queue</a>.

<p>The
<dfn id="dom-mutationobserver-takerecords" title="dom-MutationObserver-takeRecords"><code>takeRecords()</code></dfn>
method must return a copy of the
<a href="#concept-mo-queue" title="concept-MO-queue">record queue</a> and then empty the
<a href="#concept-mo-queue" title="concept-MO-queue">record queue</a>.

<h4 id="queuing-a-mutation-record">Queuing a mutation record</h4>
<p>To <dfn id="queue-a-mutation-record">queue a mutation record</dfn> of <var>type</var> for
<var>target</var> with one or more of (depends on
<var>type</var>) name <var>name</var>, namespace
<var>namespace</var>, oldValue <var>oldValue</var>, addedNodes
<var>addedNodes</var>, removedNodes <var>removedNodes</var>,
previousSibling <var>previousSibling</var>, and nextSibling
<var>nextSibling</var>, run these steps:

<ol>
 <li><p>Let <var>interested observers</var> be an initially empty set
 of <code><a href="#mutationobserver">MutationObserver</a></code> objects optionally paired with a string.

 <li><p>Let <var>nodes</var> be the
 <a href="#concept-tree-inclusive-ancestor" title="concept-tree-inclusive-ancestor">inclusive ancestors</a> of
 <var>target</var>.

 <li>
  <p>Then, for each <var>node</var> in <var>nodes</var>, and
  then for each <var>registered observer</var> (with
  <var>registered observer</var>'s <b>options</b> as
  <var>options</var>) in <var>node</var>'s list of
  <a href="#registered-observer" title="registered observer">registered observers</a>:

  <ol>
   <li><p>If <var>node</var> is not <var>target</var> and
   <var>options</var>'s <code>subtree</code> is false, continue.

   <li><p>If <var>type</var> is "<code>attributes</code>" and
   <var>options</var>'s <code>attributes</code> is not true, continue.
   <!--not true==false||omitted-->

   <li><p>If <var>type</var> is "<code>attributes</code>",
   <var>options</var>'s <code>attributeFilter</code> is present, and either
   <var>options</var>'s <code>attributeFilter</code> does not contain
   <var>name</var> or <var>namespace</var> is non-null, continue.

   <li><p>If <var>type</var> is "<code>characterData</code>" and
   <var>options</var>'s <code>characterData</code> is not true, continue.
   <!--not true==false||omitted-->

   <li><p>If <var>type</var> is "<code>childList</code>" and
   <var>options</var>'s <code>childList</code> is false, continue.

   <li><p>If <var>registered observer</var>'s <b>observer</b> is
   not in <var>interested observers</var>, append
   <var>registered observer</var>'s <b>observer</b> to
   <var>interested observers</var>.

   <li><p>If either <var>type</var> is "<code>attributes</code>"
   and <var>options</var>'s <code>attributeOldValue</code> is true, or
   <var>type</var> is "<code>characterData</code>" and
   <var>options</var>'s <code>characterDataOldValue</code> is true,
   set the paired string of
   <var>registered observer</var>'s <b>observer</b> in
   <var>interested observers</var> to <var>oldValue</var>.
  </ol>

 <li>
  <p>Then, for each <var>observer</var> in
  <var>interested observers</var>:

  <ol>
   <li><p>Let <var>record</var> be a new <code><a href="#mutationrecord">MutationRecord</a></code>
   object with its <code title="dom-MutationRecord-type"><a href="#dom-mutationrecord-type">type</a></code> set to
   <var>type</var> and
   <code title="dom-MutationRecord-target"><a href="#dom-mutationrecord-target">target</a></code> set to
   <var>target</var>.

   <li><p>If <var>name</var> and <var>namespace</var> are given,
   set <var>record</var>'s
   <code title="dom-MutationRecord-attributeName"><a href="#dom-mutationrecord-attributename">attributeName</a></code> to
   <var>name</var>, and <var>record</var>'s
   <code title="dom-MutationRecord-attributeNamespace"><a href="#dom-mutationrecord-attributenamespace">attributeNamespace</a></code>
   to <var>namespace</var>.

   <li><p>If <var>addedNodes</var> is given, set <var>record</var>'s
   <code title="dom-MutationRecord-addedNodes"><a href="#dom-mutationrecord-addednodes">addedNodes</a></code> to
   <var>addedNodes</var>.

   <li><p>If <var>removedNodes</var> is given, set <var>record</var>'s
   <code title="dom-MutationRecord-removedNodes"><a href="#dom-mutationrecord-removednodes">removedNodes</a></code> to
   <var>removedNodes</var>,

   <li><p>If <var>previousSibling</var> is given, set <var>record</var>'s
   <code title="dom-MutationRecord-previousSibling"><a href="#dom-mutationrecord-previoussibling">previousSibling</a></code> to
   <var>previousSibling</var>.

   <li><p>If <var>nextSibling</var> is given, set <var>record</var>'s
   <code title="dom-MutationRecord-nextSibling"><a href="#dom-mutationrecord-nextsibling">nextSibling</a></code> to
   <var>nextSibling</var>.

   <li><p>If <var>observer</var> has a paired string,
   set <var>record</var>'s <code title="dom-MutationRecord-oldValue"><a href="#dom-mutationrecord-oldvalue">oldValue</a></code>
   to <var>observer</var>'s paired string.

   <li><p>Append <var>record</var> to <var>observer</var>'s
   <a href="#concept-mo-queue" title="concept-MO-queue">record queue</a>.
  </ol>

 <li><p><a href="#queue-a-mutation-observer-compound-microtask">Queue a mutation observer compound microtask</a>.
</ol>

<h4 id="interface-mutationrecord">Interface <code><a href="#mutationrecord">MutationRecord</a></code></h4>

<pre class='idl'>
[Exposed=Window]
interface MutationRecord {
  readonly attribute DOMString type;
  readonly attribute Node target;
  [SameObject] readonly attribute NodeList addedNodes;
  [SameObject] readonly attribute NodeList removedNodes;
  readonly attribute Node? previousSibling;
  readonly attribute Node? nextSibling;
  readonly attribute DOMString? attributeName;
  readonly attribute DOMString? attributeNamespace;
  readonly attribute DOMString? oldValue;
};
</pre>

<dl class="domintro">
 <dt><code><var>record</var> . <a href="#dom-mutationrecord-type" title="dom-MutationRecord-type">type</a></code>
 <dd><p>Returns "<code>attributes</code>" if it was an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> mutation.
 "<code>characterData</code>" if it was a mutation to a
 <code><a href="#characterdata">CharacterData</a></code> <a href="#concept-node" title="concept-node">node</a>. And
 "<code>childList</code>" if it was a mutation to the
 <a href="#concept-tree" title="concept-tree">tree</a> of
 <a href="#concept-node" title="concept-node">nodes</a>.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-target" title="dom-MutationRecord-target">target</a></code>
 <dd><p>Returns the <a href="#concept-node" title="concept-node">node</a> the mutation
 affected, depending on the <code title="dom-MutationRecord-type"><a href="#dom-mutationrecord-type">type</a></code>.
 For "<code>attributes</code>", it is the
 <a href="#concept-element" title="concept-element">element</a> whose
 <a href="#concept-attribute" title="concept-attribute">attribute</a> changed. For
 "<code>characterData</code>", it is the <code><a href="#characterdata">CharacterData</a></code>
 <a href="#concept-node" title="concept-node">node</a>. For "<code>childList</code>",
 it is the  <a href="#concept-node" title="concept-node">node</a> whose
 <a href="#concept-tree-child" title="concept-tree-child">children</a> changed.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-addednodes" title="dom-MutationRecord-addedNodes">addedNodes</a></code>
 <dt><code><var>record</var> . <a href="#dom-mutationrecord-removednodes" title="dom-MutationRecord-removedNodes">removedNodes</a></code>
 <dd><p>Return the <a href="#concept-node" title="concept-node">nodes</a> added and removed
 respectively.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-previoussibling" title="dom-MutationRecord-previousSibling">previousSibling</a></code>
 <dt><code><var>record</var> . <a href="#dom-mutationrecord-nextsibling" title="dom-MutationRecord-nextSibling">nextSibling</a></code>
 <dd><p>Return the <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous</a>
 and <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a> respectively
 of the added or removed <a href="#concept-node" title="concept-node">nodes</a>, and null
 otherwise.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-attributename" title="dom-MutationRecord-attributeName">attributeName</a></code>
 <dd><p>Returns the
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> of the
 changed <a href="#concept-attribute" title="concept-attribute">attribute</a>, and null otherwise.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-attributenamespace" title="dom-MutationRecord-attributeNamespace">attributeNamespace</a></code>
 <dd><p>Returns the <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> of the
 changed <a href="#concept-attribute" title="concept-attribute">attribute</a>, and null otherwise.

 <dt><code><var>record</var> . <a href="#dom-mutationrecord-oldvalue" title="dom-MutationRecord-oldValue">oldValue</a></code>
 <dd><p>The return value depends on
 <code title="dom-MutationRecord-type"><a href="#dom-mutationrecord-type">type</a></code>. For
 "<code>attributes</code>", it is the
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> of the
 changed <a href="#concept-attribute" title="concept-attribute">attribute</a> before the change.
 For "<code>characterData</code>", it is the
 <a href="#concept-cd-data" title="concept-CD-data">data</a> of the changed
 <a href="#concept-node" title="concept-node">node</a> before the change. For
 "<code>childList</code>", it is null.
</dl>

<p>The <dfn id="dom-mutationrecord-type" title="dom-MutationRecord-type"><code>type</code></dfn> and
<dfn id="dom-mutationrecord-target" title="dom-MutationRecord-target"><code>target</code></dfn>
attributes must return the values they were initialized to.

<p>The
<dfn id="dom-mutationrecord-addednodes" title="dom-MutationRecord-addedNodes"><code>addedNodes</code></dfn> and
<dfn id="dom-mutationrecord-removednodes" title="dom-MutationRecord-removedNodes"><code>removedNodes</code></dfn>
attributes must return the values they were initialized to. Unless stated
otherwise, when a <code><a href="#mutationrecord">MutationRecord</a></code> object is created, they must
both be initialized to an empty <code><a href="#nodelist">NodeList</a></code>.

<p>The
<dfn id="dom-mutationrecord-previoussibling" title="dom-MutationRecord-previousSibling"><code>previousSibling</code></dfn>,
<dfn id="dom-mutationrecord-nextsibling" title="dom-MutationRecord-nextSibling"><code>nextSibling</code></dfn>,
<dfn id="dom-mutationrecord-attributename" title="dom-MutationRecord-attributeName"><code>attributeName</code></dfn>,
<dfn id="dom-mutationrecord-attributenamespace" title="dom-MutationRecord-attributeNamespace"><code>attributeNamespace</code></dfn>, and
<dfn id="dom-mutationrecord-oldvalue" title="dom-MutationRecord-oldValue"><code>oldValue</code></dfn>
attributes must return the values they were initialized to. Unless stated
otherwise, when a <code><a href="#mutationrecord">MutationRecord</a></code> object is created, they must
be initialized to null.

<h4 id="garbage-collection">Garbage collection</h4>

<p><a href="#concept-node" title="concept-node">Nodes</a> have a strong reference to
<a href="#registered-observer" title="registered observer">registered observers</a> in their
list of <a href="#registered-observer" title="registered observer">registered observers</a>.

<p><a href="#registered-observer" title="registered observer">Registered observers</a> in a
<a href="#concept-node" title="concept-node">node</a>'s list of
<a href="#registered-observer" title="registered observer">registered observers</a> have a weak
reference to the <a href="#concept-node" title="concept-node">node</a>.

<h3 id="nodes-interface-node">Interface <code><a href="#node">Node</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface Node : EventTarget {
  const unsigned short ELEMENT_NODE = 1;
  const unsigned short ATTRIBUTE_NODE = 2; // historical
  const unsigned short TEXT_NODE = 3;
  const unsigned short CDATA_SECTION_NODE = 4; // historical
  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical
  const unsigned short ENTITY_NODE = 6; // historical
  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
  const unsigned short COMMENT_NODE = 8;
  const unsigned short DOCUMENT_NODE = 9;
  const unsigned short DOCUMENT_TYPE_NODE = 10;
  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
  const unsigned short NOTATION_NODE = 12; // historical
  readonly attribute unsigned short nodeType;
  readonly attribute DOMString nodeName;

  readonly attribute DOMString? baseURI;

  readonly attribute Document? ownerDocument;
  readonly attribute Node? parentNode;
  readonly attribute Element? parentElement;
  boolean hasChildNodes();
  [SameObject] readonly attribute NodeList childNodes;
  readonly attribute Node? firstChild;
  readonly attribute Node? lastChild;
  readonly attribute Node? previousSibling;
  readonly attribute Node? nextSibling;

           attribute DOMString? nodeValue;
           attribute DOMString? textContent;
  void normalize();

  [NewObject] Node cloneNode(optional boolean deep = false);
  boolean isEqualNode(Node? node);

  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;
  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;
  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;
  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;
  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;
  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
  unsigned short compareDocumentPosition(Node other);
  boolean contains(Node? other);

  DOMString? lookupPrefix(DOMString? namespace);
  DOMString? lookupNamespaceURI(DOMString? prefix);
  boolean isDefaultNamespace(DOMString? namespace);

  Node insertBefore(Node node, Node? child);
  Node appendChild(Node node);
  Node replaceChild(Node node, Node child);
  Node removeChild(Node child);
};
</pre>

<p class="note">Note: <code><a href="#node">Node</a></code> is an abstract interface and does not exist
as <a href="#concept-node" title="concept-node">node</a>. It is used by all
<a href="#concept-node" title="concept-node">nodes</a> (<code><a href="#document">Document</a></code>,
<code><a href="#documentfragment">DocumentFragment</a></code>, <code><a href="#documenttype">DocumentType</a></code>,
<code><a href="#element">Element</a></code>, <code><a href="#text">Text</a></code>, <code><a href="#processinginstruction">ProcessingInstruction</a></code>,
and <code><a href="#comment">Comment</a></code>).

<p>Each <a href="#concept-node" title="concept-node">node</a> has an associated
<dfn id="concept-node-document" title="concept-node-document">node document</dfn>, set upon creation,
that is a <a href="#concept-document" title="concept-document">document</a>.

<p class="note">Note: A <a href="#concept-node" title="concept-node">node</a>'s
<a href="#concept-node-document" title="concept-node-document">node document</a> can be changed by
the <a href="#concept-node-adopt" title="concept-node-adopt">adopt</a> algorithm.

<p>Each <a href="#concept-node" title="concept-node">node</a> also has an associated
<dfn id="concept-node-base-url" title="concept-node-base-url">base URL</dfn>.

<p class="note">Note: Other specifications define the value of the
<a href="#concept-node-base-url" title="concept-node-base-url">base URL</a> and its observable
behavior. This specification solely defines the concept and the
<code>baseURI</code> attribute.

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-node-nodetype" title="dom-Node-nodeType">nodeType</a></code>
 <dd>
  <p>Returns the type of <var>node</var>, represented by a number from the following list:</p>

  <dl>
   <dt><code><a href="#node">Node</a> . <a href="#dom-node-element_node" title="dom-Node-ELEMENT_NODE">ELEMENT_NODE</a></code> (1)
   <dd><var>node</var> is an
   <a href="#concept-element" title="concept-element">element</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-text_node" title="dom-Node-TEXT_NODE">TEXT_NODE</a></code> (3)
   <dd><var>node</var> is a <code><a href="#text">Text</a></code>
   <a href="#concept-node" title="concept-node">node</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-processing_instruction_node" title="dom-Node-PROCESSING_INSTRUCTION_NODE">PROCESSING_INSTRUCTION_NODE</a></code> (7)
   <dd><var>node</var> is a <code><a href="#processinginstruction">ProcessingInstruction</a></code>
   <a href="#concept-node" title="concept-node">node</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-comment_node" title="dom-Node-COMMENT_NODE">COMMENT_NODE</a></code> (8)
   <dd><var>node</var> is a <code><a href="#comment">Comment</a></code>
   <a href="#concept-node" title="concept-node">node</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_node" title="dom-Node-DOCUMENT_NODE">DOCUMENT_NODE</a></code> (9)
   <dd><var>node</var> is a
   <a href="#concept-document" title="concept-document">document</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_type_node" title="dom-Node-DOCUMENT_TYPE_NODE">DOCUMENT_TYPE_NODE</a></code> (10)
   <dd><var>node</var> is a
   <a href="#concept-doctype" title="concept-doctype">doctype</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_fragment_node" title="dom-Node-DOCUMENT_FRAGMENT_NODE">DOCUMENT_FRAGMENT_NODE</a></code> (11)
   <dd><var>node</var> is a <code><a href="#documentfragment">DocumentFragment</a></code>
   <a href="#concept-node" title="concept-node">node</a>.
  </dl>

 <dt><code><var>node</var> . nodeName</code>
 <dd>
  <p>Returns a string appropriate for the type of <var>node</var>, as
  follows:

  <dl>
   <dt><code><a href="#element">Element</a></code>
   <dd>Its <code title="dom-Element-tagName"><a href="#dom-element-tagname">tagName</a></code> attribute value.

   <dt><code><a href="#text">Text</a></code>
   <dd>"<code>#text</code>".

   <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
   <dd>Its <a href="#concept-pi-target" title="concept-PI-target">target</a>.

   <dt><code><a href="#comment">Comment</a></code>
   <dd>"<code>#comment</code>".

   <dt><code><a href="#document">Document</a></code>
   <dd>"<code>#document</code>".

   <dt><code><a href="#documenttype">DocumentType</a></code>
   <dd>Its <a href="#concept-doctype-name" title="concept-doctype-name">name</a>.

   <dt><code><a href="#documentfragment">DocumentFragment</a></code>
   <dd>"<code>#document-fragment</code>".
  </dl>
</dl>

<p>The <dfn id="dom-node-nodetype" title="dom-Node-nodeType"><code>nodeType</code></dfn> attribute
must return the type of the node, which must be one of the following:

<ul>
 <li><dfn id="dom-node-element_node" title="dom-Node-ELEMENT_NODE"><code>ELEMENT_NODE</code></dfn> (1);

 <!--AttrExodus
 <li><dfn title=dom-Node-ATTRIBUTE_NODE><code>ATTRIBUTE_NODE</code></dfn> (2, historical);
 -->

 <li><dfn id="dom-node-text_node" title="dom-Node-TEXT_NODE"><code>TEXT_NODE</code></dfn> (3);

 <!-- XXX still questionable
 <li><dfn title=dom-Node-CDATA_SECTION_NODE><code>CDATA_SECTION_NODE</code></dfn> (4, historical);
 -->

 <li><dfn id="dom-node-processing_instruction_node" title="dom-Node-PROCESSING_INSTRUCTION_NODE"><code>PROCESSING_INSTRUCTION_NODE</code></dfn> (7);

 <li><dfn id="dom-node-comment_node" title="dom-Node-COMMENT_NODE"><code>COMMENT_NODE</code></dfn> (8);

 <li><dfn id="dom-node-document_node" title="dom-Node-DOCUMENT_NODE"><code>DOCUMENT_NODE</code></dfn> (9);

 <li><dfn id="dom-node-document_type_node" title="dom-Node-DOCUMENT_TYPE_NODE"><code>DOCUMENT_TYPE_NODE</code></dfn> (10);

 <li><dfn id="dom-node-document_fragment_node" title="dom-Node-DOCUMENT_FRAGMENT_NODE"><code>DOCUMENT_FRAGMENT_NODE</code></dfn> (11).
</ul>


<!-- NodeExodus
<hr>

<p>The <dfn title=dom-Node-namespaceURI><code>namespaceURI</code></dfn> attribute must return the namespace that is associated with the node, if there is one and it's not the empty string, and null otherwise.

<p>The <dfn title=dom-Node-prefix><code>prefix</code></dfn> attribute must return the prefix that is associated with the node, if there is one and it's not the empty string, and null otherwise.
<!- - support setting? - - On setting, it must run these steps:

<ol>
 <li><p>Let <var title>prefix</var> be the value being assigned.
 <li>
  <p>If <var title>prefix</var> is not null, run these substeps:
  <ol>
   <li><p>If <var title>prefix</var> does not match the
   <code data-anolis-spec=xml>Name</code> production in XML,
   <span title=concept-throw>throw</span> an
   "<code>InvalidCharacterError</code>" exception.
   <li><p>If <var title>prefix</var> does not match the <code
   data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML, <span title=concept-throw>throw</span> a
   "<code>NamespaceError</code>" exception.
  </ol>
 <li><p>Actually this does not match any browser. Let's try to drop it instead.
</ol>- ->

<p>The <dfn title=dom-Node-localName><code>localName</code></dfn> attribute
must return the local name that is associated with the node, if it has one,
and null otherwise.-->

<p>The <code>nodeName</code> attribute
must return the following, depending on the <a href="#context-object">context object</a>:

<dl class="switch">
 <dt><code><a href="#element">Element</a></code>
 <dd><p>Its <code title="dom-Element-tagName"><a href="#dom-element-tagname">tagName</a></code> attribute value.

 <!--AttrExodus
 <dt><code>Attr</code>
 <dd><p>The <span>context object</span>'s
 <code title=dom-Attr-name>name</code> attribute.
 -->

 <dt><code><a href="#text">Text</a></code>
 <dd><p>"<code>#text</code>".

 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dd><p>Its <a href="#concept-pi-target" title="concept-PI-target">target</a>.

 <dt><code><a href="#comment">Comment</a></code>
 <dd><p>"<code>#comment</code>".

 <dt><code><a href="#document">Document</a></code>
 <dd><p>"<code>#document</code>".

 <dt><code><a href="#documenttype">DocumentType</a></code>
 <dd><p>Its <a href="#concept-doctype-name" title="concept-doctype-name">name</a>.

 <dt><code><a href="#documentfragment">DocumentFragment</a></code>
 <dd><p>"<code>#document-fragment</code>".
</dl>

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . baseURI</code>
 <dd><p>Returns the <a href="#concept-node-base-url" title="concept-node-base-url">base URL</a>.
</dl>

<p>The <code>baseURI</code> attribute must return the associated <a href="#concept-node-base-url" title="concept-node-base-url">base URL</a>.

<!--AttrExodus
<hr>

<p>The <dfn title=dom-Node-hasAttributes><code>hasAttributes()</code></dfn>
method must return true if there are any attributes associated with the
<span>context object</span>, if it is an <code>Element</code> node, and false
otherwise.

<p>The <dfn title=dom-Node-attributes><code>attributes</code></dfn> attribute must return a <code>NamedNodeMap</code> of all the <code>Attr</code> nodes associated with the node of the <span>context object</span>, if it is an <code>Element</code> node, and null otherwise.
-->

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . ownerDocument</code>
 <dd>
  <p>Returns the <a href="#concept-node-document" title="concept-node-document">node document</a>.
  <p>Returns null for <a href="#concept-document" title="concept-document">documents</a>.

 <dt><code><var>node</var> . <a href="#dom-node-parentnode" title="dom-Node-parentNode">parentNode</a></code>
 <dd><p>Returns the <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

 <dt><code><var>node</var> . <a href="#dom-node-parentelement" title="dom-Node-parentElement">parentElement</a></code>
 <dd><p>Returns the <a href="#parent-element">parent element</a>.

 <dt><code><var>node</var> . <a href="#dom-node-haschildnodes" title="dom-Node-hasChildNodes">hasChildNodes()</a></code>
 <dd><p>Returns whether <var>node</var> has
 <a href="#concept-tree-child" title="concept-tree-child">children</a>.

 <dt><code><var>node</var> . <a href="#dom-node-childnodes" title="dom-Node-childNodes">childNodes</a></code>
 <dd><p>Returns the <a href="#concept-tree-child" title="concept-tree-child">children</a>.

 <dt><code><var>node</var> . <a href="#dom-node-firstchild" title="dom-Node-firstChild">firstChild</a></code>
 <dd><p>Returns the <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a>.

 <dt><code><var>node</var> . <a href="#dom-node-lastchild" title="dom-Node-lastChild">lastChild</a></code>
 <dd><p>Returns the <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a>.

 <dt><code><var>node</var> . <a href="#dom-node-previoussibling" title="dom-Node-previousSibling">previousSibling</a></code>
 <dd><p>Returns the
 <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>.

 <dt><code><var>node</var> . <a href="#dom-node-nextsibling" title="dom-Node-nextSibling">nextSibling</a></code>
 <dd><p>Returns the
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.
</dl>

<div class="impl">

<p>The <code>ownerDocument</code>
attribute must run these steps:
<ol>
 <li>If the <a href="#context-object">context object</a> is a
 <a href="#concept-document" title="concept-document">document</a>, return null.

 <li>Return the <a href="#concept-node-document" title="concept-node-document">node document</a>.
</ol>

<div class="note">
<p>The <a href="#concept-node-document" title="concept-node-document">node document</a> of a
<a href="#concept-document" title="concept-document">document</a> is that
<a href="#concept-document" title="concept-document">document</a> itself.
<p>All <a href="#concept-node" title="concept-node">nodes</a> have a
<a href="#concept-document" title="concept-document">document</a> at all times.
</div>

<p>The <dfn id="dom-node-parentnode" title="dom-Node-parentNode"><code>parentNode</code></dfn>
attribute must return the <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.
<!-- AttrExodus
<li><p>If the <span>context object</span> is an <code>Attr</code> node,
return null.
-->

<p>The <dfn id="dom-node-parentelement" title="dom-Node-parentElement"><code>parentElement</code></dfn>
attribute must return the <a href="#parent-element">parent element</a>.

<p>The <dfn id="dom-node-haschildnodes" title="dom-Node-hasChildNodes"><code>hasChildNodes()</code></dfn>
method must return true if the <a href="#context-object">context object</a> has
<a href="#concept-tree-child" title="concept-tree-child">children</a>, and false otherwise.

<p>The <dfn id="dom-node-childnodes" title="dom-Node-childNodes"><code>childNodes</code></dfn>
attribute must return a <code><a href="#nodelist">NodeList</a></code> rooted at the
<a href="#context-object">context object</a> matching only
<a href="#concept-tree-child" title="concept-tree-child">children</a>.

<p>The <dfn id="dom-node-firstchild" title="dom-Node-firstChild"><code>firstChild</code></dfn>
attribute must return the
<a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a>.

<p>The <dfn id="dom-node-lastchild" title="dom-Node-lastChild"><code>lastChild</code></dfn> attribute must return the <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a>.

<p>The
<dfn id="dom-node-previoussibling" title="dom-Node-previousSibling"><code>previousSibling</code></dfn>
attribute must return the
<a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>.
<!-- AttrExodus
 <li><p>If the <span>context object</span> is an <code>Attr</code> node,
 return null.
-->

<p>The <dfn id="dom-node-nextsibling" title="dom-Node-nextSibling"><code>nextSibling</code></dfn>
attribute must return the
<a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.
<!-- AttrExodus
 <li><p>If the <span>context object</span> is an <code>Attr</code> node,
 return null.
-->

</div>

<hr>

<!-- TODO: domintro -->

<p>The <dfn id="dom-node-nodevalue" title="dom-Node-nodeValue"><code>nodeValue</code></dfn> attribute
must return the following, depending on the <a href="#context-object">context object</a>:

<dl class="switch">
 <!--AttrExodus <dt><code>Attr</code> -->
 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dd><p>The <a href="#context-object">context object</a>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a>.

 <dt>Any other node
 <dd><p>Null.
</dl>

<p>The <code title="dom-Node-nodeValue"><a href="#dom-node-nodevalue">nodeValue</a></code> attribute must,
on setting, if the new value is null, act as if it was the empty string
instead, and then do as described below, depending on the <a href="#context-object">context object</a>:

<dl class="switch">
 <!--AttrExodus <dt><code>Attr</code> -->
 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dd><p><a href="#concept-cd-replace" title="concept-CD-replace">Replace data</a> with node
 <a href="#context-object">context object</a>, offset 0, count
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value, and
 data new value.

 <dt>Any other node
 <dd><p>Do nothing.
</dl>

<p>The <dfn id="dom-node-textcontent" title="dom-Node-textContent"><code>textContent</code></dfn>
attribute must return the following, depending on the
<a href="#context-object">context object</a>:

<dl class="switch">
 <dt><code><a href="#documentfragment">DocumentFragment</a></code>
 <dt><code><a href="#element">Element</a></code>
 <!--AttrExodus <dt><code>Attr</code> -->
 <dd><p>The concatenation of <a href="#concept-cd-data" title="concept-CD-data">data</a> of all
 the <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a> of the
 <a href="#context-object">context object</a>, in
 <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dd><p>The <a href="#context-object">context object</a>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a>.

 <dt>Any other node
 <dd><p>Null.
</dl>

<p>The <code title="dom-Node-textContent"><a href="#dom-node-textcontent">textContent</a></code> attribute must,
on setting, if the new value is null, act as if it was the empty string
instead, and then do as described below, depending on the <a href="#context-object">context object</a>:

<dl class="switch">
 <dt><code><a href="#documentfragment">DocumentFragment</a></code>
 <dt><code><a href="#element">Element</a></code>
 <!--AttrExodus <dt><code>Attr</code> -->
 <dd>
  <ol>
   <li><p>Let <var>node</var> be null.

   <li><p>If new value is not the empty string, set <var>node</var> to
   a new <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a> whose
   <a href="#concept-cd-data" title="concept-CD-data">data</a> is new value.

   <li><p><a href="#concept-node-replace-all" title="concept-node-replace-all">Replace all</a> with
   <var>node</var> within the <a href="#context-object">context object</a>.
  </ol>

 <dt><code><a href="#text">Text</a></code>
 <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <dt><code><a href="#comment">Comment</a></code>
 <dd><p><a href="#concept-cd-replace" title="concept-CD-replace">Replace data</a> with node
 <a href="#context-object">context object</a>, offset 0, count
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value, and
 data new value.

 <dt>Any other node
 <dd><p>Do nothing.
</dl>

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-node-normalize" title="dom-Node-normalize">normalize</a>()</code>
 <dd><p>Removes <a href="#concept-node-empty" title="concept-node-empty">empty</a>
 <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">nodes</a> and concatenates
 the <a href="#concept-cd-data" title="concept-CD-data">data</a> of remaining
 <a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a> into the first of their
 <a href="#concept-node" title="concept-node">nodes</a>.
</dl>

<p>The <dfn id="dom-node-normalize" title="dom-Node-normalize"><code>normalize()</code></dfn> method
must run these steps:</p>

<p>For each <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
<a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a> of the
<a href="#context-object">context object</a>:

<ol>
 <li><p>Let <var>node</var> be the <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a>
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>.

 <li><p>Let <var>length</var> be <var>node</var>'s
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value.

 <li><p>If <var>length</var> is zero,
 <a href="#concept-node-remove" title="concept-node-remove">remove</a> <var>node</var> and
 continue with the next <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a>, if any.

 <li><p>Let <var>data</var> be the concatenation of the
 <a href="#concept-cd-data" title="concept-CD-data">data</a> of <var>node</var>'s
 <a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a> (excluding itself), in
 <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

 <li><p><a href="#concept-cd-replace" title="concept-CD-replace">Replace data</a> with node
 <var>node</var>, offset <var>length</var>,
 count 0, and data <var>data</var>.

 <li><p>Let <var>current node</var> be <var>node</var>'s
 <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.

 <li><p>While <var>current node</var> is a <code><a href="#text">Text</a></code> node:

 <ol>
  <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
  <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
  <var>current node</var>, add <var>length</var> to its
  <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> and set its
  <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> to
  <var>node</var>.

  <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
  <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
  <var>current node</var>, add <var>length</var> to its
  <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> and set its
  <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> to
  <var>node</var>.

  <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
  <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
  <var>current node</var>'s
  <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> and
  <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is
  <var>current node</var>'s
  <a href="#concept-tree-index" title="concept-tree-index">index</a>, set its
  <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> to
  <var>node</var> and its
  <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> to
  <var>length</var>.

  <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
  <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
  <var>current node</var>'s
  <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> and
  <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is
  <var>current node</var>'s
  <a href="#concept-tree-index" title="concept-tree-index">index</a>, set its
  <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> to
  <var>node</var> and its
  <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> to
  <var>length</var>.

  <li><p>Add <var>current node</var>'s
  <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value to
  <var>length</var>.

  <li><p>Set <var>current node</var> to its
  <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.
 </ol>

 <li><p><a href="#concept-node-remove" title="concept-node-remove">Remove</a>
 <var>node</var>'s
 <a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a> (excluding itself), in
 <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.
</ol>

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-node-clonenode" title="dom-Node-cloneNode">cloneNode</a>([<var>deep</var> = false])</code>
 <dd><p>Returns a copy of <var>node</var>. If
 <var>deep</var> is true, the copy also includes the
 <var>node</var>'s <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a>.

 <dt><code><var>node</var> . <a href="#dom-node-isequalnode" title="dom-Node-isEqualNode">isEqualNode</a>(<var>other</var>)</code>
 <dd><p>Returns whether <var>node</var> and <var>other</var>
 have the same properties.
</dl>

<div class="impl">

<p><a href="#other-applicable-specifications" title="Other applicable specifications">Specifications</a> may define
<dfn id="concept-node-clone-ext" title="concept-node-clone-ext">cloning steps</dfn> for all or some
<a href="#concept-node" title="concept-node">nodes</a>. The algorithm is passed <var>copy</var>,
<var>node</var>, <var>document</var>, and optionally a
<i>clone children flag</i>, as indicated in the
<a href="#concept-node-clone" title="concept-node-clone">clone</a> algorithm.

<p class="note no-backref">Note: HTML defines
<a href="#concept-node-clone-ext" title="concept-node-clone-ext">cloning steps</a> for
<code class="external" data-anolis-spec="html"><a href="http://www.w3.org/TR/html5/scripting-1.html#the-script-element">script</a></code> and
<code class="external" data-anolis-spec="html"><a href="http://www.w3.org/TR/html5/forms.html#the-input-element">input</a></code> elements. SVG ought to do the same
for its <code>script</code> elements, but does not call this out at
the moment.

<p>To <dfn id="concept-node-clone" title="concept-node-clone">clone</dfn> a <var>node</var>,
optionally with a <var>document</var> and a <i>clone children flag</i>, run
these steps:
<!-- This algorithm is used by dom-Node-cloneNode, dom-Document-importNode,
dom-Range-extractContents, dom-Range-cloneContents -->

<ol>
 <li><p>If <var>document</var> is not given, let <var>document</var> be
 <var>node</var>'s <a href="#concept-node-document" title="concept-node-document">node document</a>.

 <li><p>Let <var>copy</var> be a <a href="#concept-node" title="concept-node">node</a>
 that implements the same interfaces as <var>node</var>.

 <li>
  <p>If <var>copy</var> is a
  <a href="#concept-document" title="concept-document">document</a>, set its
  <a href="#concept-node-document" title="concept-node-document">node document</a> and
  <var>document</var> to <var>copy</var>.
  <p>Otherwise, set <var>copy</var>'s
  <a href="#concept-node-document" title="concept-node-document">node document</a> to
  <var>document</var>.

 <li>
  <p>Copy the following from <var>node</var> to <var>copy</var>, depending on
  the type of <var>node</var>:
  <dl class="switch">
   <dt><code><a href="#document">Document</a></code>
   <dd><p>Its <a href="#concept-document-encoding" title="concept-document-encoding">encoding</a>,
   <a href="#concept-document-content-type" title="concept-document-content-type">content type</a>,
   <a href="#concept-document-url" title="concept-document-url">URL</a>, its mode
   (<a href="#concept-document-quirks" title="concept-document-quirks">quirks mode</a>,
   <a href="#concept-document-limited-quirks" title="concept-document-limited-quirks">limited quirks mode</a>, or
   <a href="#concept-document-no-quirks" title="concept-document-no-quirks">no-quirks mode</a>), and its type
   (<a href="#xml-document">XML document</a> or <a href="#html-document">HTML document</a>).

   <dt><code><a href="#documenttype">DocumentType</a></code>
   <dd><p>Its <a href="#concept-doctype-name" title="concept-doctype-name">name</a>,
   <a href="#concept-doctype-publicid" title="concept-doctype-publicid">public ID</a>, and
   <a href="#concept-doctype-systemid" title="concept-doctype-systemid">system ID</a>.

   <dt><code><a href="#element">Element</a></code>
   <dd><p>Its <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>,
   <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>,
   <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>, and its
   <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.

   <!--AttrExodus
   <dt><code>Attr</code>
   <dd><p><code title=dom-Attr-value>value</code>
   -->

   <dt><code><a href="#text">Text</a></code>
   <dt><code><a href="#comment">Comment</a></code>
   <dd><p>Its <a href="#concept-cd-data" title="concept-CD-data">data</a>.

   <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
   <dd><p>Its <a href="#concept-pi-target" title="concept-PI-target">target</a> and
   <a href="#concept-cd-data" title="concept-CD-data">data</a>.

   <dt>Any other node
   <dd><p>—
  </dl>

 <li><p>Run any <a href="#concept-node-clone-ext" title="concept-node-clone-ext">cloning steps</a>
 defined for <var>node</var> in <a href="#other-applicable-specifications">other applicable specifications</a> and
 pass <var>copy</var>, <var>node</var>, <var>document</var> and the
 <i>clone children flag</i> if set, as parameters.

 <li><p>If the <i>clone children flag</i> is set,
 <a href="#concept-node-clone" title="concept-node-clone">clone</a> all the
 <a href="#concept-tree-child" title="concept-tree-child">children</a> of <var>node</var> and
 append them to <var>copy</var>, with <var>document</var>
 as specified and the <i>clone children flag</i> being set.

 <li><p>Return <var>copy</var>.
</ol>

<p>The
<dfn id="dom-node-clonenode" title="dom-Node-cloneNode"><code>cloneNode(<var>deep</var>)</code></dfn>
method must return a <a href="#concept-node-clone" title="concept-node-clone">clone</a> of the
<a href="#context-object">context object</a>, with the <i>clone children flag</i> set
if <var>deep</var> is true.

<p>A <a href="#concept-node" title="concept-node">node</a> <var>A</var>
<dfn id="concept-node-equals" title="concept-node-equals">equals</dfn> a <a href="#concept-node" title="concept-node">node</a>
<var>B</var> if all of the following conditions are true:

<ul>
 <li><p><var>A</var> and <var>B</var>'s
 <code title="dom-Node-nodeType"><a href="#dom-node-nodetype">nodeType</a></code> attribute value is identical.
 <li>
  <p>The following are also equal, depending on <var>A</var>:
  <dl class="switch">
   <dt><code><a href="#documenttype">DocumentType</a></code>
   <dd><p>Its <a href="#concept-doctype-name" title="concept-doctype-name">name</a>,
   <a href="#concept-doctype-publicid" title="concept-doctype-publicid">public ID</a>, and
   <a href="#concept-doctype-systemid" title="concept-doctype-systemid">system ID</a>.

   <dt><code><a href="#element">Element</a></code>
   <dd>
    <p>Its <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>,
    <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>,
    <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>, and its
    number of <a href="#concept-attribute" title="concept-attribute">attributes</a> in its
    <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.

   <!--AttrExodus
   <dt><code>Attr</code>
   <dd><p><code title=dom-Attr-value>value</code>
   -->

   <dt><code><a href="#processinginstruction">ProcessingInstruction</a></code>
   <dd><p>Its <a href="#concept-pi-target" title="concept-PI-target">target</a> and
   <a href="#concept-cd-data" title="concept-CD-data">data</a>.

   <dt><code><a href="#text">Text</a></code>
   <dt><code><a href="#comment">Comment</a></code>
   <dd><p>Its <a href="#concept-cd-data" title="concept-CD-data">data</a>.

   <dt>Any other node
   <dd><p>—
  </dl>
 <li><p>If <var>A</var> is an <a href="#concept-element" title="concept-element">element</a>, each
 <a href="#concept-attribute" title="concept-attribute">attribute</a> in its
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a> has an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> with the same
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>,
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>, and
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> in <var>B</var>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.
 <li><p><var>A</var> and <var>B</var> have the same number of
 <a href="#concept-tree-child" title="concept-tree-child">children</a>.
 <li><p>Each <a href="#concept-tree-child" title="concept-tree-child">child</a> of <var>A</var>
 <a href="#concept-node-equals" title="concept-node-equals">equals</a> the
 <a href="#concept-tree-child" title="concept-tree-child">child</a> of <var>B</var> at the identical
 <a href="#concept-tree-index" title="concept-tree-index">index</a>.
</ul>

<p>The
<dfn id="dom-node-isequalnode" title="dom-Node-isEqualNode"><code>isEqualNode(<var>node</var>)</code></dfn>
method must return true if <var>node</var> is not null and
<a href="#context-object">context object</a> <a href="#concept-node-equals" title="concept-node-equals">equals</a>
<var>node</var>, and false otherwise.

</div>

<hr>

<dl class="domintro">
 <dt><code><var>node</var> . <a href="#dom-node-comparedocumentposition" title="dom-Node-compareDocumentPosition">compareDocumentPosition</a>(<var>other</var>)</code>
 <dd>
  <p>Returns a bitmask indicating the position of <var>other</var>
  relative to <var>node</var>. These are the bits that can be set:

  <dl>
   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_position_disconnected" title="dom-Node-DOCUMENT_POSITION_DISCONNECTED">DOCUMENT_POSITION_DISCONNECTED</a></code> (1)
   <dd>Set when <var>node</var> and <var>other</var> are not in the
   same <a href="#concept-tree" title="concept-tree">tree</a>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_position_preceding" title="dom-Node-DOCUMENT_POSITION_PRECEDING">DOCUMENT_POSITION_PRECEDING</a></code> (2)
   <dd>Set when <var>other</var> is
   <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a>
   <var>node</var>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_position_following" title="dom-Node-DOCUMENT_POSITION_FOLLOWING">DOCUMENT_POSITION_FOLLOWING</a></code> (4)
   <dd>Set when <var>other</var> is
   <a href="#concept-tree-following" title="concept-tree-following">following</a>
   <var>node</var>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_position_contains" title="dom-Node-DOCUMENT_POSITION_CONTAINS">DOCUMENT_POSITION_CONTAINS</a></code> (8)
   <dd>Set when <var>other</var> is an
   <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestor</a> of
   <var>node</var>.

   <dt><code><a href="#node">Node</a> . <a href="#dom-node-document_position_contained_by" title="dom-Node-DOCUMENT_POSITION_CONTAINED_BY">DOCUMENT_POSITION_CONTAINED_BY</a></code> (16, 10 in hexadecimal)
   <dd>Set when <var>other</var> is a
   <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a> of
   <var>node</var>.
  </dl>

 <dt><code><var>node</var> . <a href="#dom-node-contains" title="dom-Node-contains">contains</a>(<var>other</var>)</code>
 <dd><p>Returns true if <var>other</var> is an
 <a href="#concept-tree-inclusive-descendant" title="concept-tree-inclusive-descendant">inclusive descendant</a>
 of <var>node</var>, and false otherwise.
</dl>

<p>These are the constants
<code title="dom-Node-compareDocumentPosition"><a href="#dom-node-comparedocumentposition">compareDocumentPosition()</a></code>
returns as mask:

<ul class="brief">
 <li><dfn id="dom-node-document_position_disconnected" title="dom-Node-DOCUMENT_POSITION_DISCONNECTED"><code>DOCUMENT_POSITION_DISCONNECTED</code></dfn> (1);
 <li><dfn id="dom-node-document_position_preceding" title="dom-Node-DOCUMENT_POSITION_PRECEDING"><code>DOCUMENT_POSITION_PRECEDING</code></dfn> (2);
 <li><dfn id="dom-node-document_position_following" title="dom-Node-DOCUMENT_POSITION_FOLLOWING"><code>DOCUMENT_POSITION_FOLLOWING</code></dfn> (4);
 <li><dfn id="dom-node-document_position_contains" title="dom-Node-DOCUMENT_POSITION_CONTAINS"><code>DOCUMENT_POSITION_CONTAINS</code></dfn> (8);
 <li><dfn id="dom-node-document_position_contained_by" title="dom-Node-DOCUMENT_POSITION_CONTAINED_BY"><code>DOCUMENT_POSITION_CONTAINED_BY</code></dfn> (16, 10 in hexadecimal);
 <li><dfn id="dom-node-document_position_implementation_specific" title="dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"><code>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code></dfn> (32, 20 in hexadecimal).
</ul>

<p>The <dfn id="dom-node-comparedocumentposition" title="dom-Node-compareDocumentPosition"><code>compareDocumentPosition(<var>other</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>reference</var> be the <a href="#context-object">context object</a>.
 <li><p>If <var>other</var> and <var>reference</var> are the
 same object, return zero.

 <li>
  <p>If <var>other</var> and <var>reference</var> are not
  in the same <a href="#concept-tree" title="concept-tree">tree</a>, return the result of
  adding
  <code title="dom-Node-DOCUMENT_POSITION_DISCONNECTED"><a href="#dom-node-document_position_disconnected">DOCUMENT_POSITION_DISCONNECTED</a></code>,
  <code title="dom-Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"><a href="#dom-node-document_position_implementation_specific">DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</a></code>,
  and either
  <code title="dom-Node-DOCUMENT_POSITION_PRECEDING"><a href="#dom-node-document_position_preceding">DOCUMENT_POSITION_PRECEDING</a></code> or
  <code title="dom-Node-DOCUMENT_POSITION_FOLLOWING"><a href="#dom-node-document_position_following">DOCUMENT_POSITION_FOLLOWING</a></code>,
  with the constraint that this is to be consistent, together.

  <p class="note">Note: Whether to return
  <code title="dom-Node-DOCUMENT_POSITION_PRECEDING"><a href="#dom-node-document_position_preceding">DOCUMENT_POSITION_PRECEDING</a></code> or
  <code title="dom-Node-DOCUMENT_POSITION_FOLLOWING"><a href="#dom-node-document_position_following">DOCUMENT_POSITION_FOLLOWING</a></code>
  is typically implemented via pointer comparison. In JavaScript
  implementations <code>Math.random()</code> can be used.

 <li><p>If <var>other</var> is an
 <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestor</a> of
 <var>reference</var>, return the result of adding
 <code title="dom-Node-DOCUMENT_POSITION_CONTAINS"><a href="#dom-node-document_position_contains">DOCUMENT_POSITION_CONTAINS</a></code>
 to
 <code title="dom-Node-DOCUMENT_POSITION_PRECEDING"><a href="#dom-node-document_position_preceding">DOCUMENT_POSITION_PRECEDING</a></code>.

 <li><p>If <var>other</var> is a
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a> of
 <var>reference</var>, return the result of adding
 <code title="dom-Node-DOCUMENT_POSITION_CONTAINED_BY"><a href="#dom-node-document_position_contained_by">DOCUMENT_POSITION_CONTAINED_BY</a></code>
 to
 <code title="dom-Node-DOCUMENT_POSITION_FOLLOWING"><a href="#dom-node-document_position_following">DOCUMENT_POSITION_FOLLOWING</a></code>.

 <li><p>If <var>other</var> is
 <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a>
 <var>reference</var> return
 <code title="dom-Node-DOCUMENT_POSITION_PRECEDING"><a href="#dom-node-document_position_preceding">DOCUMENT_POSITION_PRECEDING</a></code>.

 <li><p>Return
 <code title="dom-Node-DOCUMENT_POSITION_FOLLOWING"><a href="#dom-node-document_position_following">DOCUMENT_POSITION_FOLLOWING</a></code>.
</ol>

<!-- AttrExodus compareDocumentPosition() works differently if Attr inherits
     from Node -->

<p>The
<dfn id="dom-node-contains" title="dom-Node-contains"><code>contains(<var>other</var>)</code></dfn>
method must return true if <var>other</var> is an
<a href="#concept-tree-inclusive-descendant" title="concept-tree-inclusive-descendant">inclusive descendant</a> of
the <a href="#context-object">context object</a>, and false otherwise (including when
<var>other</var> is null).

<hr>

<!-- TODO: domintro -->

<!--
 XXX apparently these algorithms might not be quite correct
 https://bugzilla.mozilla.org/show_bug.cgi?id=312019
 https://bugzilla.mozilla.org/show_bug.cgi?id=505178
-->

<p>To <dfn id="locate-a-namespace-prefix">locate a namespace prefix</dfn> for an <var>element</var> using
<var>namespace</var> run these steps:

<ol>
 <li><p>If <var>element</var>'s
 <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
 <var>namespace</var> and its
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> is not
 null, return its
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>.

 <li><p>If, <var>element</var>
 <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
 <a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a> is
 "<code>xmlns</code>" and
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> is
 <var>namespace</var>, then return <var>element</var>'s first
 such <a href="#concept-attribute" title="concept-attribute">attribute</a>'s
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>.

 <li><p>If <var>element</var>'s <a href="#parent-element">parent element</a> is not null,
 return the result of running <a href="#locate-a-namespace-prefix">locate a namespace prefix</a> on that
 <a href="#concept-element" title="concept-element">element</a> using <var>namespace</var>.
 Otherwise, return null.
</ol>

<p>To <dfn id="locate-a-namespace">locate a namespace</dfn> for a <var>node</var> using
<var>prefix</var> depends on <var>node</var>:

<dl class="switch">
 <dt><code><a href="#element">Element</a></code>
 <dd>
  <ol>
   <li><p>If its <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
   not null and its
   <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> is
   <var>prefix</var>, return
   <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>.

   <li>
    <p>If it <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
    <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
    <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is the
    <a href="#xmlns-namespace">XMLNS namespace</a>,
    <a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a>
    is "<code>xmlns</code>" and
    <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
    <var>prefix</var>, or if <var>prefix</var> is null and it
    <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
    <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
    <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is the
    <a href="#xmlns-namespace">XMLNS namespace</a>,
    <a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a>
    is null and <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>
    is "<code>xmlns</code>":

    <ol>
     <li><p>Let <var>value</var> be its
     <a href="#concept-attribute-value" title="concept-attribute-value">value</a> if it is not the empty
     string, and null otherwise.

     <li><p>Return <var>value</var>.
    </ol>

   <li><p>If its <a href="#parent-element">parent element</a> is null, return null.

   <li><p>Return the result of running <a href="#locate-a-namespace">locate a namespace</a> on
   its <a href="#parent-element">parent element</a> using <var>prefix</var>.
  </ol>

 <!--AttrExodus <code>Attr</code> -->
 <dt><code><a href="#document">Document</a></code>
 <dd>
  <ol>
   <li><p>If its <a href="#document-element">document element</a> is null, return null.

   <li><p>Return the result of running <a href="#locate-a-namespace">locate a namespace</a> on
   its <a href="#document-element">document element</a> using <var>prefix</var>.
  </ol>

 <dt><code><a href="#documenttype">DocumentType</a></code>
 <dt><code><a href="#documentfragment">DocumentFragment</a></code>
 <dd><p>Return null.

 <dt>Any other node
 <dd>
  <ol>
   <li><p>If its <a href="#parent-element">parent element</a> is null, return null.

   <li><p>Return the result of running <a href="#locate-a-namespace">locate a namespace</a> on
   its <a href="#parent-element">parent element</a> using <var>prefix</var>.
  </ol>
</dl>

<p>The
<dfn id="dom-node-lookupprefix" title="dom-Node-lookupPrefix"><code>lookupPrefix(<var>namespace</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>namespace</var> is null or the empty string, return null.

 <li>
  <p>Otherwise it depends on the <a href="#context-object">context object</a>:

  <dl class="switch">
   <dt><code><a href="#element">Element</a></code>
   <dd><p>Return the result of
   <a href="#locate-a-namespace-prefix" title="locate a namespace prefix">locating a namespace prefix</a>
   for the node using <var>namespace</var>.

   <!--AttrExodus <code>Attr</code> -->
   <dt><code><a href="#document">Document</a></code>
   <dd><p>Return the result of
   <a href="#locate-a-namespace-prefix" title="locate a namespace prefix">locating a namespace prefix</a>
   for its <a href="#document-element">document element</a>, if that is not null, and null
   otherwise.

   <dt><code><a href="#documenttype">DocumentType</a></code>
   <dt><code><a href="#documentfragment">DocumentFragment</a></code>
   <dd><p>Return null.

   <dt>Any other node
   <dd><p>Return the result of
   <a href="#locate-a-namespace-prefix" title="locate a namespace prefix">locating a namespace prefix</a>
   for its <a href="#parent-element">parent element</a>, or if that is null, null.
  </dl>
</ol>

<p>The
<dfn id="dom-node-lookupnamespaceuri" title="dom-Node-lookupNamespaceURI"><code>lookupNamespaceURI(<var>prefix</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>prefix</var> is the empty string, set it to null.

 <li><p>Return the result of running <a href="#locate-a-namespace">locate a namespace</a> for the
 <a href="#context-object">context object</a> using <var>prefix</var>.
</ol>

<p>The
<dfn id="dom-node-isdefaultnamespace" title="dom-Node-isDefaultNamespace"><code>isDefaultNamespace(<var>namespace</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>namespace</var> is the empty string, set it to null.

 <li><p>Let <var>defaultNamespace</var> be the result of running
 <a href="#locate-a-namespace">locate a namespace</a> for the <a href="#context-object">context object</a> using
 null.

 <li><p>Return true if <var>defaultNamespace</var> is the same as
 <var>namespace</var>, and false otherwise.
</ol>

<hr>

<p>The
<dfn id="dom-node-insertbefore" title="dom-Node-insertBefore"><code>insertBefore(<var>node</var>, <var>child</var>)</code></dfn>
method must return the result of
<a href="#concept-node-pre-insert" title="concept-node-pre-insert">pre-inserting</a>
<var>node</var> into the <a href="#context-object">context object</a> before
<var>child</var>.

<p>The
<dfn id="dom-node-appendchild" title="dom-Node-appendChild"><code>appendChild(<var>node</var>)</code></dfn>
method must return the result of
<a href="#concept-node-append" title="concept-node-append">appending</a> <var>node</var> to
the <a href="#context-object">context object</a>.

<p>The
<dfn id="dom-node-replacechild" title="dom-Node-replaceChild"><code>replaceChild(<var>node</var>, <var>child</var>)</code></dfn>
method must return the result of
<a href="#concept-node-replace" title="concept-node-replace">replacing</a> <var>child</var>
with <var>node</var> within the <a href="#context-object">context object</a>.

<p>The
<dfn id="dom-node-removechild" title="dom-Node-removeChild"><code>removeChild(<var>child</var>)</code></dfn>
method must return the result of
<a href="#concept-node-pre-remove" title="concept-node-pre-remove">pre-removing</a>
<var>child</var> from the <a href="#context-object">context object</a>.

<hr><!-- Collections -->

<p>The
<dfn id="concept-getelementsbytagname" title="concept-getElementsByTagName">list of elements with local name <var>localName</var></dfn>
for a <a href="#concept-node" title="concept-node">node</a> <var>root</var> is the
<code><a href="#htmlcollection">HTMLCollection</a></code> returned by the following algorithm:
<ol>
 <li><p>If <var>localName</var> is "<code>*</code>" (U+002A),
 return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at <var>root</var>,
 whose filter matches only <a href="#concept-element" title="concept-element">elements</a>.

 <li>
  <p>Otherwise, if <var>root</var>'s
  <a href="#concept-node-document" title="concept-node-document">node document</a> is an
  <a href="#html-document">HTML document</a>, return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
  <var>root</var>, whose filter matches the following
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a>:

  <ul>
   <li>Whose <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is the
   <a href="#html-namespace">HTML namespace</a> and whose
   <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
   <var>localName</var> <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.

   <li>Whose <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
   <em>not</em> the <a href="#html-namespace">HTML namespace</a> and whose
   <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
   <var>localName</var>.
  </ul>

 <li><p>Otherwise, return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
 <var>root</var>, whose filter matches
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
 <a href="#concept-element" title="concept-element">elements</a> whose
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
 <var>localName</var>.
</ol>

<p>When invoked with the same argument, the same <code><a href="#htmlcollection">HTMLCollection</a></code>
object may be returned as returned by an earlier call.


<p>The
<dfn id="concept-getelementsbytagnamens" title="concept-getElementsByTagNameNS">list of elements with namespace
<var>namespace</var> and local name <var>localName</var></dfn>
for a <a href="#concept-node" title="concept-node">node</a> <var>root</var> is the
<code><a href="#htmlcollection">HTMLCollection</a></code> returned by the following algorithm:

<ol>
 <li><p>If <var>namespace</var> is the empty string, set it to null.

 <li><p>If both <var>namespace</var> and <var>localName</var>
 are "<code>*</code>" (U+002A), return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
 <var>root</var>, whose filter matches
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
 <a href="#concept-element" title="concept-element">elements</a>.

 <li><p>Otherwise, if <var>namespace</var> is "<code>*</code>"
 (U+002A), return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
 <var>root</var>, whose filter matches
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
 <a href="#concept-element" title="concept-element">elements</a> whose
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
 <var>localName</var>.

 <li><p>Otherwise, if <var>localName</var> is "<code>*</code>"
 (U+002A), return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
 <var>root</var>, whose filter matches
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
 <a href="#concept-element" title="concept-element">elements</a> whose
 <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
 <var>namespace</var>.

 <li><p>Otherwise, return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at
 <var>root</var>, whose filter matches
 <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
 <a href="#concept-element" title="concept-element">elements</a> whose
 <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
 <var>namespace</var> and
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
 <var>localName</var>.
</ol>

<p>When invoked with the same arguments, the same <code><a href="#htmlcollection">HTMLCollection</a></code>
object may be returned as returned by an earlier call.


<p>The
<dfn id="concept-getelementsbyclassname" title="concept-getElementsByClassName">list of elements with class names <var>classNames</var></dfn>
for a <a href="#concept-node" title="concept-node">node</a> <var>root</var> is the
<code><a href="#htmlcollection">HTMLCollection</a></code> returned by the following algorithm:
<ol>
 <li>
  <p>Let <var>classes</var> be the result of running the
  <a href="#concept-ordered-set-parser" title="concept-ordered-set-parser">ordered set parser</a> on
  <var>classNames</var>.

 <li>
  <p>If <var>classes</var> is the empty set, return an empty
  <code><a href="#htmlcollection">HTMLCollection</a></code>.

 <li>
  <p>Return a <code><a href="#htmlcollection">HTMLCollection</a></code> rooted at <var>root</var>,
  whose filter matches <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a> that have all their
  <a href="#concept-class" title="concept-class">classes</a> in <var>classes</var>.

  <p>The comparisons for the <a href="#concept-class" title="concept-class">classes</a> must be done
  in an <a href="#ascii-case-insensitive">ASCII case-insensitive</a> manner if <var>root</var>'s
  <a href="#concept-node-document" title="concept-node-document">node document</a> is in
  <a href="#concept-document-quirks" title="concept-document-quirks">quirks mode</a>, and in a
  <a href="#case-sensitive">case-sensitive</a> manner otherwise.
</ol>

<p>When invoked with the same argument, the same <code><a href="#htmlcollection">HTMLCollection</a></code>
object may be returned as returned by an earlier call.

<h3 id="nodes-interface-document">Interface <code><a href="#document">Document</a></code></h3>

<pre class='idl'>
[Constructor,
 Exposed=Window]
interface Document : Node {
  [SameObject] readonly attribute DOMImplementation implementation;
  readonly attribute DOMString URL;
  readonly attribute DOMString documentURI;
  readonly attribute DOMString origin;
  readonly attribute DOMString compatMode;
  readonly attribute DOMString characterSet;
  readonly attribute DOMString contentType;

  readonly attribute DocumentType? doctype;
  readonly attribute Element? documentElement;
  HTMLCollection getElementsByTagName(DOMString localName);
  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);
  HTMLCollection getElementsByClassName(DOMString classNames);

  [NewObject] Element createElement(DOMString localName);
  [NewObject] Element createElementNS(DOMString? namespace, DOMString qualifiedName);
  [NewObject] DocumentFragment createDocumentFragment();
  [NewObject] Text createTextNode(DOMString data);
  [NewObject] Comment createComment(DOMString data);
  [NewObject] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);

  [NewObject] Node importNode(Node node, optional boolean deep = false);
  Node adoptNode(Node node);

  [NewObject] Event createEvent(DOMString interface);

  [NewObject] Range createRange();

  // NodeFilter.SHOW_ALL = 0xFFFFFFFF
  [NewObject] NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);
  [NewObject] TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);
};

[Exposed=Window]
interface XMLDocument : Document {};
</pre>

<p><code><a href="#document">Document</a></code> <a href="#concept-node" title="concept-node">nodes</a> are simply
known as <dfn id="concept-document" title="concept-document">documents</dfn>.

<p>Each <a href="#concept-document" title="concept-document">document</a> has an associated
<dfn id="concept-document-encoding" title="concept-document-encoding">encoding</dfn>,
<dfn id="concept-document-content-type" title="concept-document-content-type">content type</dfn>, and
<dfn id="concept-document-url" title="concept-document-url">URL</dfn>. [[!ENCODING]] [[!URL]

<p>Unless stated otherwise, a <a href="#concept-document" title="concept-document">document</a>'s
<a href="#concept-document-encoding" title="concept-document-encoding">encoding</a> is the
<code class="external" data-anolis-spec="encoding"><a href="http://www.w3.org/TR/encoding/#utf-8">utf-8</a></code>
<a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#encoding">encoding</a>, its
<a href="#concept-document-content-type" title="concept-document-content-type">content type</a> is
"<code>application/xml</code>", and its
<a href="#concept-document-url" title="concept-document-url">URL</a> is
"<code>about:blank</code>".

<p>Unless stated otherwise, a <a href="#concept-document" title="concept-document">document</a>'s
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> is a globally unique identifier
and its <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> is an
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> of that
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a>.
[[!HTML5]

<p>A <a href="#concept-document" title="concept-document">document</a> is assumed to be an
<dfn id="xml-document">XML document</dfn> unless it is flagged as being an
<dfn id="html-document">HTML document</dfn>. Whether a
<a href="#concept-document" title="concept-document">document</a> is an
<a href="#html-document">HTML document</a> or an <a href="#xml-document">XML document</a> affects the
behavior of certain APIs.

<p>A <a href="#concept-document" title="concept-document">document</a> is always set to one of
three modes: <dfn id="concept-document-no-quirks" title="concept-document-no-quirks">no-quirks mode</dfn>, the
default; <dfn id="concept-document-quirks" title="concept-document-quirks">quirks mode</dfn>, used
typically for legacy documents; and
<dfn id="concept-document-limited-quirks" title="concept-document-limited-quirks">limited-quirks mode</dfn>. Unless stated
otherwise, a <a href="#concept-document" title="concept-document">document</a> must be in
<a href="#concept-document-no-quirks" title="concept-document-no-quirks">no-quirks mode</a>.

<p class="note">Note: The mode is only ever changed from the default if the
<a href="#concept-document" title="concept-document">document</a> is created by the
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/syntax.html#html-parser">HTML parser</a>, based on the presence,
absence, or value of the DOCTYPE string.
[[!HTML5]

<p class="note">Note: <a href="#concept-document-no-quirks" title="concept-document-no-quirks">No-quirks mode</a>
was originally known as "standards mode" and
<a href="#concept-document-limited-quirks" title="concept-document-limited-quirks">limited-quirks mode</a> was
once known as "almost standards mode". They have been renamed because their
details are now defined by standards. (And because Ian Hickson vetoed their
original names on the basis that they are nonsensical.)

<hr>

<dl class="domintro">
 <dt><code><var>document</var> = new <a href="#dom-document" title="dom-Document">Document</a>()</code>
 <dd><p>Returns a new <a href="#concept-document" title="concept-document">document</a>.

 <dt><code><var>document</var> . <a href="#dom-document-implementation" title="dom-Document-implementation">implementation</a></code>
 <dd><p>Returns <var>document</var>'s <code><a href="#domimplementation">DOMImplementation</a></code> object.

 <dt><code><var>document</var> . <a href="#dom-document-url" title="dom-Document-URL">URL</a></code>
 <dt><code><var>document</var> . <a href="#dom-document-documenturi" title="dom-Document-documentURI">documentURI</a></code>
 <dd><p>Returns <var>document</var>'s <a href="#concept-document-url" title="concept-document-url">URL</a>.

 <dt><code><var>document</var> . <a href="#dom-document-origin" title="dom-Document-origin">origin</a></code>
 <dd><p>Returns <var>document</var>'s <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a>.

 <dt><code><var>document</var> . <a href="#dom-document-compatmode" title="dom-Document-compatMode">compatMode</a></code>
 <dd>
  <p>Returns the string "<code>CSS1Compat</code>" if
  <var>document</var> is in
  <a href="#concept-document-no-quirks" title="concept-document-no-quirks">no-quirks mode</a> or
  <a href="#concept-document-limited-quirks" title="concept-document-limited-quirks">limited-quirks mode</a>, and
  "<code>BackCompat</code>", if <var>document</var> is in
  <a href="#concept-document-quirks" title="concept-document-quirks">quirks mode</a>.

 <dt><code><var>document</var> . <a href="#dom-document-characterset" title="dom-Document-characterSet">characterSet</a></code>
 <dd><p>Returns <var>document</var>'s
 <a href="#concept-document-encoding" title="concept-document-encoding">encoding</a>.

 <dt><code><var>document</var> . <a href="#dom-document-contenttype" title="dom-Document-contentType">contentType</a></code>
 <dd><p>Returns <var>document</var>'s
 <a href="#concept-document-content-type" title="concept-document-content-type">content type</a>.
</dl>

<p>The <dfn id="dom-document" title="dom-Document"><code>Document()</code></dfn> constructor
must return a new <a href="#concept-document" title="concept-document">document</a> whose
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> is an
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> of the global object's associated
<a href="#concept-document" title="concept-document">document</a>, and
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> is an
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> of the
global object's associated <a href="#concept-document" title="concept-document">document</a>.
[[!HTML5]

<p class="note">Note: Unlike
<code title="dom-DOMImplementation-createDocument"><a href="#dom-domimplementation-createdocument">createDocument()</a></code>
this constructor does not return an <code><a href="#xmldocument">XMLDocument</a></code> object, but a
<a href="#concept-document" title="concept-document">document</a> (<code><a href="#document">Document</a></code> object).

<p>The
<dfn id="dom-document-implementation" title="dom-Document-implementation"><code>implementation</code></dfn>
attribute must return the <code><a href="#domimplementation">DOMImplementation</a></code> object that is
associated with the <a href="#concept-document" title="concept-document">document</a>.

<p>The <dfn id="dom-document-url" title="dom-Document-URL"><code>URL</code></dfn> and
<dfn id="dom-document-documenturi" title="dom-Document-documentURI"><code>documentURI</code></dfn>
attributes must return the <a href="#concept-document-url" title="concept-document-url">URL</a>.

<p>The <dfn id="dom-document-origin" title="dom-Document-origin"><code>origin</code></dfn>
attribute must return the
<a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/browsers.html#unicode-serialisation-of-an-origin" title="Unicode serialization of an origin">Unicode serialization</a>
of <a href="#context-object">context object</a>'s <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a>.

<p>The <dfn id="dom-document-compatmode" title="dom-Document-compatMode"><code>compatMode</code></dfn>
attribute must return "<code>BackCompat</code>" if the
<a href="#context-object">context object</a> is in
<a href="#concept-document-quirks" title="concept-document-quirks">quirks mode</a>, and
"<code>CSS1Compat</code>" otherwise.

<p>The <dfn id="dom-document-characterset" title="dom-Document-characterSet"><code>characterSet</code></dfn> attribute's
getter and <dfn id="dom-document-inputencoding" title="dom-Document-inputEncoding"><code>inputEncoding</code></dfn>
attribute's getter must run these steps:

<ol>
 <li><p>Let <var>name</var> be
 <a href="#concept-document-encoding" title="concept-document-encoding">encoding</a>'s
 <a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#name">name</a>.

 <li>
  <p>If <var>name</var> is in the first column in the table below, set
  <var>name</var> to the value of the second column on the same row:

  <!-- The order matches the Encoding Standard -->
  <table>
   <tr>
    <th>Name
    <th>Compatibility name
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#utf-8">utf-8</a>
    <td>"<code>UTF-8</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#ibm866">ibm866</a>
    <td>"<code>IBM866</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-2">iso-8859-2</a>
    <td>"<code>ISO-8859-2</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-3">iso-8859-3</a>
    <td>"<code>ISO-8859-3</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-4">iso-8859-4</a>
    <td>"<code>ISO-8859-4</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-5">iso-8859-5</a>
    <td>"<code>ISO-8859-5</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-6">iso-8859-6</a>
    <td>"<code>ISO-8859-6</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-7">iso-8859-7</a>
    <td>"<code>ISO-8859-7</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-8">iso-8859-8</a>
    <td>"<code>ISO-8859-8</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-8-i">iso-8859-8-i</a>
    <td>"<code>ISO-8859-8-I</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-10">iso-8859-10</a>
    <td>"<code>ISO-8859-10</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-13">iso-8859-13</a>
    <td>"<code>ISO-8859-13</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-14">iso-8859-14</a>
    <td>"<code>ISO-8859-14</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-15">iso-8859-15</a>
    <td>"<code>ISO-8859-15</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-8859-16">iso-8859-16</a>
    <td>"<code>ISO-8859-16</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#koi8-r">koi8-r</a>
    <td>"<code>KOI8-R</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#koi8-u">koi8-u</a>
    <td>"<code>KOI8-U</code>"
   <!-- macintosh, windows-*, x-mac-cyrillic -->
   <tr>
    <td>gbk
    <td>"<code>GBK</code>"
   <!-- gb18030 -->
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#big5">big5</a>
    <td>"<code>Big5</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#euc-jp">euc-jp</a>
    <td>"<code>EUC-JP</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#iso-2022-jp">iso-2022-jp</a>
    <td>"<code>ISO-2022-JP</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#shift_jis">shift_jis</a>
    <td>"<code>Shift_JIS</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#euc-kr">euc-kr</a>
    <td>"<code>EUC-KR</code>"
   <!-- replacement -->
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#utf-16be">utf-16be</a>
    <td>"<code>UTF-16BE</code>"
   <tr>
    <td><a class="external" data-anolis-spec="encoding" href="http://www.w3.org/TR/encoding/#utf-16le">utf-16le</a>
    <td>"<code>UTF-16LE</code>"
   <!-- x-user-defined -->
  </table>

 <li><p>Return <var>name</var>.
</ol>

<p>The <dfn id="dom-document-contenttype" title="dom-Document-contentType"><code>contentType</code></dfn>
attribute must return the
<a href="#concept-document-content-type" title="concept-document-content-type">content type</a>.

<hr>

<dl class="domintro">
 <dt><var>document</var> . <code title="dom-Document-doctype"><a href="#dom-document-doctype">doctype</a></code>
 <dd><p>Returns the <a href="#concept-doctype" title="concept-doctype">doctype</a> or null if
 there is none.

 <dt><var>document</var> . <code title="dom-Document-documentElement"><a href="#dom-document-documentelement">documentElement</a></code>
 <dd><p>Returns the <a href="#document-element">document element</a>.

 <dt><var>collection</var> = <var>document</var> . <code title="dom-Document-getElementsByTagName"><a href="#dom-document-getelementsbytagname">getElementsByTagName(<var>localName</var>)</a></code>

 <dd>
  <p>If <var>localName</var> is "<code>*</code>" returns a
  <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a>.

  <p>Otherwise, returns a <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a> whose
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
  <var>localName</var>. (Matches case-insensitively against
  <a href="#concept-element" title="concept-element">elements</a> in the
  <a href="#html-namespace">HTML namespace</a> within an <a href="#html-document">HTML document</a>.)

 <dt><var>collection</var> = <var>document</var> . <code title="dom-Document-getElementsByTagName"><a href="#dom-document-getelementsbytagname">getElementsByTagNameNS(<var>namespace</var>, <var>localName</var>)</a></code>

 <dd>
  <p>If <var>namespace</var> and <var>localName</var> are
  "<code>*</code>" returns a <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a>.

  <p>If only <var>namespace</var> is "<code>*</code>" returns a
  <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a> whose
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
  <var>localName</var>.

  <p>If only <var>localName</var> is "<code>*</code>" returns a
  <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a> whose
  <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
  <var>namespace</var>.

  <p>Otherwise, returns a <code><a href="#htmlcollection">HTMLCollection</a></code> of all
  <a href="#concept-tree-descendant" title="concept-tree-descendant">descendant</a>
  <a href="#concept-element" title="concept-element">elements</a> whose
  <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
  <var>namespace</var> and
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
  <var>localName</var>.

 <dt><var>collection</var> = <var>document</var> . <code title="dom-Document-getElementsByClassName"><a href="#dom-document-getelementsbyclassname">getElementsByClassName(<var>classes</var>)</a></code>
 <dt><var>collection</var> = <var>element</var> . <code title="dom-Element-getElementsByClassName"><a href="#dom-element-getelementsbyclassname">getElementsByClassName(<var>classes</var>)</a></code>
 <dd>
  <p>Returns a <code><a href="#htmlcollection">HTMLCollection</a></code> of the
  <a href="#concept-element" title="concept-element">elements</a> in the object on which
  the method was invoked (a <a href="#concept-document" title="concept-document">document</a> or
  an <a href="#concept-element" title="concept-element">element</a>) that have all the classes
  given by <var>classes</var>.
  <p>The <var>classes</var> argument is interpreted as a
  space-separated list of classes.
</dl>

<p>The <dfn id="dom-document-doctype" title="dom-Document-doctype"><code>doctype</code></dfn> attribute
must return the <a href="#concept-tree-child" title="concept-tree-child">child</a> of the
<a href="#concept-document" title="concept-document">document</a> that is a
<a href="#concept-doctype" title="concept-doctype">doctype</a>, and null otherwise.

<p>The
<dfn id="dom-document-documentelement" title="dom-Document-documentElement"><code>documentElement</code></dfn>
attribute must return the <a href="#document-element">document element</a>.

<p>The
<dfn id="dom-document-getelementsbytagname" title="dom-Document-getElementsByTagName"><code>getElementsByTagName(<var>localName</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbytagname" title="concept-getElementsByTagName">list of elements with local name <var>localName</var></a>
for the <a href="#context-object">context object</a>.

<p class="note">Note: Thus, in an <a href="#html-document">HTML document</a>,
<code>document.getElementsByTagName("FOO")</code> will match
<code>FOO</code> elements that are not in the
<a href="#html-namespace">HTML namespace</a>, and <code>foo</code> elements that are in
the <a href="#html-namespace">HTML namespace</a>, but not <code>FOO</code> elements
that are in the <a href="#html-namespace">HTML namespace</a>.


<p>The
<dfn id="dom-document-getelementsbytagnamens" title="dom-Document-getElementsByTagNameNS"><code>getElementsByTagNameNS(<var>namespace</var>, <var>localName</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbytagnamens" title="concept-getElementsByTagNameNS">list of elements with namespace <var>namespace</var> and local name <var>localName</var></a>
for the <a href="#context-object">context object</a>.


<p>The
<dfn id="dom-document-getelementsbyclassname" title="dom-Document-getElementsByClassName"><code>getElementsByClassName(<var>classNames</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbyclassname" title="concept-getElementsByClassName">list of elements with class names <var>classNames</var></a>
for the <a href="#context-object">context object</a>.

<div class="example">
 <p>Given the following XHTML fragment:

 <pre>&lt;div id="example"&gt;
  &lt;p id="p1" class="aaa bbb"/&gt;
  &lt;p id="p2" class="aaa ccc"/&gt;
  &lt;p id="p3" class="bbb ccc"/&gt;
&lt;/div&gt;</pre>

 <p>A call to
 <code>document.getElementById('example').getElementsByClassName('aaa')</code>
 would return a <code><a href="#htmlcollection">HTMLCollection</a></code> with the two paragraphs
 <code>p1</code> and <code>p2</code> in it.

 <p>A call to
 <code>getElementsByClassName('ccc bbb')</code>
 would only return one node, however, namely <code>p3</code>. A call to
 <code>document.getElementById('example').getElementsByClassName('bbb  ccc ')</code>
 would return the same thing.

 <p>A call to
 <code>getElementsByClassName('aaa,bbb')</code>
 would return no nodes; none of the elements above are in the
 <code>aaa,bbb</code> class.
</div>

<hr>

<dl class="domintro">
 <dt><var>element</var> = <var>document</var> . <code title="dom-Document-createElement"><a href="#dom-document-createelement">createElement(<var>localName</var>)</a></code>
 <dd>
  <p>Returns an <a href="#concept-element" title="concept-element">element</a> in the
  <a href="#html-namespace">HTML namespace</a> [see <a href='https://www.w3.org/Bugs/Public/show_bug.cgi?id=19431'>bug 19431</a>] with <var>localName</var> as
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>. (In an
  <a href="#html-document">HTML document</a> <var>localName</var> is lowercased.)

  <p>If <var>localName</var> does not match the
  <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production an
  "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>"
  exception will be thrown.

 <dt><var>element</var> = <var>document</var> . <code title="dom-Document-createElement"><a href="#dom-document-createelement">createElementNS(<var>namespace</var>, <var>qualifiedName</var>)</a></code>

 <dd>
  <p>Returns an <a href="#concept-element" title="concept-element">element</a> with
  <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>
  <var>namespace</var>. Its
  <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> will
  be everything before "<code>:</code>" (U+003E) in
  <var>qualifiedName</var> or null. Its
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> will be
  everything after "<code>:</code>" (U+003E) in
  <var>qualifiedName</var> or <var>qualifiedName</var>.

  <p>If <var>localName</var> does not match the
  <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production an
  "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>"
  exception will be thrown.

  <p>If one of the following conditions is true a
  "<code><a href="#namespaceerror">NamespaceError</a></code>" exception
  will be thrown:

  <ul>
   <li><var>localName</var> does not match the
   <code class="external" data-anolis-spec="xmlns"><a href="http://www.w3.org/TR/xml-names/#NT-QName">QName</a></code> production.
   <li><a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">Namespace prefix</a>
   is not null and <var>namespace</var> is the empty string.
   <li><a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">Namespace prefix</a>
   is "<code>xml</code>" and <var>namespace</var> is not the
   <a href="#xml-namespace">XML namespace</a>.
   <li><var>qualifiedName</var> or
   <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>
   is "<code>xmlns</code>" and <var>namespace</var> is not the
   <a href="#xmlns-namespace">XMLNS namespace</a>.
   <li><var>namespace</var> is the <a href="#xmlns-namespace">XMLNS namespace</a> and
   neither <var>qualifiedName</var> nor
   <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>
   is "<code>xmlns</code>".
  </ul>

 <dt><var>documentFragment</var> = <var>document</var> . <code title="dom-Document-createDocumentFragment"><a href="#dom-document-createdocumentfragment">createDocumentFragment()</a></code>
 <dd><p>Returns a <code><a href="#documentfragment">DocumentFragment</a></code>
 <a href="#concept-node" title="concept-node">node</a>.

 <dt><var>text</var> = <var>document</var> . <code title="dom-Document-createTextNode"><a href="#dom-document-createtextnode">createTextNode(<var>data</var>)</a></code>
 <dd><p>Returns a <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
 whose <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var>.

 <dt><var>comment</var> = <var>document</var> . <code title="dom-Document-createComment"><a href="#dom-document-createcomment">createComment(<var>data</var>)</a></code>
 <dd><p>Returns a <code><a href="#comment">Comment</a></code> <a href="#concept-node" title="concept-node">node</a>
 whose <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var>.

 <dt><var>processingInstruction</var> = <var>document</var> . <code title="dom-Document-createProcessingInstruction"><a href="#dom-document-createprocessinginstruction">createProcessingInstruction(<var>target</var>, <var>data</var>)</a></code>
 <dd>
  <p>Returns a <code><a href="#processinginstruction">ProcessingInstruction</a></code>
  <a href="#concept-node" title="concept-node">node</a> whose
  <a href="#concept-pi-target" title="concept-PI-target">target</a> is <var>target</var> and
  <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var>.
  <p>If <var>target</var> does not match the
  <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production an
  "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>"
  exception will be thrown.
  <p>If <var>data</var> contains "<code>?&gt;</code>" an
  "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>"
  exception will be thrown.
</dl>

<p>The <dfn id="concept-element-interface" title="concept-element-interface">element interface</dfn> for any
<var>name</var> and <var>namespace</var> is <code><a href="#element">Element</a></code>, unless
stated otherwise.

<p class="note">Note: The HTML Standard will e.g. define that for <code>html</code> and the
<a href="#html-namespace">HTML namespace</a>, the <code>HTMLHtmlElement</code> interface is used.
[[!HTML5]

<p>The <dfn id="dom-document-createelement" title="dom-Document-createElement"><code>createElement(<var>localName</var>)</code></dfn> method must run the these steps:

<ol>
 <li><p>If <var>localName</var> does not match the
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception.

 <li><p>If the <a href="#context-object">context object</a> is an <a href="#html-document">HTML document</a>,
 let <var>localName</var> be
 <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.
 <!-- XXX why restrict this to HTML documents? -->

 <li><p>Let <var>interface</var> be the
 <a href="#concept-element-interface" title="concept-element-interface">element interface</a> for
 <var>localName</var> and the <a href="#html-namespace">HTML namespace</a>.

 <li><p>Return a new <a href="#concept-element" title="concept-element">element</a> that implements <var>interface</var>,
 with no attributes,
 <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> set to the <a href="#html-namespace">HTML namespace</a> [see <a href='https://www.w3.org/Bugs/Public/show_bug.cgi?id=19431'>bug 19431</a>],
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> set to <var>localName</var>, and
 <a href="#concept-node-document" title="concept-node-document">node document</a> set to the <a href="#context-object">context object</a>.
</ol>

<p>The
<dfn id="dom-document-createelementns" title="dom-Document-createElementNS"><code>createElementNS(<var>namespace</var>, <var>qualifiedName</var>)</code></dfn>
method must run these steps:
<ol>
 <li><p>If <var>namespace</var> is the empty string, set it to null.

 <li><p>If <var>qualifiedName</var> does not match the
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception.
 <li><p>If <var>qualifiedName</var> does not match the
 <code class="external" data-anolis-spec="xmlns"><a href="http://www.w3.org/TR/xml-names/#NT-QName">QName</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.
 <li><p>If <var>qualifiedName</var> contains a "<code>:</code>"
 (U+003E), then split the string on it and let <var>prefix</var> be
 the part before and <var>localName</var> the part after. Otherwise,
 let <var>prefix</var> be null and <var>localName</var> be
 <var>qualifiedName</var>.
 <li><p>If <var>prefix</var> is not null and
 <var>namespace</var> is null, <a href="#dfn-throw" title="concept-throw">throw</a>
 a "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.
 <li><p>If <var>prefix</var> is "<code>xml</code>" and
 <var>namespace</var> is not the <a href="#xml-namespace">XML namespace</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.
 <li><p>If <var>qualifiedName</var> or <var>prefix</var> is
 "<code>xmlns</code>" and <var>namespace</var> is not the
 <a href="#xmlns-namespace">XMLNS namespace</a>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.
 <li><p>If <var>namespace</var> is the <a href="#xmlns-namespace">XMLNS namespace</a>
 and neither <var>qualifiedName</var> nor <var>prefix</var> is
 "<code>xmlns</code>", <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p>Let <var>interface</var> be the
 <a href="#concept-element-interface" title="concept-element-interface">element interface</a> for
 <var>localName</var> and <var>namespace</var>.

 <li><p>Return a new <a href="#concept-element" title="concept-element">element</a> that implements <var>interface</var>,
 with no attributes,
 <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> set to <var>namespace</var>,
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> set to <var>prefix</var>,
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> set to <var>localName</var>, and
 <a href="#concept-node-document" title="concept-node-document">node document</a> set to the <a href="#context-object">context object</a>.
</ol>

<p>The
<dfn id="dom-document-createdocumentfragment" title="dom-Document-createDocumentFragment"><code>createDocumentFragment()</code></dfn>
method must return a new <code><a href="#documentfragment">DocumentFragment</a></code>
<a href="#concept-node" title="concept-node">node</a> with its
<a href="#concept-node-document" title="concept-node-document">node document</a> set to the
<a href="#context-object">context object</a>.

<p>The
<dfn id="dom-document-createtextnode" title="dom-Document-createTextNode"><code>createTextNode(<var>data</var>)</code></dfn>
method must return a new <code><a href="#text">Text</a></code>
<a href="#concept-node" title="concept-node">node</a> with its
<a href="#concept-cd-data" title="concept-CD-data">data</a> set to <var>data</var> and
<a href="#concept-node-document" title="concept-node-document">node document</a> set to the
<a href="#context-object">context object</a>.
<p class="note">Note: No check is performed that <var>data</var> consists of
characters that match the <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Char">Char</a></code> production.

<p>The
<dfn id="dom-document-createcomment" title="dom-Document-createComment"><code>createComment(<var>data</var>)</code></dfn>
method must return a new <code><a href="#comment">Comment</a></code>
<a href="#concept-node" title="concept-node">node</a> with its
<a href="#concept-cd-data" title="concept-CD-data">data</a> set to <var>data</var> and
<a href="#concept-node-document" title="concept-node-document">node document</a> set to the
<a href="#context-object">context object</a>.
<p class="note">Note: No check is performed that <var>data</var> consists of
characters that match the <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Char">Char</a></code> production
or that it contains two adjacent hyphens or ends with a hyphen.

<p>The <dfn id="dom-document-createprocessinginstruction" title="dom-Document-createProcessingInstruction"><code>createProcessingInstruction(<var>target</var>, <var>data</var>)</code></dfn> method must run these steps:

<ol>
 <li><p>If <var>target</var> does not match the
 <!--<code data-anolis-spec=xml>PITarget</code>-->
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception. <!-- DOM3 does not check for "xml" -->

 <li><p>If <var>data</var> contains the string
 "<code>?&gt;</code>", <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception. <!-- Gecko does this. -->

 <!--<li><p>If <var title>target</var> contains a U+003A COLON (":")
 character, <span title=concept-throw>throw</span> a
 "<code>NamespaceError</code>" exception.-->
 <!-- DOM3 didn't check this -->

 <li><p>Return a new <code><a href="#processinginstruction">ProcessingInstruction</a></code>
 <a href="#concept-node" title="concept-node">node</a>, with
 <a href="#concept-pi-target" title="concept-PI-target">target</a> set to <var>target</var>,
 <a href="#concept-cd-data" title="concept-CD-data">data</a> set to <var>data</var>, and
 <a href="#concept-node-document" title="concept-node-document">node document</a> set to the
 <a href="#context-object">context object</a>.
</ol>

<p class="note">Note: No check is performed that <var>target</var> contains
"<code>xml</code>" or "<code>:</code>", or that
<var>data</var> contains characters that match the
<code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Char">Char</a></code> production.

<!--
[createAttribute]
<p>The <dfn title=dom-Document-createAttribute><code>createAttribute(<var title>name</var>)</code></dfn> method must run these steps:
<ol>
 <li><p>If <var title>name</var> does not match the <code data-anolis-spec=xml>Name</code> production in XML,
 <span title=concept-throw>throw</span> an
 "<code>InvalidCharacterError</code>"
 exception.
 <li><p>Return a new <code>Attr</code> node with its <code title=dom-Node-namespaceURI>namespaceURI</code> set to null, <code title=dom-Node-prefix>prefix</code> set to null, <code title=dom-Node-localName>localName</code> set to <var title>name</var>, and <span title=concept-node-document>node document</span> set to the <span>context object</span>.
</ol>-->
<!-- this is different from DOM3 -->
<!--<p class=note>No check is performed that the local name will match the <code
data-anolis-spec=xmlns>NCName</code> production in Namespaces in XML.-->

<hr>

<dl class="domintro">
 <dt><var>clone</var> = <var>document</var> . <code title="dom-Document-importNode"><a href="#dom-document-importnode">importNode(<var>node</var> [, <var>deep</var> = false])</a></code>
 <dd>
 <dd>
  <p>Returns a copy of <var>node</var>. If
  <var>deep</var> is true, the copy also includes the
  <var>node</var>'s <a href="#concept-tree-descendant" title="concept-tree-descendant">descendants</a>.

  <p>If <var>node</var> is a
  <a href="#concept-document" title="concept-document">document</a> throws a
  "<code><a href="#notsupportederror">NotSupportedError</a></code>"
  exception.

 <dt><var>node</var> = <var>document</var> . <code title="dom-Document-adoptNode"><a href="#dom-document-adoptnode">adoptNode(<var>node</var>)</a></code>

 <dd>
  <p>Moves <var>node</var> from another
  <a href="#concept-document" title="concept-document">document</a> and returns it.

  <p>If <var>node</var> is a
  <a href="#concept-document" title="concept-document">document</a> throws a
  "<code><a href="#notsupportederror">NotSupportedError</a></code>"
  exception.
</dl>

<p>The
<dfn id="dom-document-importnode" title="dom-Document-importNode"><code>importNode(<var>node</var>, <var>deep</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>node</var> is a
 <a href="#concept-document" title="concept-document">document</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notsupportederror">NotSupportedError</a></code>" exception.

 <li><p>Return a <a href="#concept-node-clone" title="concept-node-clone">clone</a> of
 <var>node</var>, with <a href="#context-object">context object</a> and the
 <i>clone children flag</i> set if <var>deep</var> is true.
</ol>

<p><a href="#other-applicable-specifications" title="Other applicable specifications">Specifications</a> may define
<dfn id="concept-node-adopt-ext" title="concept-node-adopt-ext">adopting steps</dfn> for all or some
<a href="#concept-node" title="concept-node">nodes</a>. The algorithm is passed <var>node</var> and
<var>oldDocument</var>, as indicated in the
<a class="no-backref" href="#concept-node-adopt" title="concept-node-adopt">adopt</a> algorithm.

<p>To <dfn id="concept-node-adopt" title="concept-node-adopt">adopt</dfn> a <var>node</var> into
a <var>document</var>, run these steps:

<ol>
 <li><p>Let <var>oldDocument</var> be <var>node</var>'s
 <a href="#concept-node-document" title="concept-node-document">node document</a>.

 <li><p>If <var>node</var>'s
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is not null,
 <a href="#concept-node-remove" title="concept-node-remove">remove</a> <var>node</var> from
 its <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

 <li><p>Set <var>node</var>'s
 <a href="#concept-tree-inclusive-descendant" title="concept-tree-inclusive-descendant">inclusive descendants</a>'s
 <a href="#concept-node-document" title="concept-node-document">node document</a> to <var>document</var>.
 <!--AttrExodus as well as any associated <code>Attr</code> nodes-->

 <li><p>Run any <a href="#concept-node-adopt-ext" title="concept-node-adopt-ext">adopting steps</a> defined for
 <var>node</var> in <a href="#other-applicable-specifications">other applicable specifications</a> and pass
 <var>node</var> and <var>oldDocument</var> as parameters.
</ol>

<p>The
<dfn id="dom-document-adoptnode" title="dom-Document-adoptNode"><code>adoptNode(<var>node</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>node</var> is a
 <a href="#concept-document" title="concept-document">document</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notsupportederror">NotSupportedError</a></code>" exception.

 <li><p><a href="#concept-node-adopt" title="concept-node-adopt">Adopt</a> <var>node</var>
 into the <a href="#context-object">context object</a>.

 <li><p>Return <var>node</var>.
</ol>

<hr>

<p>The
<dfn id="dom-document-createevent" title="dom-Document-createEvent"><code>createEvent(<var>interface</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>constructor</var> be null.

 <li>
  <p>If <var>interface</var> is an
  <a href="#ascii-case-insensitive">ASCII case-insensitive</a> match for any of the strings in the
  first column in the following table, set <var>constructor</var> to the
  interface in the second column on the same row as the matching string:

  <table>
   <thead>
    <tr><th>String<th>Interface<td>Notes
   <tbody>
    <tr><td>"<code>customevent</code>"<td><code><a href="#customevent">CustomEvent</a></code><td>
    <tr><td>"<code>event</code>"<td><code><a href="#event">Event</a></code><td>
    <tr><td>"<code>events</code>"<td><code><a href="#event">Event</a></code><td>
    <tr><td>"<code>htmlevents</code>"<td><code><a href="#event">Event</a></code><td>
    <tr><td>"<code>keyboardevent</code>"<td><code>KeyboardEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>keyevents</code>"<td><code>KeyboardEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>messageevent</code>"<td><code>MessageEvent</code><td> [[HTML5]</a>
    <tr><td>"<code>mouseevent</code>"<td><code>MouseEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>mouseevents</code>"<td><code>MouseEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>touchevent</code>"<td><code>TouchEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>uievent</code>"<td><code>UIEvent</code><td> [[UIEVENTS]]
    <tr><td>"<code>uievents</code>"<td><code>UIEvent</code><td> [[UIEVENTS]]
  </table>
  <!-- XXX WebKit's architecture is broken here and both browsers support more than DOM.
       http://trac.webkit.org/browser/trunk/Source/WebCore/dom/EventNames.in
       http://mxr.mozilla.org/mozilla-central/source/content/events/src/nsEventDispatcher.cpp#819 -->

 <li><p>If <var>constructor</var> is null, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#notsupportederror">NotSupportedError</a></code>".

 <li><p>Let <var>event</var> be the result of
 <a href="#concept-event-constructor" title="concept-event-constructor">invoking</a> the initial value of
 <var>constructor</var> with the empty string as argument.
 <!-- "initial value" as in before script could get to it -->

 <li><p>Unset <var>event</var>'s <a href="#initialized-flag">initialized flag</a>.

 <li><p>Return <var>event</var>.
</ol>

<p class="note">Note: <a href="#concept-event" title="concept-event">Event</a> constructors can be used instead.

<hr>

<p>The <dfn id="dom-document-createrange" title="dom-Document-createRange"><code>createRange()</code></dfn>
method must return a new <a href="#concept-range" title="concept-range">range</a> with
(<a href="#context-object">context object</a>, 0) as its
<a href="#concept-range-start" title="concept-range-start">start</a> and
<a href="#concept-range-end" title="concept-range-end">end</a>.

<p class="note">Note: The <code title="dom-Range"><a href="#dom-range">Range()</a></code> constructor can be used instead.

<hr>

<p>The
<dfn id="dom-document-createnodeiterator" title="dom-Document-createNodeIterator"><code>createNodeIterator(<var>root</var>, <var>whatToShow</var>, <var>filter</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>Create a <code><a href="#nodeiterator">NodeIterator</a></code> object.
 <li><p>Set <a href="#concept-traversal-root" title="concept-traversal-root">root</a> and initialize
 the <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code>
 attribute to the <var>root</var> argument.
 <li><p>Initialize the
 <code title="dom-NodeIterator-pointerBeforeReferenceNode"><a href="#dom-nodeiterator-pointerbeforereferencenode">pointerBeforeReferenceNode</a></code>
 attribute to true.
 <li><p>Set <a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> to
 the <var>whatToShow</var> argument.
 <li><p>Set <a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a> to
 <var>filter</var>.
 <li><p>Return the newly created <code><a href="#nodeiterator">NodeIterator</a></code> object.
</ol>

<p>The
<dfn id="dom-document-createtreewalker" title="dom-Document-createTreeWalker"><code>createTreeWalker(<var>root</var>, <var>whatToShow</var>, <var>filter</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>Create a <code><a href="#treewalker">TreeWalker</a></code> object.
 <li><p>Set <a href="#concept-traversal-root" title="concept-traversal-root">root</a> and initialize
 the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute to
 the <var>root</var> argument.
 <li><p>Set <a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> to
 the <var>whatToShow</var> argument.
 <li><p>Set <a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a> to
 <var>filter</var>.
 <li><p>Return the newly created <code><a href="#treewalker">TreeWalker</a></code> object.
</ol>

<h4 id="interface-domimplementation">Interface <code><a href="#domimplementation">DOMImplementation</a></code></h4>

<p>User agents must create a <code><a href="#domimplementation">DOMImplementation</a></code> object whenever
a <a href="#concept-document" title="concept-document">document</a> is created and associate it
with that <a href="#concept-document" title="concept-document">document</a>.

<pre class='idl'>
[Exposed=Window]
interface DOMImplementation {
  [NewObject] DocumentType createDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId);
  [NewObject] XMLDocument createDocument(DOMString? namespace, [TreatNullAs=EmptyString] DOMString qualifiedName, optional DocumentType? doctype = null);
  [NewObject] Document createHTMLDocument(optional DOMString title);

  boolean hasFeature(); // useless; always returns true
};
</pre>

<dl class="domintro">
 <dt><code><var>doctype</var> = <var>document</var> . <a href="#dom-document-implementation" title="dom-Document-implementation">implementation</a> . <a href="#dom-domimplementation-createdocumenttype" title="dom-DOMImplementation-createDocumentType">createDocumentType</a>(<var>qualifiedName</var>, <var>publicId</var>, <var>systemId</var>)</code>

 <dd>
  <p>Returns a <a href="#concept-doctype" title="concept-doctype">doctype</a>, with the given
  <var>qualifiedName</var>, <var>publicId</var>, and
  <var>systemId</var>. If <var>qualifiedName</var> does not
  match the <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production, an
  "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>"
  exception is thrown, and if it does not match the
  <code class="external" data-anolis-spec="xmlns"><a href="http://www.w3.org/TR/xml-names/#NT-QName">QName</a></code> production, a
  "<code><a href="#namespaceerror">NamespaceError</a></code>" exception
  is thrown.

 <dt><code><var>doc</var> = <var>document</var> . <a href="#dom-document-implementation" title="dom-Document-implementation">implementation</a> . <a href="#dom-domimplementation-createdocument" title="dom-DOMImplementation-createDocument">createDocument</a>(<var>namespace</var>, <var>qualifiedName</var> [, <var>doctype</var> = null])</code>

 <dd>
  <p>Returns an <code><a href="#xmldocument">XMLDocument</a></code> [see <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22960">bug 22960</a>], with a
  <a href="#document-element">document element</a> whose
  <a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is
  <var>qualifiedName</var> and whose
  <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> is
  <var>namespace</var> (unless <var>qualifiedName</var> is the
  empty string), and with <var>doctype</var>, if it is given, as its
  <a href="#concept-doctype" title="concept-doctype">doctype</a>.

  <p>This method throws the same exceptions as the <code title="dom-Document-createElementNS"><a href="#dom-document-createelementns">createElementNS</a></code> method, when
  invoked with the same arguments.

 <dt><code><var>doc</var> = <var>document</var> . <a href="#dom-document-implementation" title="dom-Document-implementation">implementation</a> . <a href="#dom-domimplementation-createhtmldocument" title="dom-DOMImplementation-createHTMLDocument">createHTMLDocument</a>([<var>title</var>])</code>

 <dd>
  <p>Returns a <a href="#concept-document" title="concept-document">document</a>, with a basic
  <a href="#concept-tree" title="concept-tree">tree</a> already constructed including a
  <code>title</code> element, unless the <var>title</var>
  argument is omitted.
</dl>

<div class="impl">

<p>The
<dfn id="dom-domimplementation-createdocumenttype" title="dom-DOMImplementation-createDocumentType"><code>createDocumentType(<var>qualifiedName</var>, <var>publicId</var>, <var>systemId</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>qualifiedName</var> does not match the
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception.
 <li><p>If <var>qualifiedName</var> does not match the <code class="external" data-anolis-spec="xmlns"><a href="http://www.w3.org/TR/xml-names/#NT-QName">QName</a></code> production,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.
 <!-- <li><p>If <var title>publicId</var> contains a character that does not
 match the <code data-anolis-spec=xml>PubidChar</code> production in XML,
 <span title=concept-throw>throw</span> an
 "<code>InvalidCharacterError</code>"
 exception. --> <!-- DOM3 didn't check this -->
 <!--<li><p>If <var title>systemId</var> contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE ("'") character,
 <span title=concept-throw>throw</span> an
 "<code>InvalidCharacterError</code>"
 exception.--> <!-- DOM3 didn't check this -->
 <li><p>Return a new <a href="#concept-doctype" title="concept-doctype">doctype</a>, with
 <var>qualifiedName</var> as its
 <a href="#concept-doctype-name" title="concept-doctype-name">name</a>, <var>publicId</var> as
 its <a href="#concept-doctype-publicid" title="concept-doctype-publicid">public ID</a>, and
 <var>systemId</var> as its
 <a href="#concept-doctype-systemid" title="concept-doctype-systemid">system ID</a>, and with its
 <a href="#concept-node-document" title="concept-node-document">node document</a> set to the
 associated <a href="#concept-document" title="concept-document">document</a> of the
 <a href="#context-object">context object</a>.
</ol>
<p class="note">Note: No check is performed that <var>publicId</var>
matches the <code>PublicChar</code> production or that
<var>systemId</var> does not contain both a '<code>"</code>' and
"<code>'</code>".

<p>The
<dfn id="dom-domimplementation-createdocument" title="dom-DOMImplementation-createDocument"><code>createDocument(<var>namespace</var>, <var>qualifiedName</var>, <var>doctype</var>)</code></dfn>
method must run these steps:

<ol>
 <li>
  <p>Let <var>document</var> be a new <code><a href="#xmldocument">XMLDocument</a></code> [see <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22960">bug 22960</a>].

  <p class="note">Note: This method creates an <code><a href="#xmldocument">XMLDocument</a></code> rather than
  a normal <a href="#concept-document" title="concept-document">document</a>. They are identical
  except for the addition of the
  <code class="external" data-anolis-spec="html" title="dom-XMLDocument-load"><a href="http://www.w3.org/TR/html51/dom.html#dom-xmldocument-load">load()</a></code>
  method deployed content relies upon. [[!HTML5]

 <li><p>Let <var>element</var> be null.

 <li><p>If <var>qualifiedName</var> is not the empty string, set
 <var>element</var> to the result of invoking the
 <code title="dom-Document-createElementNS"><a href="#dom-document-createelementns">createElementNS()</a></code> method
 with the arguments <var>namespace</var> and
 <var>qualifiedName</var> on <var>document</var>. Rethrow any exceptions.
 <!-- XXX needs cleanup -->

 <li><p>If <var>doctype</var> is not null,
 <a href="#concept-node-append" title="concept-node-append">append</a>
 <var>doctype</var> to <var>document</var>.

 <li><p>If <var>element</var> is not null,
 <a href="#concept-node-append" title="concept-node-append">append</a>
 <var>element</var> to <var>document</var>.

 <li><p><var>document</var>'s
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> is an
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> of the
 <a href="#context-object">context object</a>'s associated
 <a href="#concept-document" title="concept-document">document</a>, and
 <var>document</var>'s
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> is an
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> of the
 <a href="#context-object">context object</a>'s associated
 <a href="#concept-document" title="concept-document">document</a>. [[!HTML5]

 <li><p>Return <var>document</var>.
</ol>

<p>The
<dfn id="dom-domimplementation-createhtmldocument" title="dom-DOMImplementation-createHTMLDocument"><code>createHTMLDocument(<var>title</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>doc</var> be a new
 <a href="#concept-document" title="concept-document">document</a> that is an
 <a href="#html-document">HTML document</a>.

 <li><p>Set <var>doc</var>'s
 <a href="#concept-document-content-type" title="concept-document-content-type">content type</a> to
 "<code>text/html</code>".

 <li><p>Create a <a href="#concept-doctype" title="concept-doctype">doctype</a>, with
 "<code>html</code>"
 as its <a href="#concept-doctype-name" title="concept-doctype-name">name</a> and with its
 <a href="#concept-node-document" title="concept-node-document">node document</a> set to
 <var>doc</var>. <a href="#concept-node-append" title="concept-node-append">Append</a>
 the newly created node to <var>doc</var>.

 <li><p>Create an <code>html</code> element in the <a href="#html-namespace">HTML
 namespace</a>, and <a href="#concept-node-append" title="concept-node-append">append</a>
 it to <var>doc</var>.

 <li><p>Create a <code>head</code> element in the <a href="#html-namespace">HTML
 namespace</a>, and  <a href="#concept-node-append" title="concept-node-append">append</a>
 it to the <code>html</code> element created in the previous step.

 <li>
  <p>If the <var>title</var> argument is not omitted:

  <ol>
   <li><p>Create a <code>title</code> element in the
   <a href="#html-namespace">HTML namespace</a>, and
   <a href="#concept-node-append" title="concept-node-append">append</a> it to the
   <code>head</code> element created in the previous step.

   <li><p>Create a <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>,
   set its <a href="#concept-cd-data" title="concept-CD-data">data</a> to <var>title</var>
   (which could be the empty string), and
   <a href="#concept-node-append" title="concept-node-append">append</a> it to the
   <code>title</code> element created in the previous step.
  </ol>

 <li><p>Create a <code>body</code> element in the
 <a href="#html-namespace">HTML namespace</a>, and
 <a href="#concept-node-append" title="concept-node-append">append</a> it to the
 <code>html</code> element created in the earlier step.

 <li><p><var>doc</var>'s
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> is an
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#origin">origin</a> of the
 <a href="#context-object">context object</a>'s associated
 <a href="#concept-document" title="concept-document">document</a>, and
 <var>doc</var>'s
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> is an
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#concept-origin-alias" title="concept-origin-alias">alias</a> to the
 <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html5/browsers.html#effective-script-origin">effective script origin</a> of the
 <a href="#context-object">context object</a>'s associated
 <a href="#concept-document" title="concept-document">document</a>. [[!HTML5]

 <li><p>Return <var>doc</var>.
</ol>

<p>The <dfn id="dom-domimplementation-hasfeature" title="dom-DOMImplementation-hasFeature"><code>hasFeature()</code></dfn> method
must return true.

<p class="note">Note: <code title="dom-DOMImplementation-hasFeature"><a href="#dom-domimplementation-hasfeature">hasFeature()</a></code>
originally would report whether the user agent claimed to support a given DOM
feature, but experience proved it was not nearly as reliable or granular as
simply checking whether the desired objects, attributes, or methods existed.
As such, it should no longer be used, but continues to exist (and simply
returns true) so that old pages don't stop working.

</div>

<h3 id="nodes-interface-documentfragment">Interface <code><a href="#documentfragment">DocumentFragment</a></code></h3>

<pre class='idl'>
[Constructor,
 Exposed=Window]
interface DocumentFragment : Node {
};
</pre>

<p>A <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a> can have an
associated <a href="#concept-element" title="concept-element">element</a> named
<dfn id="concept-documentfragment-host" title="concept-DocumentFragment-host">host</dfn>.

<p>An object <var>A</var> is a
<dfn id="concept-tree-host-including-inclusive-ancestor" title="concept-tree-host-including-inclusive-ancestor">host-including inclusive ancestor</dfn>
of an object <var>B</var>, if either <var>A</var> is an
<a href="#concept-tree-inclusive-ancestor" title="concept-tree-inclusive-ancestor">inclusive ancestor</a> of
<var>B</var>, or if <var>B</var>'s <a href="#concept-tree-root" title="concept-tree-root">root</a>
has an associated <a href="#concept-documentfragment-host" title="concept-DocumentFragment-host">host</a> and
<var>A</var> is a
<a href="#concept-tree-host-including-inclusive-ancestor" title="concept-tree-host-including-inclusive-ancestor">host-including inclusive ancestor</a>
of <var>B</var>'s <a href="#concept-tree-root" title="concept-tree-root">root</a>'s
<a href="#concept-documentfragment-host" title="concept-DocumentFragment-host">host</a>.

<p class="note">Note: The <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>'s
<a href="#concept-documentfragment-host" title="concept-DocumentFragment-host">host</a> concept is useful for HTML's
<code>template</code> element and the <code>ShadowRoot</code> object and impacts the
<a href="#concept-node-pre-insert" title="concept-node-pre-insert">pre-insert</a> and
<a href="#concept-node-replace" title="concept-node-replace">replace</a> algorithms.

<!-- XXX xref
     XXX ShadowRoot is a Node technically -->

<dl class="domintro">
 <dt><code><var>tree</var> = new <a href="#dom-documentfragment" title="dom-DocumentFragment">DocumentFragment</a>()</code>
 <dd><p>Returns a new <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a>.
</dl>

<p>The <dfn id="dom-documentfragment" title="dom-DocumentFragment"><code>DocumentFragment()</code></dfn> constructor
must return a new <code><a href="#documentfragment">DocumentFragment</a></code> <a href="#concept-node" title="concept-node">node</a> whose
<a href="#concept-node-document" title="concept-node-document">node document</a> is the global object's associated
<a href="#concept-document" title="concept-document">document</a>.

<h3 id="nodes-interface-documenttype">Interface <code><a href="#documenttype">DocumentType</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface DocumentType : Node {
  readonly attribute DOMString name;
  readonly attribute DOMString publicId;
  readonly attribute DOMString systemId;
};
</pre>

<p><code><a href="#documenttype">DocumentType</a></code> <a href="#concept-node" title="concept-node">nodes</a> are
simply known as <dfn id="concept-doctype" title="concept-doctype">doctypes</dfn>.

<p><a href="#concept-doctype" title="concept-doctype">Doctypes</a> have an associated
<dfn id="concept-doctype-name" title="concept-doctype-name">name</dfn>,
<dfn id="concept-doctype-publicid" title="concept-doctype-publicid">public ID</dfn>, and
<dfn id="concept-doctype-systemid" title="concept-doctype-systemid">system ID</dfn>.

<p>When a <a href="#concept-doctype" title="concept-doctype">doctype</a> is created, its
<a href="#concept-doctype-name" title="concept-doctype-name">name</a> is always given. Unless
explicitly given when a <a href="#concept-doctype" title="concept-doctype">doctype</a> is
created, its <a href="#concept-doctype-publicid" title="concept-doctype-publicid">public ID</a> and
<a href="#concept-doctype-systemid" title="concept-doctype-systemid">system ID</a> are the empty string.

<p>The <dfn id="dom-documenttype-name" title="dom-DocumentType-name"><code>name</code></dfn> attribute
must return the <a href="#concept-doctype-name" title="concept-doctype-name">name</a>.

<p>The <dfn id="dom-documenttype-publicid" title="dom-DocumentType-publicId"><code>publicId</code></dfn>
attribute must return the
<a href="#concept-doctype-publicid" title="concept-doctype-publicid">public ID</a>.

<p>The <dfn id="dom-documenttype-systemid" title="dom-DocumentType-systemId"><code>systemId</code></dfn>
attribute must return the
<a href="#concept-doctype-systemid" title="concept-doctype-systemid">system ID</a>.

<h3 id="nodes-interface-element">Interface <code><a href="#element">Element</a></code></h3>
<pre class='idl'>
[Exposed=Window]
interface Element : Node {
  readonly attribute DOMString? namespaceURI;
  readonly attribute DOMString? prefix;
  readonly attribute DOMString localName;
  readonly attribute DOMString tagName;

           attribute DOMString id;
           attribute DOMString className;
  [SameObject] readonly attribute DOMTokenList classList;

  [SameObject] readonly attribute NamedNodeMap attributes;
  DOMString? getAttribute(DOMString name);
  DOMString? getAttributeNS(DOMString? namespace, DOMString localName);
  void setAttribute(DOMString name, DOMString value);
  void setAttributeNS(DOMString? namespace, DOMString name, DOMString value);
  void removeAttribute(DOMString name);
  void removeAttributeNS(DOMString? namespace, DOMString localName);
  boolean hasAttribute(DOMString name);
  boolean hasAttributeNS(DOMString? namespace, DOMString localName);


  HTMLCollection getElementsByTagName(DOMString localName);
  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);
  HTMLCollection getElementsByClassName(DOMString classNames);
};
</pre>

<p><code><a href="#element">Element</a></code> <a href="#concept-node" title="concept-node">nodes</a> are simply
known as <dfn id="concept-element" title="concept-element">elements</dfn>.</p>

<p><a href="#concept-element" title="concept-element">Elements</a> have an associated
<dfn id="concept-element-namespace" title="concept-element-namespace">namespace</dfn>,
<dfn id="concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</dfn>, and
<dfn id="concept-element-local-name" title="concept-element-local-name">local name</dfn>. When an
<a href="#concept-element" title="concept-element">element</a> is created, its
<a href="#concept-element-local-name" title="concept-element-local-name">local name</a> is always given.
Unless explicitly given when an <a href="#concept-element" title="concept-element">element</a>
is created, its <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a> and
<a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> are
null.

<p><a href="#concept-element" title="concept-element">Elements</a> also have an ordered
<dfn id="concept-element-attribute" title="concept-element-attribute">attribute list</dfn>. Unless
explicitly given when an <a href="#concept-element" title="concept-element">element</a> is
created, its
<a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a> is empty. An
<a href="#concept-element" title="concept-element">element</a>
<dfn id="concept-element-attribute-has" title="concept-element-attribute-has">has</dfn> an
<a href="#concept-attribute" title="concept-attribute">attribute</a> <var>A</var> if
<var>A</var> is in its
<a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.

<p><a href="#other-applicable-specifications" title="Other applicable specifications">Applicable specifications</a>
and this specification (can) use the hooks an <dfn id="attribute-is-set">attribute is set</dfn>,
an <dfn id="attribute-is-changed">attribute is changed</dfn>, an <dfn id="attribute-is-added">attribute is added</dfn>, and
an <dfn id="attribute-is-removed">attribute is removed</dfn>, for further processing of the
<a href="#concept-attribute" title="concept-attribute">attribute</a>'s
<a href="#concept-attribute-value" title="concept-attribute-value">value</a>.

<p>To <dfn id="concept-element-attributes-get" title="concept-element-attributes-get">get an attribute</dfn> for
an <a href="#concept-element" title="concept-element">element</a> <var>element</var>
using a <var>localName</var> and optionally a
<var>namespace</var>, run these steps:

<ol>
 <li><p>If <var>namespace</var> is not given, set it to null.

 <li><p>Return the <a href="#concept-attribute-value" title="concept-attribute-value">value</a> of the
 <a href="#concept-attribute" title="concept-attribute">attribute</a> in <var>element</var>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a> whose
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is
 <var>namespace</var> and
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
 <var>localName</var>, if it has one, and null otherwise.
</ol>

<p>To <dfn id="concept-element-attributes-set" title="concept-element-attributes-set">set an attribute</dfn> for
an <a href="#concept-element" title="concept-element">element</a> <var>element</var>
using a <var>localName</var> and <var>value</var>, and
optionally a <var>name</var>, <var>prefix</var>, and
<var>namespace</var>, run these steps:

<ol>
 <li><p>If <var>name</var> is not given, set it to
 <var>localName</var>.

 <li><p>If <var>prefix</var> is not given, set it to null.

 <li><p>If <var>namespace</var> is not given, set it to null.

 <li><p>Let <var>attribute</var> be the
 <a href="#concept-attribute" title="concept-attribute">attribute</a> in
 <var>element</var>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>
 whose <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is
 <var>namespace</var> and whose
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>
 is <var>localName</var>, or null if there is no such
 <a href="#concept-attribute" title="concept-attribute">attribute</a>.

 <li><p>If <var>attribute</var> is null, create an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
 <var>localName</var>,
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> is <var>value</var>,
 <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is <var>name</var>,
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is
 <var>namespace</var>, and
 <a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a> is
 <var>prefix</var>, and then
 <a href="#concept-element-attributes-append" title="concept-element-attributes-append">append</a> this
 <a href="#concept-attribute" title="concept-attribute">attribute</a> to <var>element</var>
 and terminate these steps.

 <li><p><a href="#concept-element-attributes-change" title="concept-element-attributes-change">Change</a>
 <var>attribute</var> from <var>element</var> to
 <var>value</var>.
</ol>

<p>To <dfn id="concept-element-attributes-change" title="concept-element-attributes-change">change</dfn> an
<a href="#concept-attribute" title="concept-attribute">attribute</a> <var>attribute</var>
from an <a href="#concept-element" title="concept-element">element</a> <var>element</var>
to <var>value</var>, run these steps:

<ol>
 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code>attributes</code>"
 for <var>element</var> with name <var>attribute</var>'s
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>, namespace
 <var>attribute</var>'s
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>, and oldValue
 <var>attribute</var>'s
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a>.

 <li><p>Set <var>attribute</var>'s
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> to <var>value</var>.

 <li><p>An <a href="#attribute-is-set">attribute is set</a> and an
 <a href="#attribute-is-changed">attribute is changed</a>.
</ol>

<p>To <dfn id="concept-element-attributes-append" title="concept-element-attributes-append">append</dfn> an
<a href="#concept-attribute" title="concept-attribute">attribute</a> <var>attribute</var> to
an <a href="#concept-element" title="concept-element">element</a> <var>element</var>,
run these steps:

<ol>
 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code>attributes</code>"
 for <var>element</var> with name <var>attribute</var>'s
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>, namespace
 <var>attribute</var>'s
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>, and oldValue
 null.

 <li><p>Append the <var>attribute</var> to the <var>element</var>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.

 <li><p>An <a href="#attribute-is-set">attribute is set</a> and an
 <a href="#attribute-is-added">attribute is added</a>.
</ol>

<p>To <dfn id="concept-element-attributes-remove" title="concept-element-attributes-remove">remove</dfn> an
<a href="#concept-attribute" title="concept-attribute">attribute</a> <var>attribute</var>
from an <a href="#concept-element" title="concept-element">element</a> <var>element</var>,
run these steps:

<ol>
 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code>attributes</code>"
 for <var>element</var> with name <var>attribute</var>'s
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>, namespace
 <var>attribute</var>'s
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>, and oldValue
 <var>attribute</var>'s
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a>.

 <li><p>Remove <var>attribute</var> from the
 <var>element</var>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>.

 <li><p>An <a href="#attribute-is-removed">attribute is removed</a>.
</ol>

<hr>

<p><a href="#concept-element" title="concept-element">Elements</a> can have an associated
<dfn id="concept-id" title="concept-id">unique identifier (ID)</dfn> and have an associated
<code><a href="#domtokenlist">DOMTokenList</a></code> object. The <code><a href="#domtokenlist">DOMTokenList</a></code> object's
associated <a href="#concept-attribute" title="concept-attribute">attribute</a>'s
<a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
<code>class</code> and its associated ordered set of tokens is called
the <a href="#concept-element" title="concept-element">element</a>'s
<dfn id="concept-class" title="concept-class">classes</dfn>.

<p class="note">Note: Historically <a href="#concept-element" title="concept-element">elements</a> could
have multiple identifiers e.g. by using the HTML <code>id</code>
<a href="#concept-attribute" title="concept-attribute">attribute</a> and a DTD. This specification
makes <a href="#concept-id" title="concept-id">ID</a> a concept of the DOM and allows for
only one per <a href="#concept-element" title="concept-element">element</a>, given by an
<a href="#concept-named-attribute" title="concept-named-attribute"><code>id</code> attribute</a>.

<p>Either when an <a href="#concept-element" title="concept-element">element</a> is created that
<a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
<a href="#concept-named-attribute" title="concept-named-attribute"><code>id</code> attribute</a> whose
<a href="#concept-attribute-value" title="concept-attribute-value">value</a> is not the empty string or
when an <a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-named-attribute" title="concept-named-attribute"><code>id</code> attribute</a> is
<a href="#attribute-is-set" title="attribute is set">set</a> to a
<a href="#concept-attribute-value" title="concept-attribute-value">value</a> other than the empty
string, set the <a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-id" title="concept-id">ID</a> to the new
<a href="#concept-attribute-value" title="concept-attribute-value">value</a>.

<p>When an <a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-named-attribute" title="concept-named-attribute"><code>id</code> attribute</a> is
<a href="#attribute-is-removed" title="attribute is removed">removed</a> or
<a href="#attribute-is-set" title="attribute is set">set</a> to the empty string, unset the
<a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-id" title="concept-id">ID</a>.

<p>Either when an <a href="#concept-element" title="concept-element">element</a> is created that
<a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> a
<a href="#concept-named-attribute" title="concept-named-attribute"><code>class</code> attribute</a> or
when an <a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-named-attribute" title="concept-named-attribute"><code>class</code> attribute</a> is
<a href="#attribute-is-set" title="attribute is set">set</a>, set the
<a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-class" title="concept-class">classes</a> to the new
<a href="#concept-attribute-value" title="concept-attribute-value">value</a>,
<a href="#concept-ordered-set-parser" title="concept-ordered-set-parser">parsed</a>.

<p>When an <a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-named-attribute" title="concept-named-attribute"><code>class</code> attribute</a> is
<a href="#attribute-is-removed" title="attribute is removed">removed</a>, set the
<a href="#concept-element" title="concept-element">element</a>'s
<a href="#concept-class" title="concept-class">classes</a> to the empty set.

<p class="note">Note: While this specification defines user agent processing
requirements for <code>id</code> and <code>class</code>
<a href="#concept-attribute" title="concept-attribute">attributes</a> on any
<a href="#concept-element" title="concept-element">element</a>, it makes no claims as to whether
using them is conforming or not.

<hr>

<p>A <a href="#concept-node" title="concept-node">node</a>'s
<a href="#concept-tree-parent" title="concept-tree-parent">parent</a> of type
<code><a href="#element">Element</a></code> is known as a <dfn id="parent-element">parent element</dfn>. If the
<a href="#concept-node" title="concept-node">node</a> has a
<a href="#concept-tree-parent" title="concept-tree-parent">parent</a> of a different type, its
<a href="#parent-element">parent element</a> is null.</p>

<p>The <dfn id="document-element">document element</dfn> of a
<a href="#concept-document" title="concept-document">document</a> is the
<a href="#concept-element" title="concept-element">element</a> whose
<a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is that
<a href="#concept-document" title="concept-document">document</a>, if it exists, and null otherwise.

<p class="note">Note: Per the <a href="#concept-node-tree" title="concept-node-tree">node tree</a>
constraints, there can only be one such
<a href="#concept-element" title="concept-element">element</a>.

<p>When an <a href="#concept-element" title="concept-element">element</a> or one of its
<a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestors</a> is the
<a href="#document-element">document element</a>, it is <dfn id="in-a-document">in a document</dfn>.

<hr>

<dl class="domintro">
 <dt><var>namespace</var> = <var>element</var> . <code title="dom-Element-namespaceURI"><a href="#dom-element-namespaceuri">namespaceURI</a></code>
 <dd><p>Returns the <a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>.

 <dt><var>prefix</var> = <var>element</var> . <code title="dom-Element-prefix"><a href="#dom-element-prefix">prefix</a></code>
 <dd><p>Returns the
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>.

 <dt><var>localName</var> = <var>element</var> . <code title="dom-Element-localName"><a href="#dom-element-localname">localName</a></code>
 <dd><p>Returns the
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>.

 <dt><var>qualifiedName</var> = <var>element</var> . <code title="dom-Element-tagName"><a href="#dom-element-tagname">tagName</a></code>
 <dd><p>If
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> is not
 null, returns the concatenation of
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>,
 "<code>:</code>", and
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>. Otherwise it
 returns the <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>.
 (The return value is uppercased in an <a href="#html-document">HTML document</a>.)
</dl>

<p>The <dfn id="dom-element-namespaceuri" title="dom-Element-namespaceURI"><code>namespaceURI</code></dfn>
attribute must return the <a href="#context-object">context object</a>'s
<a href="#concept-element-namespace" title="concept-element-namespace">namespace</a>.

<p>The <dfn id="dom-element-prefix" title="dom-Element-prefix"><code>prefix</code></dfn> attribute must return the <a href="#context-object">context object</a>'s
<a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>.

<p>The <dfn id="dom-element-localname" title="dom-Element-localName"><code>localName</code></dfn>
attribute must return the <a href="#context-object">context object</a>'s
<a href="#concept-element-local-name" title="concept-element-local-name">local name</a>.

<p>The <dfn id="dom-element-tagname" title="dom-Element-tagName"><code>tagName</code></dfn> attribute
must run these steps:
<ol>
 <li><p>If <a href="#context-object">context object</a>'s
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a> is not
 null, let <var>qualified name</var> be its
 <a href="#concept-element-namespace-prefix" title="concept-element-namespace-prefix">namespace prefix</a>, followed
 by a "<code>:</code>" (U+003A), followed by its
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>. Otherwise, let
 <var>qualified name</var> be its
 <a href="#concept-element-local-name" title="concept-element-local-name">local name</a>.

 <li><p>If the <a href="#context-object">context object</a> is in the <a href="#html-namespace">HTML namespace</a> and
 its <a href="#concept-node-document" title="concept-node-document">node document</a> is an
 <a href="#html-document">HTML document</a>, let <var>qualified name</var> be
 <a href="#converted-to-ascii-uppercase">converted to ASCII uppercase</a>.

 <li><p>Return <var>qualified name</var>.
</ol>

<hr>

<!--
 XXX This section argues for generic get/set attribute algorithms; might
 need more text for DOMTokenList explaining various reflecting conditions.
-->

<p>Some IDL attributes are defined to <dfn id="concept-reflect" title="concept-reflect">reflect</dfn> a
particular content attribute of a given name. This means that on getting, these
steps must be run:

<ol>
 <li><p><a href="#concept-element-attributes-get" title="concept-element-attributes-get">Get an attribute</a>
 for the <a href="#context-object">context object</a> using content attribute's name and let
 <var>value</var> be the result.

 <li><p>If <var>value</var> is null, return the empty string.

 <li><p>Return <var>value</var>.
</ol>

<p>On setting,
<a href="#concept-element-attributes-set" title="concept-element-attributes-set">set an attribute</a> for the
<a href="#context-object">context object</a> using the name of the attribute and the given
value.

<p>The <dfn id="dom-element-id" title="dom-Element-id"><code>id</code></dfn> attribute must
<a href="#concept-reflect" title="concept-reflect">reflect</a> the "<code>id</code>"
content attribute.

<p>The <dfn id="dom-element-classname" title="dom-Element-className"><code>className</code></dfn>
attribute must <a href="#concept-reflect" title="concept-reflect">reflect</a> the
"<code>class</code>" content attribute.

<p>The <dfn id="dom-element-classlist" title="dom-Element-classList"><code>classList</code></dfn>
attribute must return the associated <code><a href="#domtokenlist">DOMTokenList</a></code> object
representing the <a href="#context-object">context object</a>'s
<a href="#concept-class" title="concept-class">classes</a>.

<hr>

<!-- all members in this subsection are affected by AttrExodus -->

<p>The <dfn id="dom-element-attributes" title="dom-Element-attributes"><code>attributes</code></dfn>
attribute must return a <code><a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1780488922">NamedNodeMap</a></code>.

<p>The <dfn id="dom-element-getattribute" title="dom-Element-getAttribute"><code>getAttribute(<var>name</var>)</code></dfn> method must run these steps:
<ol>
 <li><p>If the <a href="#context-object">context object</a> is in the
 <a href="#html-namespace">HTML namespace</a> and its
 <a href="#concept-node-document" title="concept-node-document">node document</a> is an
 <a href="#html-document">HTML document</a>, let <var>name</var> be
 <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.

 <li><p>Return the <a href="#concept-attribute-value" title="concept-attribute-value">value</a> of the
 first <a href="#concept-attribute" title="concept-attribute">attribute</a> in the
 <a href="#context-object">context object</a>'s
 <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a> whose
 <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is
 <var>name</var>, and null otherwise.
</ol>

<p>The
<dfn id="dom-element-getattributens" title="dom-Element-getAttributeNS"><code>getAttributeNS(<var>namespace</var>, <var>localName</var>)</code></dfn>
method must return the following steps:
<ol>
  <li><p>If <var>namespace</var> is the empty string, set it to null.

  <li><p>Return
  <a href="#concept-element-attributes-get" title="concept-element-attributes-get">getting an attribute</a> for
  the <a href="#context-object">context object</a> using <var>localName</var> and
  <var>namespace</var>.
</ol>

<p>The
<dfn id="dom-element-setattribute" title="dom-Element-setAttribute"><code>setAttribute(<var>name</var>, <var>value</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>name</var> does not match the
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production in XML,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception.

 <li><p>If the <a href="#context-object">context object</a> is in the <a href="#html-namespace">HTML namespace</a>
 and its <a href="#concept-node-document" title="concept-node-document">node document</a> is an
 <a href="#html-document">HTML document</a>, let <var>name</var> be
 <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.

 <li><p>Let <var>attribute</var> be the
 first <a href="#concept-attribute" title="concept-attribute">attribute</a> in the
 <a href="#context-object">context object</a>'s <a href="#concept-element-attribute" title="concept-element-attribute">attribute list</a>
 whose <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is
 <var>name</var>, or null if there is no such
 <a href="#concept-attribute" title="concept-attribute">attribute</a>.

 <li><p>If <var>attribute</var> is null, create an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
 <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
 <var>name</var> and
 <a href="#concept-attribute-value" title="concept-attribute-value">value</a> is <var>value</var>,
 and then <a href="#concept-element-attributes-append" title="concept-element-attributes-append">append</a> this
 <a href="#concept-attribute" title="concept-attribute">attribute</a> to the
 <a href="#context-object">context object</a> and terminate these steps.

 <li><p><a href="#concept-element-attributes-change" title="concept-element-attributes-change">Change</a>
 <var>attribute</var> from <a href="#context-object">context object</a> to
 <var>value</var>.
</ol>

<p>The
<dfn id="dom-element-setattributens" title="dom-Element-setAttributeNS"><code>setAttributeNS(<var>namespace</var>, <var>name</var>, <var>value</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>namespace</var> is the empty string, set it to null.

 <li><p>If <var>name</var> does not match the
 <code class="external" data-anolis-spec="xml"><a href="http://www.w3.org/TR/xml/#NT-Name">Name</a></code> production in XML,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#invalidcharactererror">InvalidCharacterError</a></code>" exception.

 <li><p>If <var>name</var> does not match the
 <code class="external" data-anolis-spec="xmlns"><a href="http://www.w3.org/TR/xml-names/#NT-QName">QName</a></code> production in Namespaces in XML,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p>If <var>name</var> contains a "<code>:</code>" (U+003E),
 then split the string on it and let <var>prefix</var> be the part
 before and <var>localName</var> the part after. Otherwise, let
 <var>prefix</var> be null and <var>localName</var> be
 <var>name</var>.

 <li><p>If <var>prefix</var> is not null and
 <var>namespace</var> is null, <a href="#dfn-throw" title="concept-throw">throw</a>
 a "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p>If <var>prefix</var> is "<code>xml</code>" and
 <var>namespace</var> is not the <a href="#xml-namespace">XML namespace</a>,
 <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p>If <var>name</var> or <var>prefix</var> is
 "<code>xmlns</code>" and <var>namespace</var> is not the
 <a href="#xmlns-namespace">XMLNS namespace</a>, <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p>If <var>namespace</var> is the <a href="#xmlns-namespace">XMLNS namespace</a>
 and neither <var>name</var> nor <var>prefix</var> is
 "<code>xmlns</code>", <a href="#dfn-throw" title="concept-throw">throw</a> a
 "<code><a href="#namespaceerror">NamespaceError</a></code>" exception.

 <li><p><a href="#concept-element-attributes-set" title="concept-element-attributes-set">Set an attribute</a>
 for the <a href="#context-object">context object</a> using
 <var>localName</var>, <var>value</var>, and also
 <var>name</var>, <var>prefix</var>, and
 <var>namespace</var>.
</ol>

<p>The
<dfn id="dom-element-removeattribute" title="dom-Element-removeAttribute"><code>removeAttribute(<var>name</var>)</code></dfn>
method must run these steps:
<ol>
 <li><p>If the <a href="#context-object">context object</a> is in the
 <a href="#html-namespace">HTML namespace</a> and its
 <a href="#concept-node-document" title="concept-node-document">node document</a> is an
 <a href="#html-document">HTML document</a>, let <var>name</var> be
 <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.

 <li><p><a href="#concept-element-attributes-remove" title="concept-element-attributes-remove">Remove</a> the
 first <a href="#concept-attribute" title="concept-attribute">attribute</a> from the
 <a href="#context-object">context object</a> whose
 <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is <var>name</var>,
 if any.
</ol>

<p>The
<dfn id="dom-element-removeattributens" title="dom-Element-removeAttributeNS"><code>removeAttributeNS(<var>namespace</var>, <var>localName</var>)</code></dfn>
method must return the following steps:
<ol>
  <li><p>If <var>namespace</var> is the empty string, set it to null.

  <li><p><a href="#concept-element-attributes-remove" title="concept-element-attributes-remove">Remove</a> the
  <a href="#concept-attribute" title="concept-attribute">attribute</a> from the
  <a href="#context-object">context object</a> whose
  <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is
  <var>namespace</var> and
  <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
  <var>localName</var>, if any.
</ol>

<p>The
<dfn id="dom-element-hasattribute" title="dom-Element-hasAttribute"><code>hasAttribute(<var>name</var>)</code></dfn>
method must run these steps:
<ol>
 <li><p>If the <a href="#context-object">context object</a> is in the
 <a href="#html-namespace">HTML namespace</a> and its
 <a href="#concept-node-document" title="concept-node-document">node document</a> is an
 <a href="#html-document">HTML document</a>, let <var>name</var> be
 <a href="#converted-to-ascii-lowercase">converted to ASCII lowercase</a>.

 <li><p>Return true if the <a href="#context-object">context object</a>
 <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
 <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is
 <var>name</var>, and false otherwise.
</ol>

<p>The
<dfn id="dom-element-hasattributens" title="dom-Element-hasAttributeNS"><code>hasAttributeNS(<var>namespace</var>, <var>localName</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>namespace</var> is the empty string, set it to null.

 <li><p>Return true if the <a href="#context-object">context object</a>
 <a href="#concept-element-attribute-has" title="concept-element-attribute-has">has</a> an
 <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
 <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> is <var>namespace</var>
 and <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
 <var>localName</var>, and false otherwise.
</ol>

<!--<dfn title=dom-Element-getAttributeNode>getAttributeNode</dfn>: when the
Element.getAttributeNode() method is invoked on an HTML element, the name
argument must be converted to ASCII lowercase before the element's attributes
are examined. (In HTML documents.) -->

<!-- <dfn title=dom-Element-setAttributeNode>setAttributeNode</dfn>: when an
Attr node is set on an HTML element using Element.setAttributeNode(), it must
have its name converted to ASCII lowercase before the element is affected.
(In HTML documents.) -->

<hr>

<p>The
<dfn id="dom-element-getelementsbytagname" title="dom-Element-getElementsByTagName"><code>getElementsByTagName(<var>localName</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbytagname" title="concept-getElementsByTagName">list of elements with local name <var>localName</var></a>
for the <a href="#context-object">context object</a>.

<p>The
<dfn id="dom-element-getelementsbytagnamens" title="dom-Element-getElementsByTagNameNS"><code>getElementsByTagNameNS(<var>namespace</var>, <var>localName</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbytagnamens" title="concept-getElementsByTagNameNS">list of elements with namespace <var>namespace</var> and local name <var>localName</var></a>
for the <a href="#context-object">context object</a>.

<p>The
<dfn id="dom-element-getelementsbyclassname" title="dom-Element-getElementsByClassName"><code>getElementsByClassName(<var>classNames</var>)</code></dfn>
method must return the
<a href="#concept-getelementsbyclassname" title="concept-getElementsByClassName">list of elements with class names <var>classNames</var></a>
for the <a href="#context-object">context object</a>.

<h4 id="interface-attr">Interface <code><a href="#attr">Attr</a></code></h4>
<pre class='idl'>
[Exposed=Window]
interface Attr {
  readonly attribute DOMString? namespaceURI;
  readonly attribute DOMString? prefix;
  readonly attribute DOMString localName;
  readonly attribute DOMString name;
           attribute DOMString value;

  readonly attribute boolean specified; // useless; always returns true
};
</pre>

<p><code><a href="#attr">Attr</a></code> objects are simply known as
<dfn id="concept-attribute" title="concept-attribute">attributes</dfn>. They are sometimes referred
to as <em>content attributes</em> to avoid confusion with IDL attributes.

<p><a href="#concept-attribute" title="concept-attribute">Attributes</a> have a
<dfn id="concept-attribute-namespace" title="concept-attribute-namespace">namespace</dfn> (null or a non-empty string),
<dfn id="concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</dfn> (null or a non-empty string),
<dfn id="concept-attribute-local-name" title="concept-attribute-local-name">local name</dfn> (a non-empty string),
<dfn id="concept-attribute-name" title="concept-attribute-name">name</dfn> (a non-empty string),
<dfn id="concept-attribute-value" title="concept-attribute-value">value</dfn> (a string), and
<dfn id="concept-attribute-element" title="concept-attribute-element">element</dfn> (null or an
<a href="#concept-element" title="concept-element">element</a>).

<p class="note">Note: If designed today they would just have a name and value.

<p>When an <a href="#concept-attribute" title="concept-attribute">attribute</a> is created, its
<a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> and
<a href="#concept-attribute-value" title="concept-attribute-value">value</a> are always given. Unless
explicitly given when an <a href="#concept-attribute" title="concept-attribute">attribute</a> is
created, its <a href="#concept-attribute-name" title="concept-attribute-name">name</a> is
identical to its <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>,
and its <a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> and
<a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a> are
null.

<p>An
<dfn id="concept-named-attribute" title="concept-named-attribute"><code><var>A</var></code> attribute</dfn>
is an <a href="#concept-attribute" title="concept-attribute">attribute</a> whose
<a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a> is
<code><var>A</var></code> and whose
<a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a> and
<a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a> are
null.

<p>The <dfn id="dom-attr-namespaceuri" title="dom-Attr-namespaceURI"><code>namespaceURI</code></dfn>
attribute must return the
<a href="#concept-attribute-namespace" title="concept-attribute-namespace">namespace</a>.

<p>The <dfn id="dom-attr-prefix" title="dom-Attr-prefix"><code>prefix</code></dfn> attribute must
return the
<a href="#concept-attribute-namespace-prefix" title="concept-attribute-namespace-prefix">namespace prefix</a>.

<p>The <dfn id="dom-attr-localname" title="dom-Attr-localName"><code>localName</code></dfn> attribute
must return the <a href="#concept-attribute-local-name" title="concept-attribute-local-name">local name</a>.

<p>The <dfn id="dom-attr-name" title="dom-Attr-name"><code>name</code></dfn> attribute's getter must return the
<a href="#concept-attribute-name" title="concept-attribute-name">name</a>.

<p>The <dfn id="dom-attr-value" title="dom-Attr-value"><code>value</code></dfn> attribute's getter and
<dfn id="dom-attr-textcontent" title="dom-Attr-textContent"><code>textContent</code></dfn> attribute's getter must
both return the <a href="#concept-attribute-value" title="concept-attribute-value">value</a>.

<p>Setting the <code title="dom-Attr-value"><a href="#dom-attr-value">value</a></code> attribute must
<a href="#concept-element-attributes-change" title="concept-element-attributes-change">change</a>
<a href="#concept-attribute-value" title="concept-attribute-value">value</a> to the new value.

<p>The <code title="dom-Attr-value"><a href="#dom-attr-value">value</a></code> attribute's setter and
<code title="dom-Attr-textContent"><a href="#dom-attr-textcontent">textContent</a></code> attribute's setter must both run these
steps:

<ol>
 <li><p>If <a href="#context-object">context object</a>'s
 <a href="#concept-attribute-element" title="concept-attribute-element">element</a> is null, set
 <a href="#context-object">context object</a>'s <a href="#concept-attribute-value" title="concept-attribute-value">value</a> to the
 given value.
<li>Otherwise, <a data-link-type="dfn" href="#concept-element-attributes-change">change</a> the <a data-link-type="dfn" href="#context-object">context object</a> from <a data-link-type="dfn" href="#context-object">context object</a>’s <a data-link-type="dfn" href="#concept-attribute-element">element</a> to the given value.
   </li></ol>
   <p class="note no-backref" role="note">Unlike <a data-link-type="dfn" href="#concept-node">node</a>’s <code class="idl"><a data-link-type="idl" href="#dom-node-textcontent">textContent</a></code>, no special null
handling is required. </p>

<p>The <dfn id="dom-attr-specified" title="dom-Attr-specified"><code>specified</code></dfn> attribute must return
true.

<h3 id="nodes-interface-characterdata">Interface <code><a href="#characterdata">CharacterData</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface CharacterData : Node {
  [TreatNullAs=EmptyString] attribute DOMString data;
  readonly attribute unsigned long length;
  DOMString substringData(unsigned long offset, unsigned long count);
  void appendData(DOMString data);
  void insertData(unsigned long offset, DOMString data);
  void deleteData(unsigned long offset, unsigned long count);
  void replaceData(unsigned long offset, unsigned long count, DOMString data);
};
</pre>

<p class="note">Note: <code><a href="#characterdata">CharacterData</a></code> is an abstract interface and does
not exist as <a href="#concept-node" title="concept-node">node</a>. It is used by
<code><a href="#text">Text</a></code>, <code><a href="#comment">Comment</a></code>, and
<code><a href="#processinginstruction">ProcessingInstruction</a></code> <a href="#concept-node" title="concept-node">nodes</a>.

<p>Each <a href="#concept-node" title="concept-node">node</a> inheriting from the
<code><a href="#characterdata">CharacterData</a></code> interface has an associated mutable string
called <dfn id="concept-cd-data" title="concept-CD-data">data</dfn>.

<p>To <dfn id="concept-cd-replace" title="concept-CD-replace">replace data</dfn> of node
<var>node</var> with offset <var>offset</var>, count
<var>count</var>, and data <var>data</var>, run these steps:</p>

<ol>
 <li><p>Let <var>length</var> be <var>node</var>'s
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value.

 <li><p>If <var>offset</var> is greater than <var>length</var>,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#indexsizeerror">IndexSizeError</a></code>" exception.

 <li><p>If <var>offset</var> plus <var>count</var> is greater
 than <var>length</var> let <var>count</var> be
 <var>length</var> minus <var>offset</var>.

 <li><p><a href="#queue-a-mutation-record">Queue a mutation record</a> of "<code><a href="#characterdata">characterData</a></code>"
 for <var>node</var> with oldValue <var>node</var>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a>.

 <li><p>Insert <var>data</var> into <var>node</var>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a> after <var>offset</var>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a>.

 <li><p>Let <var>delete offset</var> be <var>offset</var> plus
 the number of
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> in
 <var>data</var>.

 <li><p>Starting from <var>delete offset</var>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a>, remove
 <var>count</var>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> from
 <var>node</var>'s <a href="#concept-cd-data" title="concept-CD-data">data</a>.

 <!-- ranges -->
 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
 <var>node</var> and
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater than
 <var>offset</var> but less than or equal to <var>offset</var>
 plus <var>count</var>, set its
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> to
 <var>offset</var>.

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
 <var>node</var> and
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
 <var>offset</var> but less than or equal to <var>offset</var>
 plus <var>count</var>, set its
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> to
 <var>offset</var>.

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
 <var>node</var> and
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater than
 <var>offset</var> plus <var>count</var>, increase its
 <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> by the number of
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> in
 <var>data</var>, then decrease it by <var>count</var>.

 <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
 <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
 <var>node</var> and
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
 <var>offset</var> plus <var>count</var>, increase its
 <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> by the number of
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> in
 <var>data</var>, then decrease it by <var>count</var>.
</ol>

<p>To <dfn id="concept-cd-substring" title="concept-CD-substring">substring data</dfn> with node
<var>node</var>, offset <var>offset</var>, and count
<var>count</var>, run these steps:

<ol>
 <li><p>Let <var>length</var> be <var>node</var>'s
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value.

 <li><p>If <var>offset</var> is greater than <var>length</var>,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#indexsizeerror">IndexSizeError</a></code>" exception.

 <li><p>If <var>offset</var> plus <var>count</var> is
 greater than <var>length</var>, return a string whose value is the
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> from the
 <var>offset</var><sup>th</sup>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit">code unit</a> to the end of
 <var>node</var>'s <a href="#concept-cd-data" title="concept-CD-data">data</a>, and then
 terminate these steps.

 <li><p>Return a string whose value is the
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> from the
 <var>offset</var><sup>th</sup>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit">code unit</a> to the
 <var>offset</var>+<var>count</var><sup>th</sup>
 <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit">code unit</a> in <var>node</var>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a>.
</ol>

<p>The <dfn id="dom-characterdata-data" title="dom-CharacterData-data"><code>data</code></dfn> attribute
must return <a href="#concept-cd-data" title="concept-CD-data">data</a>, and on setting, must
<a href="#concept-cd-replace" title="concept-CD-replace">replace data</a> with node
<a href="#context-object">context object</a> offset 0, count
<code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value, and data
new value.

<p>The <dfn id="dom-characterdata-length" title="dom-CharacterData-length"><code>length</code></dfn>
attribute must return the number of
<a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-code-unit" title="code unit">code units</a> in
<a href="#concept-cd-data" title="concept-CD-data">data</a>.

<p>The
<dfn id="dom-characterdata-substringdata" title="dom-CharacterData-substringData"><code>substringData(<var>offset</var>, <var>count</var>)</code></dfn>
method must <a href="#concept-cd-substring" title="concept-CD-substring">substring data</a> with node
<a href="#context-object">context object</a>, offset <var>offset</var>, and count
<var>count</var>.

<p>The
<dfn id="dom-characterdata-appenddata" title="dom-CharacterData-appendData"><code>appendData(<var>data</var>)</code></dfn>
method must <a href="#concept-cd-replace" title="concept-CD-replace">replace data</a> with node
<a href="#context-object">context object</a>, offset
<code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value, count 0,
and data <var>data</var>.

<p>The
<dfn id="dom-characterdata-insertdata" title="dom-CharacterData-insertData"><code>insertData(<var>offset</var>, <var>data</var>)</code></dfn>
method must <a href="#concept-cd-replace" title="concept-CD-replace">replace data</a> with node
<a href="#context-object">context object</a>, offset <var>offset</var>, count 0, and
data <var>data</var>.

<p>The
<dfn id="dom-characterdata-deletedata" title="dom-CharacterData-deleteData"><code>deleteData(<var>offset</var>, <var>count</var>)</code></dfn>
method must <a href="#concept-cd-replace" title="concept-CD-replace">replace data</a> with node
<a href="#context-object">context object</a>, offset <var>offset</var>, count
<var>count</var>, and data the empty string.

<p>The
<dfn id="dom-characterdata-replacedata" title="dom-CharacterData-replaceData"><code>replaceData(<var>offset</var>, <var>count</var>, <var>data</var>)</code></dfn>
method must <a href="#concept-cd-replace" title="concept-CD-replace">replace data</a> with node
<a href="#context-object">context object</a>, offset <var>offset</var>, count
<var>count</var>, and data <var>data</var>.

<h3 id="nodes-interface-text">Interface <code><a href="#text">Text</a></code></h3>

<pre class='idl'>
[Constructor(optional DOMString data = ""),
 Exposed=Window]
interface Text : CharacterData {
  [NewObject] Text splitText(unsigned long offset);
  readonly attribute DOMString wholeText;
};
</pre>

<dl class="domintro">
 <dt><code><var>text</var> = new <a href="#dom-documentfragment" title="dom-DocumentFragment">Text</a>([<var>data</var> = ""])</code>
 <dd><p>Returns a new <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a> whose
 <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var>.

 <dt><code><var>text</var> . <a href="#dom-text-splittext" title="dom-Text-splitText">splitText</a>(<var>offset</var>)</code>
 <dd><p>Splits <a href="#concept-cd-data" title="concept-CD-data">data</a> at the given
 <var>offset</var> and returns the remainder as <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a>.

 <dt><code><var>text</var> . <a href="#dom-text-wholetext" title="dom-Text-wholeText">wholeText</a></code>
 <dd><p>Returns the combined <a href="#concept-cd-data" title="concept-CD-data">data</a> of all direct
 <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a>
 <a href="#concept-tree-sibling" title="concept-tree-sibling">siblings</a>.
</dl>

<p>The <dfn id="dom-text" title="dom-Text"><code>Text(<var>data</var>)</code></dfn> constructor
must return a new <code><a href="#text">Text</a></code> <a href="#concept-node" title="concept-node">node</a> whose
<a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var> and
<a href="#concept-node-document" title="concept-node-document">node document</a> is the global object's associated
<a href="#concept-document" title="concept-document">document</a>.

<p>To <dfn id="concept-text-split" title="concept-Text-split">split</dfn> a <code><a href="#text">Text</a></code>
<a href="#concept-node" title="concept-node">node</a> <var>node</var> with offset
<var>offset</var>, run these steps:

<ol>
 <li><p>Let <var>length</var> be <var>node</var>'s
 <code title="dom-CharacterData-length"><a href="#dom-characterdata-length">length</a></code> attribute value.

 <li><p>If <var>offset</var> is greater than <var>length</var>,
 <a href="#dfn-throw" title="concept-throw">throw</a> an
 "<code><a href="#indexsizeerror">IndexSizeError</a></code>" exception.

 <li><p>Let <var>count</var> be <var>length</var> minus
 <var>offset</var>.

 <li><p>Let <var>new data</var> be the result of
 <a href="#concept-cd-substring" title="concept-CD-substring">substringing data</a> with node
 <var>node</var>, offset <var>offset</var>, and count
 <var>count</var>.

 <li><p>Let <var>new node</var> be a new <code><a href="#text">Text</a></code>
 <a href="#concept-node" title="concept-node">node</a>, with the same
 <a href="#concept-node-document" title="concept-node-document">node document</a> as
 <var>node</var>. Set <var>new node</var>'s
 <a href="#concept-cd-data" title="concept-CD-data">data</a> to <var>new data</var>.

 <li><p>Let <var>parent</var> be <var>node</var>'s
 <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

 <li>
  <p>If <var>parent</var> is not null, run these substeps:

  <ol>
   <li><p><a href="#concept-node-insert" title="concept-node-insert">Insert</a>
   <var>new node</var> into <var>parent</var> before
   <var>node</var>'s
   <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>.
   <!-- Do this before we replace data, so that the data replacement won't
   mutate ranges prematurely:
   https://www.w3.org/Bugs/Public/show_bug.cgi?id=15325 -->

   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
   <var>node</var> and
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater than
   <var>offset</var>, set its
   <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> to
   <var>new node</var> and decrease its
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> by
   <var>offset</var>.

   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
   <var>node</var> and
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
   <var>offset</var>, set its
   <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> to
   <var>new node</var> and decrease its
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> by
   <var>offset</var>.

   <!-- This shit is complicated:
        https://www.w3.org/Bugs/Public/show_bug.cgi?id=19968 -->
   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
   <var>parent</var> and
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is equal to
   the <a href="#concept-tree-index" title="concept-tree-index">index</a> of
   <var>node</var> + 1, increase its
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> by one.

   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
   <var>parent</var> and
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is equal to
   the <a href="#concept-tree-index" title="concept-tree-index">index</a> of
   <var>node</var> + 1, increase its
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> by one.
  </ol>

 <li><p><a href="#concept-cd-replace" title="concept-CD-replace">Replace data</a> with node
 <var>node</var>, offset <var>offset</var>, count
 <var>count</var>, and data the empty string.

 <li>
  <p>If <var>parent</var> is null, run these substeps:</p>

  <ol>
   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-start-node" title="concept-range-start-node">start node</a> is
   <var>node</var> and
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> is greater
   than <var>offset</var>, set its
   <a href="#concept-range-start-offset" title="concept-range-start-offset">start offset</a> to
   <var>offset</var>.

   <li><p>For each <a href="#concept-range" title="concept-range">range</a> whose
   <a href="#concept-range-end-node" title="concept-range-end-node">end node</a> is
   <var>node</var> and
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> is greater than
   <var>offset</var>, set its
   <a href="#concept-range-end-offset" title="concept-range-end-offset">end offset</a> to
   <var>offset</var>.
  </ol>

 <li><p>Return <var>new node</var>.
</ol>

<p>The
<dfn id="dom-text-splittext" title="dom-Text-splitText"><code>splitText(<var>offset</var>)</code></dfn>
method must <a href="#concept-text-split" title="concept-Text-split">split</a> the
<a href="#context-object">context object</a> with offset <var>offset</var>.


<p>The <dfn id="contiguous-text-nodes">contiguous <code>Text</code> nodes</dfn> of a node are the node
itself, the
<a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a>
<code><a href="#text">Text</a></code> node (if any) and its
<a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a>, and the
<a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a> <code><a href="#text">Text</a></code>
node (if any) and its <a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a>,
avoiding any duplicates.

<p>The <dfn id="dom-text-wholetext" title="dom-Text-wholeText"><code>wholeText</code></dfn>
attribute must return a concatenation of the
<a href="#concept-cd-data" title="concept-CD-data">data</a> of the
<a href="#contiguous-text-nodes">contiguous <code>Text</code> nodes</a> of the
<a href="#context-object">context object</a>, in
<a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

<h3 id="nodes-interface-processinginstruction">Interface <code><a href="#processinginstruction">ProcessingInstruction</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface ProcessingInstruction : CharacterData {
  readonly attribute DOMString target;
};
</pre>

<p><code><a href="#processinginstruction">ProcessingInstruction</a></code> <a href="#concept-node" title="concept-node">nodes</a>
have an associated <dfn id="concept-pi-target" title="concept-PI-target">target</dfn>.

<p>The <dfn id="dom-processinginstruction-target" title="dom-ProcessingInstruction-target"><code>target</code></dfn>
attribute must return the <a href="#concept-pi-target" title="concept-PI-target">target</a>.

<h3 id="nodes-interface-comment">Interface <code><a href="#comment">Comment</a></code></h3>

<pre class='idl'>
[Constructor(optional DOMString data = ""),
 Exposed=Window]
interface Comment : CharacterData {
};
</pre>

<dl class="domintro">
 <dt><code><var>comment</var> = new <a href="#dom-comment" title="dom-Comment">Comment</a>([<var>data</var> = ""])</code>
 <dd><p>Returns a new <code><a href="#comment">Comment</a></code> <a href="#concept-node" title="concept-node">node</a> whose
 <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var>.
</dl>

<p>The <dfn id="dom-comment" title="dom-Comment"><code>Comment(<var>data</var>)</code></dfn>
constructor must return a new <code><a href="#comment">Comment</a></code> <a href="#concept-node" title="concept-node">node</a>
whose <a href="#concept-cd-data" title="concept-CD-data">data</a> is <var>data</var> and
<a href="#concept-node-document" title="concept-node-document">node document</a> is the global object's associated
<a href="#concept-document" title="concept-document">document</a>.


</section>
