<section>
<h2 id="traversal">Traversal</h2>

  <code><a href="#nodeiterator">NodeIterator</a></code> and <code><a href="#treewalker">TreeWalker</a></code> objects can be used
to filter and traverse <a href="#concept-node" title="concept-node">node</a>
<a href="#concept-tree" title="concept-tree">trees</a>.

Each <code><a href="#nodeiterator">NodeIterator</a></code> and <code><a href="#treewalker">TreeWalker</a></code> object also
has an associated <dfn id="concept-traversal-root" title="concept-traversal-root">root</dfn>
<a href="#concept-node" title="concept-node">node</a>,
<dfn id="concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</dfn> bitmask, and
<dfn id="concept-traversal-filter" title="concept-traversal-filter">filter</dfn> callback.

To <dfn id="concept-node-filter" title="concept-node-filter">filter</dfn> <var>node</var> run
these steps:

<ol>
  1. Let <var>n</var> be <var>node</var>'s <code title="dom-Node-nodeType"><a href="#dom-node-nodetype">nodeType</a></code> attribute value minus 1. 

  2. If the <var>n</var><sup>th</sup> bit (where 0 is the least significant bit) of <a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> is not set, return <code title="dom-NodeFilter-FILTER_SKIP"><a href="#dom-nodefilter-filter_skip">FILTER_SKIP</a></code>.
  3. Return <var>result</var>.

</ol>

<h3 id="traversal-interface-nodeiterator">Interface <code><a href="#nodeiterator">NodeIterator</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface NodeIterator {
  [SameObject] readonly attribute Node root;
  readonly attribute Node referenceNode;
  readonly attribute boolean pointerBeforeReferenceNode;
  readonly attribute unsigned long whatToShow;
  readonly attribute NodeFilter? filter;

  Node? nextNode();
  Node? previousNode();

  void detach();
};
</pre>

<p class="note">Note: <code><a href="#nodeiterator">NodeIterator</a></code> objects can be created using the
<code title="dom-Document-createNodeIterator"><a href="#dom-document-createnodeiterator">createNodeIterator()</a></code>
method.

<p>Each <code><a href="#nodeiterator">NodeIterator</a></code> object has an associated
<dfn id="iterator-collection">iterator collection</dfn>, which is a
<a href="#concept-collection" title="concept-collection">collection</a> rooted at
<a href="#concept-traversal-root" title="concept-traversal-root">root</a>, whose filter matches any
<a href="#concept-node" title="concept-node">node</a>.

<p>Each <code><a href="#nodeiterator">NodeIterator</a></code> object has these
<a href="#concept-node-remove-ext" title="concept-node-remove-ext">removing steps</a> with <var>oldNode</var>,
<var>oldParent</var>, and <var>oldPreviousSibling</var>:

<ol>
 <li><p>If <var>oldNode</var> is not an
 <a href="#concept-tree-inclusive-ancestor" title="concept-tree-inclusive-ancestor">inclusive ancestor</a> of the
 <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute value,
 terminate these steps.

 <li>
  <p>If the
  <code title="dom-NodeIterator-pointerBeforeReferenceNode"><a href="#dom-nodeiterator-pointerbeforereferencenode">pointerBeforeReferenceNode</a></code>
  attribute value is true, run these substeps:

  <ol>
   <li><p>Let <var>nextSibling</var> be <var>oldPreviousSibling</var>'s
   <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a>, if
   <var>oldPreviousSibling</var> is non-null, and <var>oldParent</var>'s
   <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a> otherwise.

   <li><p>If <var>nextSibling</var> is non-null, set the
   <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute to
   <var>nextSibling</var> and terminate these steps.

   <li><p>Let <var>next</var> be the first <a href="#concept-node" title="concept-node">node</a>
   <a href="#concept-tree-following" title="concept-tree-following">following</a> <var>oldParent</var>.

   <li><p>If <var>next</var> is not an
   <a href="#concept-tree-inclusive-ancestor" title="concept-tree-inclusive-ancestor">inclusive ancestor</a> of
   <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, set the
   <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute to
   <var>next</var> and terminate these steps.

   <li>
    <p>Otherwise, set the
    <code title="dom-NodeIterator-pointerBeforeReferenceNode"><a href="#dom-nodeiterator-pointerbeforereferencenode">pointerBeforeReferenceNode</a></code>
    attribute to false.

    <p class="note">Note: Steps are not terminated here.
  </ol>

 <li><p>Set the <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute
 to first <a href="#concept-node" title="concept-node">node</a>
 <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a> <var>oldPreviousSibling</var>, if
 <var>oldPreviousSibling</var> is non-null, and to <var>oldParent</var> otherwise.
</ol>

<p class="note">Note: As mentioned earlier <code><a href="#nodeiterator">NodeIterator</a></code> objects have an
associated <a href="#concept-traversal-root" title="concept-traversal-root">root</a>
<a href="#concept-node" title="concept-node">node</a>,
<a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> bitmask, and
<a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a> callback as well.

<hr>

<p>The <dfn id="dom-nodeiterator-root" title="dom-NodeIterator-root"><code>root</code></dfn> attribute
must return <a href="#concept-traversal-root" title="concept-traversal-root">root</a>.</p>

<p>The
<dfn id="dom-nodeiterator-referencenode" title="dom-NodeIterator-referenceNode"><code>referenceNode</code></dfn>
and
<dfn id="dom-nodeiterator-pointerbeforereferencenode" title="dom-NodeIterator-pointerBeforeReferenceNode"><code>pointerBeforeReferenceNode</code></dfn>
attributes must return what they were initialized to.</p>

<p>The <dfn id="dom-nodeiterator-whattoshow" title="dom-NodeIterator-whatToShow"><code>whatToShow</code></dfn>
attribute must return
<a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a>.

<p>The <dfn id="dom-nodeiterator-filter" title="dom-NodeIterator-filter"><code>filter</code></dfn>
attribute must return <a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a>.

<p>To <dfn id="concept-nodeiterator-traverse" title="concept-NodeIterator-traverse">traverse</dfn> in direction
<var>direction</var> run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the
 <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute.

 <li><p>Let <var>before node</var> be the value of the
 <code title="dom-NodeIterator-pointerBeforeReferenceNode"><a href="#dom-nodeiterator-pointerbeforereferencenode">pointerBeforeReferenceNode</a></code>
 attribute.

 <li>
  <p>Run these substeps:
  <ol>
   <li>
    <dl class="switch">
     <dt>If direction is next</dt>
     <dd>
      <p>If <var>before node</var> is false, let <var>node</var>
      be the first <a href="#concept-node" title="concept-node">node</a>
      <a href="#concept-tree-following" title="concept-tree-following">following</a>
      <var>node</var> in the <a href="#iterator-collection">iterator collection</a>. If
      there is no such <a href="#concept-node" title="concept-node">node</a> return null.
      <p>If <var>before node</var> is true, set it to false.
     <dt>If direction is previous</dt>
     <dd>
      <p>If <var>before node</var> is true, let <var>node</var>
      be the first <a href="#concept-node" title="concept-node">node</a>
      <a href="#concept-tree-preceding" title="concept-tree-preceding">preceding</a>
      <var>node</var> in the <a href="#iterator-collection">iterator collection</a>. If
      there is no such <a href="#concept-node" title="concept-node">node</a> return null.
      <p>If <var>before node</var> is false, set it to true.
    </dl>
   <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
   <var>node</var> and let <var>result</var> be the return
   value.
   <li>
    <p>If <var>result</var> is
    <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, go to the
    next step in the overall set of steps.
    <p>Otherwise, run these substeps again.
  </ol>
 <li><p>Set the
 <code title="dom-NodeIterator-referenceNode"><a href="#dom-nodeiterator-referencenode">referenceNode</a></code> attribute
 to <var>node</var>, set the
 <code title="dom-NodeIterator-pointerBeforeReferenceNode"><a href="#dom-nodeiterator-pointerbeforereferencenode">pointerBeforeReferenceNode</a></code>
 attribute to <var>before node</var>, and return
 <var>node</var>.
</ol>

<p>The <dfn id="dom-nodeiterator-nextnode" title="dom-NodeIterator-nextNode"><code>nextNode()</code></dfn>
method must <a href="#concept-nodeiterator-traverse" title="concept-NodeIterator-traverse">traverse</a> in
direction next.

<p>The
<dfn id="dom-nodeiterator-previousnode" title="dom-NodeIterator-previousNode"><code>previousNode()</code></dfn>
method must <a href="#concept-nodeiterator-traverse" title="concept-NodeIterator-traverse">traverse</a> in
direction previous.

<p>The <dfn id="dom-nodeiterator-detach" title="dom-NodeIterator-detach"><code>detach()</code></dfn>
method must do nothing. <span class="note">Note: Its functionality (disabling a
<code><a href="#nodeiterator">NodeIterator</a></code> object) was removed, but the method itself is preserved
for compatibility.</span>

<h3 id="traversal-interface-treewalker">Interface <code><a href="#treewalker">TreeWalker</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface TreeWalker {
  [SameObject] readonly attribute Node root;
  readonly attribute unsigned long whatToShow;
  readonly attribute NodeFilter? filter;
           attribute Node currentNode;

  Node? parentNode();
  Node? firstChild();
  Node? lastChild();
  Node? previousSibling();
  Node? nextSibling();
  Node? previousNode();
  Node? nextNode();
};
</pre>

<p class="note">Note: <code><a href="#treewalker">TreeWalker</a></code> objects can be created using the
<code title="dom-Document-createTreeWalker"><a href="#dom-document-createtreewalker">createTreeWalker()</a></code> method.

<p class="note">Note: As mentioned earlier <code><a href="#treewalker">TreeWalker</a></code> objects have an
associated <a href="#concept-traversal-root" title="concept-traversal-root">root</a>
<a href="#concept-node" title="concept-node">node</a>,
<a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> bitmask, and
<a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a> callback.

<p>The <dfn id="dom-treewalker-root" title="dom-TreeWalker-root"><code>root</code></dfn> attribute must
return <a href="#concept-traversal-root" title="concept-traversal-root">root</a>.</p>

<p>The <dfn id="dom-treewalker-whattoshow" title="dom-TreeWalker-whatToShow"><code>whatToShow</code></dfn>
attribute must return
<a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a>.

<p>The <dfn id="dom-treewalker-filter" title="dom-TreeWalker-filter"><code>filter</code></dfn> attribute
must return <a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a>.

<p>The <dfn id="dom-treewalker-currentnode" title="dom-TreeWalker-currentNode"><code>currentNode</code></dfn>
attribute must return what it was initialized to.</p>

<p>Setting the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code>
attribute must set it to the new value.</p>


<p>The <dfn id="dom-treewalker-parentnode" title="dom-TreeWalker-parentNode"><code>parentNode()</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the
 <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute.

 <li>
  <p>While <var>node</var> is not null and is not
  <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, run these substeps:

  <ol>
   <li><p>Let <var>node</var> be <var>node</var>'s
   <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

   <li><p>If <var>node</var> is not null and
   <a href="#concept-node-filter" title="concept-node-filter">filtering</a> <var>node</var>
   returns <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>,
   then set the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code>
   attribute to <var>node</var>, return <var>node</var>.
  </ol>

 <li><p>Return null.
</ol>

<p>To <dfn id="concept-traverse-children" title="concept-traverse-children">traverse children</dfn> of type
<var>type</var>, run these steps:

<ol>
 <li><p>Let <var>node</var> be the value
 of the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>Set <var>node</var> to <var>node</var>'s
 <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a> if
 <var>type</var> is first, and <var>node</var>'s
 <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a> if
 <var>type</var> is last.

 <li>
  <p><dfn id="concept-traverse-children-main" title="concept-traverse-children-main">Main</dfn>:
  While <var>node</var> is not null, run these substeps:

  <ol>
   <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
   <var>node</var> and let <var>result</var> be the return
   value.

   <li><p>If <var>result</var> is
   <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
   the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code>
   attribute to <var>node</var> and return <var>node</var>.

   <li>
    <p>If <var>result</var> is
    <code title="dom-NodeFilter-FILTER_SKIP"><a href="#dom-nodefilter-filter_skip">FILTER_SKIP</a></code>, run these
    subsubsteps:

    <ol>
     <li><p>Let <var>child</var> be <var>node</var>'s
     <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a> if
     <var>type</var> is first, and <var>node</var>'s
     <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a> if
     <var>type</var> is last.

     <li><p>If <var>child</var> is not null, set <var>node</var>
     to <var>child</var> and goto
     <a href="#concept-traverse-children-main" title="concept-traverse-children-main">Main</a>.
    </ol>

   <li>
    <p>While <var>node</var> is not null, run these subsubsteps:

    <ol>
     <li><p>Let <var>sibling</var> be <var>node</var>'s
     <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a> if
     <var>type</var> is first, and <var>node</var>'s
     <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a> if
     <var>type</var> is last.

     <li><p>If <var>sibling</var> is not null, set
     <var>node</var> to <var>sibling</var> and goto
     <a href="#concept-traverse-children-main" title="concept-traverse-children-main">Main</a>.

     <li><p>Let <var>parent</var> be <var>node</var>'s
     <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

     <li><p>If <var>parent</var> is null, <var>parent</var> is
     <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, or
     <var>parent</var> is
     <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute's
     value, return null.

     <li><p>Otherwise, set <var>node</var> to <var>parent</var>.
    </ol>
  </ol>
 <li><p>Return null.
</ol>

<p>The <dfn id="dom-treewalker-firstchild" title="dom-TreeWalker-firstChild"><code>firstChild()</code></dfn>
method must <a href="#concept-traverse-children" title="concept-traverse-children">traverse children</a>
of type first.

<p>The <dfn id="dom-treewalker-lastchild" title="dom-TreeWalker-lastChild"><code>lastChild()</code></dfn>
method must <a href="#concept-traverse-children" title="concept-traverse-children">traverse children</a>
of type last.

<p>To <dfn id="concept-traverse-siblings" title="concept-traverse-siblings">traverse siblings</dfn> of type
<var>type</var> run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the
 <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>If <var>node</var> is
 <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, return null.

 <li>
  <p>Run these substeps:

  <ol>
   <li><p>Let <var>sibling</var> be <var>node</var>'s
   <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a> if
   <var>type</var> is next, and <var>node</var>'s
   <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a> if
   <var>type</var> is previous.

   <li>
    <p>While <var>sibling</var> is not null, run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to <var>sibling</var>.

     <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
     <var>node</var> and let <var>result</var> be the return
     value.

     <li><p>If <var>result</var> is
     <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
     the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code>
     attribute to <var>node</var> and return <var>node</var>.

     <li><p>Set <var>sibling</var> to <var>node</var>'s
     <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a> if
     <var>type</var> is next, and <var>node</var>'s
     <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a> if
     <var>type</var> is previous.

     <li><p>If <var>result</var> is
     <code title="dom-NodeFilter-FILTER_REJECT"><a href="#dom-nodefilter-filter_reject">FILTER_REJECT</a></code> or
     <var>sibling</var> is null, then set <var>sibling</var> to
     <var>node</var>'s
     <a href="#concept-tree-next-sibling" title="concept-tree-next-sibling">next sibling</a> if
     <var>type</var> is next, and <var>node</var>'s
     <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a> if
     <var>type</var> is previous.
    </ol>

   <li><p>Set <var>node</var> to its
   <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

   <li><p>If <var>node</var> is null or is
   <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, return null.

   <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
   <var>node</var> and if the return value is
   <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then
   return null.
   <!-- XXX WTF? -->

   <li><p>Run these substeps again.
  </ol>
</ol>

<p>The
<dfn id="dom-treewalker-nextsibling" title="dom-TreeWalker-nextSibling"><code>nextSibling()</code></dfn>
method must <a href="#concept-traverse-siblings" title="concept-traverse-siblings">traverse siblings</a>
of type next.

<p>The
<dfn id="dom-treewalker-previoussibling" title="dom-TreeWalker-previousSibling"><code>previousSibling()</code></dfn>
method must <a href="#concept-traverse-siblings" title="concept-traverse-siblings">traverse siblings</a>
of type previous.

<p>The
<dfn id="dom-treewalker-previousnode" title="dom-TreeWalker-previousNode"><code>previousNode()</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the
 <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute.

 <li>
  <p>While <var>node</var> is not
  <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, run these substeps:

  <ol>
   <li><p>Let <var>sibling</var> be the
   <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a> of
   <var>node</var>.

   <li>
    <p>While <var>sibling</var> is not null, run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to <var>sibling</var>.

     <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
     <var>node</var> and let <var>result</var> be the return
     value.

     <li><p>While <var>result</var> is not
     <code title="dom-NodeFilter-FILTER_REJECT"><a href="#dom-nodefilter-filter_reject">FILTER_REJECT</a></code> and
     <var>node</var> has a
     <a href="#concept-tree-child" title="concept-tree-child">child</a>, set <var>node</var>
     to its <a href="#concept-tree-last-child" title="concept-tree-last-child">last child</a> and then
     <a href="#concept-node-filter" title="concept-node-filter">filter</a> <var>node</var> and
     set <var>result</var> to the return value.

     <li><p>If <var>result</var> is
     <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
     the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code>
     attribute to <var>node</var> and return <var>node</var>.

     <li><p>Set <var>sibling</var> to the
     <a href="#concept-tree-previous-sibling" title="concept-tree-previous-sibling">previous sibling</a> of
     <var>node</var>.
    </ol>

   <li><p>If <var>node</var> is
   <a href="#concept-traversal-root" title="concept-traversal-root">root</a> or <var>node</var>'s
   <a href="#concept-tree-parent" title="concept-tree-parent">parent</a> is null, return null.

   <li><p>Set <var>node</var> to its
   <a href="#concept-tree-parent" title="concept-tree-parent">parent</a>.

   <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
   <var>node</var> and if the return value is
   <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
   the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute
   to <var>node</var> and return <var>node</var>.
  </ol>

 <li><p>Return null.
</ol>

<p>The <dfn id="dom-treewalker-nextnode" title="dom-TreeWalker-nextNode"><code>nextNode()</code></dfn>
method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the
 <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>Let <var>result</var> be
 <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>.

 <li>
  <p>Run these substeps:

  <ol>
   <li>
    <p>While <var>result</var> is not
    <code title="dom-NodeFilter-FILTER_REJECT"><a href="#dom-nodefilter-filter_reject">FILTER_REJECT</a></code> and
    <var>node</var> has a <a href="#concept-tree-child" title="concept-tree-child">child</a>,
    run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to its
     <a href="#concept-tree-first-child" title="concept-tree-first-child">first child</a>.

     <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
     <var>node</var> and set <var>result</var> to the return
     value.

     <li><p>If <var>result</var> is
     <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
     the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute
     to <var>node</var> and return <var>node</var>.
    </ol>

   <li>
    <p>If a <a href="#concept-node" title="concept-node">node</a> is
    <a href="#concept-tree-following" title="concept-tree-following">following</a>
    <var>node</var> and is not
    <a href="#concept-tree-following" title="concept-tree-following">following</a>
    <a href="#concept-traversal-root" title="concept-traversal-root">root</a>, set
    <var>node</var> to the first such
    <a href="#concept-node" title="concept-node">node</a>.
    <p>Otherwise, return null.
    <!-- Implemented as iterating over parent/nextSibling -->

   <li><p><a href="#concept-node-filter" title="concept-node-filter">Filter</a>
   <var>node</var> and set <var>result</var> to the return
   value.

   <li><p>If <var>result</var> is
   <code title="dom-NodeFilter-FILTER_ACCEPT"><a href="#dom-nodefilter-filter_accept">FILTER_ACCEPT</a></code>, then set
   the <code title="dom-TreeWalker-currentNode"><a href="#dom-treewalker-currentnode">currentNode</a></code> attribute
   to <var>node</var> and return <var>node</var>.

   <li><p>Run these substeps again.
  </ol>
</ol>

<h3 id="traversal-interface-nodefilter">Interface <code><a href="#nodefilter">NodeFilter</a></code></h3>

<pre class='idl'>
[Exposed=Window]
callback interface NodeFilter {
  // Constants for acceptNode()
  const unsigned short FILTER_ACCEPT = 1;
  const unsigned short FILTER_REJECT = 2;
  const unsigned short FILTER_SKIP = 3;

  // Constants for whatToShow
  const unsigned long SHOW_ALL = 0xFFFFFFFF;
  const unsigned long SHOW_ELEMENT = 0x1;
  const unsigned long SHOW_ATTRIBUTE = 0x2; // historical
  const unsigned long SHOW_TEXT = 0x4;
  const unsigned long SHOW_CDATA_SECTION = 0x8; // historical
  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical
  const unsigned long SHOW_ENTITY = 0x20; // historical
  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;
  const unsigned long SHOW_COMMENT = 0x80;
  const unsigned long SHOW_DOCUMENT = 0x100;
  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;
  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;
  const unsigned long SHOW_NOTATION = 0x800; // historical

  unsigned short acceptNode(Node node);
};
</pre>

<p><code><a href="#nodefilter">NodeFilter</a></code> objects can be used as
<a href="#concept-traversal-filter" title="concept-traversal-filter">filter</a> callback and provide
constants for the <a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a>
bitmask.

<p class="note">Note: It is typically implemented as a JavaScript function.

<p>These constants can be used as callback return value:

<ul class="brief">
 <li><dfn id="dom-nodefilter-filter_accept" title="dom-NodeFilter-FILTER_ACCEPT"><code>FILTER_ACCEPT</code></dfn> (1);
 <li><dfn id="dom-nodefilter-filter_reject" title="dom-NodeFilter-FILTER_REJECT"><code>FILTER_REJECT</code></dfn> (2);
 <li><dfn id="dom-nodefilter-filter_skip" title="dom-NodeFilter-FILTER_SKIP"><code>FILTER_SKIP</code></dfn> (3).
</ul>

<p>These constants can be used for the
<a href="#concept-traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a> bitmask:

<ul class="brief">
 <li><dfn id="dom-nodefilter-show_all" title="dom-NodeFilter-SHOW_ALL"><code>SHOW_ALL</code></dfn> (4294967295, FFFFFFFF in hexadecimal);
 <li><dfn id="dom-nodefilter-show_element" title="dom-NodeFilter-SHOW_ELEMENT"><code>SHOW_ELEMENT</code></dfn> (1);
 <!-- AttrExodus
 <li><dfn title=dom-NodeFilter-SHOW_ATTRIBUTE><code>SHOW_ATTRIBUTE</code></dfn> (2, historical);
 -->
 <li><dfn id="dom-nodefilter-show_text" title="dom-NodeFilter-SHOW_TEXT"><code>SHOW_TEXT</code></dfn> (4);
 <!-- XXX still questionable
 <li><dfn title=dom-NodeFilter-SHOW_CDATA_SECTION><code>SHOW_CDATA_SECTION</code></dfn> (8; historical);
 -->
 <li><dfn id="dom-nodefilter-show_processing_instruction" title="dom-NodeFilter-SHOW_PROCESSING_INSTRUCTION"><code>SHOW_PROCESSING_INSTRUCTION</code></dfn> (64, 40 in hexadecimal);
 <li><dfn id="dom-nodefilter-show_comment" title="dom-NodeFilter-SHOW_COMMENT"><code>SHOW_COMMENT</code></dfn> (128, 80 in hexadecimal);
 <li><dfn id="dom-nodefilter-show_document" title="dom-NodeFilter-SHOW_DOCUMENT"><code>SHOW_DOCUMENT</code></dfn> (256, 100 in hexadecimal);
 <li><dfn id="dom-nodefilter-show_document_type" title="dom-NodeFilter-SHOW_DOCUMENT_TYPE"><code>SHOW_DOCUMENT_TYPE</code></dfn> (512, 200 in hexadecimal);
 <li><dfn id="dom-nodefilter-show_document_fragment" title="dom-NodeFilter-SHOW_DOCUMENT_FRAGMENT"><code>SHOW_DOCUMENT_FRAGMENT</code></dfn> (1024, 400 in hexadecimal).
</ul>

</section>
