<section>
<h2 id="events">Events</h2>

<h3 id="events-introduction-to-dom-events">Introduction to "DOM Events"</h3>

  <p>Throughout the web platform <a href="#concept-event" title="concept-event">events</a> are
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> to objects to signal an
occurrence, such as network activity or user interaction. These objects
implement the <code><a href="#eventtarget">EventTarget</a></code> interface and can therefore add
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> to observe
<a href="#concept-event" title="concept-event">events</a> by calling <a href="#dom-eventtarget-addeventlistener">addEventListener()</a>:

<pre><code>obj.addEventListener("load", imgFetched)

function imgFetched(ev) {
  // great success
  …
}</code></pre>

<p><a href="#concept-event-listener" title="concept-event-listener">Event listeners</a> can be removed
by utilizing the
<code title="dom-EventTarget-removeEventListener"><a href="#dom-eventtarget-removeeventlistener">removeEventListener()</a></code>
method, passing the same arguments.

<p><a href="#concept-event" title="concept-event">Events</a> are objects too and implement the
<code><a href="#event">Event</a></code> interface (or a derived interface). In the example above
<var>ev</var> is the <a href="#concept-event" title="concept-event">event</a>. It is
passed as argument to
<a href="#concept-event-listener" title="concept-event-listener">event listener</a>'s <b>callback</b>
(typically a JavaScript Function as shown above).
<a href="#concept-event-listener" title="concept-event-listener">Event listeners</a> key off the
<a href="#concept-event" title="concept-event">event</a>'s
<code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute value
("<code>load</code>" in the above example). The
<a href="#concept-event" title="concept-event">event</a>'s
<code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value returns the
object to which the <a href="#concept-event" title="concept-event">event</a> was
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> (<var>obj</var>
above).

<p>Now while typically <a href="#concept-event" title="concept-event">events</a> are
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> by the user agent as
the result of user interaction or the completion of some task, applications
can <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatch</a>
<a href="#concept-event" title="concept-event">events</a> themselves, commonly known as
synthetic events:

<pre><code>// add an appropriate event listener
obj.addEventListener("cat", function(e) { process(e.detail) })

// create and dispatch the event
var event = new CustomEvent("cat", {"detail":{"hazcheeseburger":true}})
obj.dispatchEvent(event)</code></pre>

<p>Apart from signaling, <a href="#concept-event" title="concept-event">events</a> are
sometimes also used to let an application control what happens next in an
operation. For instance as part of form submission an
<a href="#concept-event" title="concept-event">event</a> whose
<code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute value is
"<code>submit</code>" is
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a>. If this
<a href="#concept-event" title="concept-event">event</a>'s
<code title="dom-Event-preventDefault"><a href="#dom-event-preventdefault">preventDefault()</a></code> method is
invoked, form submission will be terminated. Applications who wish to make
use of this functionality through <a href="#concept-event" title="concept-event">events</a>
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> by the application
(synthetic events) can make use of the return value of the
<code title="dom-EventTarget-dispatchEvent"><a href="#dom-eventtarget-dispatchevent">dispatchEvent()</a></code> method:

<pre><code>if(obj.dispatchEvent(event)) {
  // event was not canceled, time for some magic
  …
}</code></pre>

<p>When an <a href="#concept-event" title="concept-event">event</a> is
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> to an object that
<a href="#concept-tree-participate" title="concept-tree-participate">participates</a> in a
<a href="#concept-tree" title="concept-tree">tree</a> (e.g. an
<a href="#concept-element" title="concept-element">element</a>), it can reach
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> on that object's
<a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestors</a> too. First all object's
<a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestor</a>
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> whose
<b>capture</b> variable is set to true are invoked, in
<a href="#concept-tree-order" title="concept-tree-order">tree order</a>. Second, object's own
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> are invoked. And
finally, and only if <a href="#concept-event" title="concept-event">event</a>'s
<a href="#dom-event-bubbles" title="dom-Event-bubbles">bubbles</a> attribute value is true,
object's  <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestor</a>
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> are invoked again,
but now in reverse <a href="#concept-tree-order" title="concept-tree-order">tree order</a>.

<p>Lets look at an example of how <a href="#concept-event" title="concept-event">events</a>
work in a <a href="#concept-tree" title="concept-tree">tree</a>:

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;Boring example&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;p&gt;Hello &lt;span id=x&gt;world&lt;/span&gt;!&lt;/p&gt;
  &lt;script&gt;
   function test(e) {
     debug(e.target, e.currentTarget, e.eventPhase)
   }
   document.addEventListener("hey", test, true)
   document.body.addEventListener("hey", test)
   var ev = new Event("hey", {bubbles:true})
   document.getElementById("x").dispatchEvent(ev)
  &lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>The <code>debug</code> function will be invoked twice. Each time
the <a href="#concept-event" title="concept-event">events</a>'s
<code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value will be the
<code>span</code> <a href="#concept-element" title="concept-element">element</a>. The
first time <code title="dom-Event-currenttarget"><a href="#dom-event-target">currentTarget</a></code> attribute's
value will be the <a href="#concept-document" title="concept-document">document</a>, the second
time the <code>body</code> <a href="#concept-element" title="concept-element">element</a>.
<code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute's value
switches from <code title="dom-Event-CAPTURING_PHASE"><a href="#dom-event-capturing_phase">CAPTURING_PHASE</a></code>
to <code title="dom-Event-BUBBLING_PHASE"><a href="#dom-event-bubbling_phase">BUBBLING_PHASE</a></code>. If an
<a href="#concept-event-listener" title="concept-event-listener">event listener</a> was registered for
the <code>span</code> <a href="#concept-element" title="concept-element">element</a>,
<code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute's value
would have been <code title="dom-Event-AT_TARGET"><a href="#dom-event-at_target">AT_TARGET</a></code>.

<h3 id="events-interface-event">Interface <code><a href="#event">Event</a></code></h3>
<pre class='idl'>
[Constructor(DOMString type, optional EventInit eventInitDict),
 Exposed=(Window,Worker)]
interface Event {
  readonly attribute DOMString type;
  readonly attribute EventTarget? target;
  readonly attribute EventTarget? currentTarget;

  const unsigned short NONE = 0;
  const unsigned short CAPTURING_PHASE = 1;
  const unsigned short AT_TARGET = 2;
  const unsigned short BUBBLING_PHASE = 3;
  readonly attribute unsigned short eventPhase;

  void stopPropagation();
  void stopImmediatePropagation();

  readonly attribute boolean bubbles;
  readonly attribute boolean cancelable;
  void preventDefault();
  readonly attribute boolean defaultPrevented;

  [Unforgeable] readonly attribute boolean isTrusted;
  readonly attribute DOMTimeStamp timeStamp;

  void initEvent(DOMString type, boolean bubbles, boolean cancelable);
};

dictionary EventInit {
  boolean bubbles = false;
  boolean cancelable = false;
};
</pre>

<p>An <dfn id="concept-event" title="concept-event">event</dfn> allows for signaling that
something has occurred. E.g. that an image has completed downloading. It is
represented by the <code><a href="#event">Event</a></code> interface or an interface that
inherits from the <code><a href="#event">Event</a></code> interface.</p>

<dl class="domintro">
  : <code><var>event</var> = new <a href="#concept-event-constructor" title="concept-event-constructor">Event</a>(<var>type</var> [, <var>eventInitDict</var>])</code>
  :: <p>Returns a new <var>event</var> whose <code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute value is set to <var>type</var>. The optional <var>eventInitDict</var> argument allows for setting the <code title="dom-Event-bubbles"><a href="#dom-event-bubbles">bubbles</a></code> and <code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attributes via object members of the same name.

  : <code><var>event</var> . <a href="#dom-event-type" title="dom-Event-type">type</a></code>
  :: <p>Returns the type of <var>event</var>, e.g. "<code>click</code>", "<code>hashchange</code>", or "<code>submit</code>".

  : <code><var>event</var> . <a href="#dom-event-target" title="dom-Event-target">target</a></code>
  :: <p>Returns the object to which <var>event</var> is <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a>.

  : <code><var>event</var> . <a href="#dom-event-currenttarget" title="dom-Event-currentTarget">currentTarget</a></code>
  :: <p>Returns the object whose <a href="#concept-event-listener" title="concept-event-listener">event listener</a>'s <b>callback</b> is currently being invoked.

  : <code><var>event</var> . <a href="#dom-event-eventphase" title="dom-Event-eventPhase">eventPhase</a></code>
  :: <p>Returns the <a href="#concept-event" title="concept-event">event</a>'s phase, which is one of <code title="dom-Event-NONE"><a href="#dom-event-none">NONE</a></code>, <code title="dom-Event-CAPTURING_PHASE"><a href="#dom-event-capturing_phase">CAPTURING_PHASE</a></code>, <code title="dom-Event-AT_TARGET"><a href="#dom-event-at_target">AT_TARGET</a></code>, and <code title="dom-Event-BUBBLING_PHASE"><a href="#dom-event-bubbling_phase">BUBBLING_PHASE</a></code>.

  : <code><var>event</var> . <a href="#dom-event-stoppropagation" title="dom-Event-stopPropagation">stopPropagation</a>()</code>
  :: <p>When <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> in a <a href="#concept-tree" title="concept-tree">tree</a>, invoking this method prevents <var>event</var> from reaching any objects other than the current object.

  : <code><var>event</var> . <a href="#dom-event-stopimmediatepropagation" title="dom-Event-stopImmediatePropagation">stopImmediatePropagation</a>()</code>
  :: <p>Invoking this method prevents <var>event</var> from reaching any registered <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> after the current one finishes running and, when <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> in a <a href="#concept-tree" title="concept-tree">tree</a>, also prevents <var>event</var> from reaching any other objects.

  : <code><var>event</var> . <a href="#dom-event-bubbles" title="dom-Event-bubbles">bubbles</a></code>
  :: <p>Returns true or false depending on how event was initialized. True if <var>event</var>'s goes through its <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value's <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestors</a> in reverse <a href="#concept-tree-order" title="concept-tree-order">tree order</a>, and false otherwise.

  : <code><var>event</var> . <a href="#dom-event-cancelable" title="dom-Event-cancelable">cancelable</a></code>
  :: <p>Returns true or false depending on how <var>event</var> was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which <var>event</var> was <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a>, can be canceled by invoking the <code title="dom-Event-preventDefault"><a href="#dom-event-preventdefault">preventDefault()</a></code> method.

  : <code><var>event</var> . <a href="#dom-event-preventdefault" title="dom-Event-preventDefault">preventDefault</a>()</code>
  :: <p>If invoked when the <code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attribute value is true, signals to the operation that caused <var>event</var> to be <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> that it needs to be canceled.

  : <code><var>event</var> . <a href="#dom-event-defaultprevented" title="dom-Event-defaultPrevented">defaultPrevented</a></code>
  :: <p>Returns true if <code title="dom-Event-preventDefault"><a href="#dom-event-preventdefault">preventDefault()</a></code> was invoked while the <code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attribute value is true, and false otherwise.

  : <code><var>event</var> . <a href="#dom-event-istrusted" title="dom-Event-isTrusted">isTrusted</a></code>
  :: <p>Returns true if <var>event</var> was <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> by the user agent, and false otherwise.

  : <code><var>event</var> . <a href="#dom-event-timestamp" title="dom-Event-timeStamp">timeStamp</a></code>
  :: <p>Returns the creation time of <var>event</var> as the number of milliseconds that passed since 00:00:00 UTC on 1 January 1970.

 <!-- initEvent is dead -->
</dl>

<p>The <dfn id="dom-event-type" title="dom-Event-type"><code>type</code></dfn> attribute must
return the value it was initialized to. When an
<a href="#concept-event" title="concept-event">event</a> is created the attribute must be
initialized to the empty string.

<p>The <dfn id="dom-event-target" title="dom-Event-target"><code>target</code></dfn> and
<dfn id="dom-event-currenttarget" title="dom-Event-currentTarget"><code>currentTarget</code></dfn>
attributes must return the values they were initialized to. When an
<a href="#concept-event" title="concept-event">event</a> is created the attributes must be
initialized to null.

<p>The <dfn id="dom-event-eventphase" title="dom-Event-eventPhase"><code>eventPhase</code></dfn>
attribute must return the value it was initialized to, which must be one of
the following:</p>
<dl>
  : <dfn id="dom-event-none" title="dom-Event-NONE"><code>NONE</code></dfn> (numeric value 0)
  :: <p><a href="#concept-event" title="concept-event">Events</a> not currently <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> are in this phase.

  : <dfn id="dom-event-capturing_phase" title="dom-Event-CAPTURING_PHASE"><code>CAPTURING_PHASE</code></dfn> (numeric value 1)</dt>
  :: <p>When an <a href="#concept-event" title="concept-event">event</a> is <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> to an object that <a href="#concept-tree-participate" title="concept-tree-participate">participates</a> in a <a href="#concept-tree" title="concept-tree">tree</a> it will be in this phase before it reaches its <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value.

  : <dfn id="dom-event-at_target" title="dom-Event-AT_TARGET"><code>AT_TARGET</code></dfn> (numeric value 2)
  :: <p>When an <a href="#concept-event" title="concept-event">event</a> is <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> it will be in this phase on its <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value.

  : <dfn id="dom-event-bubbling_phase" title="dom-Event-BUBBLING_PHASE"><code>BUBBLING_PHASE</code></dfn> (numeric value 3)
  :: <p>When an <a href="#concept-event" title="concept-event">event</a> is <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> to an object that <a href="#concept-tree-participate" title="concept-tree-participate">participates</a> in a <a href="#concept-tree" title="concept-tree">tree</a> it will be in this phase after it reaches its <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value.

  </dl>
<p>Initially the attribute must be initialized to
<code title="dom-Event-NONE"><a href="#dom-event-none">NONE</a></code>.

<hr>

<p>Each <a href="#concept-event" title="concept-event">event</a> has the following associated
flags that are all initially unset:</p>
<ul>
 <li><dfn id="stop-propagation-flag">stop propagation flag</dfn>
 <li><dfn id="stop-immediate-propagation-flag">stop immediate propagation flag</dfn>
 <li><dfn id="canceled-flag">canceled flag</dfn>
 <li><dfn id="initialized-flag">initialized flag</dfn>
 <li><dfn id="dispatch-flag">dispatch flag</dfn>
</ul>

<p>The
<dfn id="dom-event-stoppropagation" title="dom-Event-stopPropagation"><code>stopPropagation()</code></dfn>
method must set the <a href="#stop-propagation-flag">stop propagation flag</a>.

<p>The
<dfn id="dom-event-stopimmediatepropagation" title="dom-Event-stopImmediatePropagation"><code>stopImmediatePropagation()</code></dfn>
method must set both the <a href="#stop-propagation-flag">stop propagation flag</a> and
<a href="#stop-immediate-propagation-flag">stop immediate propagation flag</a>.

<p>The <dfn id="dom-event-bubbles" title="dom-Event-bubbles"><code>bubbles</code></dfn> and
<dfn id="dom-event-cancelable" title="dom-Event-cancelable"><code>cancelable</code></dfn> attributes
must return the values they were initialized to.

<p>The
<dfn id="dom-event-preventdefault" title="dom-Event-preventDefault"><code>preventDefault()</code></dfn>
method must set the <a href="#canceled-flag">canceled flag</a> if the
<code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attribute value is true.

<p>The
<dfn id="dom-event-defaultprevented" title="dom-Event-defaultPrevented"><code>defaultPrevented</code></dfn>
attribute must return true if the <a href="#canceled-flag">canceled flag</a> is set and
false otherwise.

<hr>

<p>The <dfn id="dom-event-istrusted" title="dom-Event-isTrusted"><code>isTrusted</code></dfn> attribute
must return the value it was initialized to. When an
<a href="#concept-event" title="concept-event">event</a> is created the attribute must be
initialized to false.

<p>The <dfn id="dom-event-timestamp" title="dom-Event-timeStamp"><code>timeStamp</code></dfn> attribute
must return the value it was initialized to. When an
<a href="#concept-event" title="concept-event">event</a> is created the attribute must be
initialized to the number of milliseconds that have passed since
00:00:00 UTC on 1 January 1970, ignoring leap seconds.
<!-- leap seconds are ignored by JavaScript too -->

<hr>

<p>To <dfn id="concept-event-initialize" title="concept-event-initialize">initialize</dfn> an
<var>event</var>, with <var>type</var>,
<var>bubbles</var>, and <var>cancelable</var>, run these steps:

<ol>
  1. Set the <a href="#initialized-flag">initialized flag</a>.
  2. Unset the <a href="#stop-propagation-flag">stop propagation flag</a>, <a href="#stop-immediate-propagation-flag">stop immediate propagation flag</a>, and <a href="#canceled-flag">canceled flag</a>.
  3. Set the <code title="dom-Event-isTrusted"><a href="#dom-event-istrusted">isTrusted</a></code> attribute to false.
  4. Set the <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute to null.
  5. Set the <code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute to <var>type</var>.
  6. Set the <code title="dom-Event-bubbles"><a href="#dom-event-bubbles">bubbles</a></code> attribute to <var>bubbles</var>.
  7. Set the <code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attribute to <var>cancelable</var>.

</ol>

<p>The
<dfn id="dom-event-initevent" title="dom-Event-initEvent"><code>initEvent(<var>type</var>, <var>bubbles</var>, <var>cancelable</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
  1. If <a href="#context-object">context object</a>'s <a href="#dispatch-flag">dispatch flag</a> is set, terminate these steps.

  2. <a href="#concept-event-initialize" title="concept-event-initialize">Initialize</a> the <a href="#context-object">context object</a> with <var>type</var>, <var>bubbles</var>, and <var>cancelable</var>.

</ol>

<p class="note">Note: As <a href="#concept-event" title="concept-event">events</a> have constructors
<code title="dom-Event-initEvent"><a href="#dom-event-initevent">initEvent()</a></code> is superfluous. However,
it has to be supported for legacy content.

<h3 id="events-interface-customevent">Interface <code><a href="#customevent">CustomEvent</a></code></h3>

<pre class="idl">
[Constructor(DOMString type, optional CustomEventInit eventInitDict),
 Exposed=(Window,Worker)]
interface CustomEvent : Event {
  readonly attribute any detail;

  void initCustomEvent(DOMString type, boolean bubbles, boolean cancelable, any detail);
};

dictionary CustomEventInit : EventInit {
  any detail = null;
};
</pre>

<p><a href="#concept-event" title="concept-event">Events</a> using the
<code><a href="#customevent">CustomEvent</a></code> interface can be used to carry custom data.</p>

<dl class="domintro">
 <dt><code><var>event</var> = new <a href="#concept-event-constructor" title="concept-event-constructor">CustomEvent</a>(<var>type</var> [, <var>eventInitDict</var>])</code>
 <dd><p>Works analogously to the constructor for <code><a href="#event">Event</a></code> except
 that the optional <var>eventInitDict</var> argument now
 allows for setting the <code title="dom-Event-detail">detail</code> attribute
 too.

 <dt><code><var>event</var> . <a href="#dom-customevent-detail" title="dom-CustomEvent-detail">detail</a></code>
 <dd><p>Returns any custom data <var>event</var> was created with.
 Typically used for synthetic events.

 <!-- initCustomEvent is dead -->
</dl>

<p>The <dfn id="dom-customevent-detail" title="dom-CustomEvent-detail"><code>detail</code></dfn> attribute
must return the value it was initialized to.

<p>The
<dfn id="dom-customevent-initcustomevent" title="dom-CustomEvent-initCustomEvent"><code>initCustomEvent(<var>type</var>, <var>bubbles</var>, <var>cancelable</var>, <var>detail</var>)</code></dfn>
method must, when invoked, run these steps:

<ol>
  1. If <a href="#context-object">context object</a>'s <a href="#dispatch-flag">dispatch flag</a> is set, terminate these steps.

  2. <a href="#concept-event-initialize" title="concept-event-initialize">Initialize</a> the <a href="#context-object">context object</a> with <var>type</var>, <var>bubbles</var>, and <var>cancelable</var>.

  3. Set <a href="#context-object">context object</a>'s <code title="dom-CustomEvent-detail"><a href="#dom-customevent-detail">detail</a></code> attribute to <var>detail</var>.

</ol>

<h3 id="events-constructing-events">Constructing events</h3>

<p>When a <dfn id="concept-event-constructor" title="concept-event-constructor">constructor</dfn> of the <code><a href="#event">Event</a></code>
interface, or of an interface that inherits from the <code><a href="#event">Event</a></code> interface, is
invoked, these steps must be run:

<ol>
  1. Create an <a href="#concept-event" title="concept-event">event</a> that uses the interface the constructor was invoked upon.

  2. Set its <a href="#initialized-flag">initialized flag</a>.

  3. Initialize the <code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute to the <var>type</var> argument.

  4. If there is an <var>eventInitDict</var> argument then for each <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-dictionary-member">dictionary member</a> defined therein find the attribute on <a href="#concept-event" title="concept-event">event</a> whose <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-identifier">identifier</a> matches the key of the <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-dictionary-member">dictionary member</a> and then set the attribute to the value of that <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-dictionary-member">dictionary member</a>.

  5.Return the <a href="#concept-event" title="concept-event">event</a>.

</ol>

<h3 id="events-defining-event-interfaces">Defining event interfaces</h3>

In general, when defining a new interface that inherits from
<code><a href="#event">Event</a></code> please always ask feedback from the WHATWG or the
W3C www-dom@w3.org mailing list.

The <code><a href="#customevent">CustomEvent</a></code> interface can be used as starting point.
However, do not introduce any <code>init<var>*</var>Event()</code>
methods as they are redundant with constructors. Interfaces that inherit
from the <code><a href="#event">Event</a></code> interface that have such a method only have it
for historical reasons.

<h3 id="events-interface-eventtarget">Interface <code><a href="#eventtarget">EventTarget</a></code></h3>

<pre class="idl">
[Exposed=(Window,Worker)]
interface EventTarget {
  void addEventListener(DOMString type, EventListener? callback, optional boolean capture = false);
  void removeEventListener(DOMString type, EventListener? callback, optional boolean capture = false);
  boolean dispatchEvent(Event event);
};

callback interface EventListener {
  void handleEvent(Event event);
};
</pre>

<p><code><a href="#eventtarget">EventTarget</a></code> is an object to which an
<a href="#concept-event" title="concept-event">event</a> is
<a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a> when something has
occurred. Each <code><a href="#eventtarget">EventTarget</a></code> has an associated list of
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a>.

<p>An <dfn id="concept-event-listener" title="concept-event-listener">event listener</dfn> associates a
callback with a specific <a href="#concept-event" title="concept-event">event</a>. Each
<a href="#concept-event-listener" title="concept-event-listener">event listener</a> consists of a
<b>type</b> (of the <a href="#concept-event" title="concept-event">event</a>),
<b>callback</b>, and <b>capture</b> variable.

<p class="note">Note: The <b>callback</b> is named <code><dfn id="eventlistener">EventListener</dfn></code> for
historical reasons. As can be seen from the definition above, an
<a href="#concept-event-listener" title="concept-event-listener">event listener</a> is a more broad
concept.

<dl class="domintro">
  : <code><var>target</var> . <a href="#dom-eventtarget-addeventlistener" title="dom-EventTarget-addEventListener">addEventListener</a>(<var>type</var>, <var>callback</var> [, <var>capture</var> = false])</code>
  :: Appends an <a href="#concept-event-listener" title="concept-event-listener">event listener</a> for <a href="#concept-event" title="concept-event">events</a> whose <code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute value is <var>type</var>. The <var>callback</var> argument sets the <b>callback</b> that will be invoked when the <a href="#concept-event" title="concept-event">event</a> is <a href="#concept-event-dispatch" title="concept-event-dispatch">dispatched</a>. When set to true, the <var>capture</var> argument prevents <b>callback</b> from being invoked if the <a href="#concept-event" title="concept-event">event</a>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute value is <code title="dom-Event-BUBBLING_PHASE"><a href="#dom-event-bubbling_phase">BUBBLING_PHASE</a></code>. When false, <b>callback</b> will not be invoked when <a href="#concept-event" title="concept-event">event</a>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute value is <code title="dom-Event-CAPTURING_PHASE"><a href="#dom-event-capturing_phase">CAPTURING_PHASE</a></code>. Either way, <b>callback</b> will be invoked when <a href="#concept-event" title="concept-event">event</a>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute value is <code title="dom-Event-AT_TARGET"><a href="#dom-event-at_target">AT_TARGET</a></code>.

  The <a href="#concept-event-listener" title="concept-event-listener">event listener</a> is appended to <var>target</var>'s list of
  <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> and is not appended if it is a duplicate, i.e. having the same <b>type</b>, <b>callback</b>, and <b>capture</b> values.

  : <var>target</var> . <a href="#dom-eventtarget-removeeventlistener" title="dom-EventTarget-removeEventListener">removeEventListener</a>(<var>type</var>, <var>callback</var> [, <var>capture</var> = false])</code>
  :: Remove the <a href="#concept-event-listener" title="concept-event-listener">event listener</a> in <var>target</var>'s list of <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> with the same <var>type</var>, <var>callback</var>, and <var>capture</var>.

  : <code><var>target</var> . <a href="#dom-eventtarget-dispatchevent" title="dom-EventTarget-dispatchEvent">dispatchEvent</a>(<var>event</var>)</code>
  :: <a href="#concept-event-dispatch" title="concept-event-dispatch">Dispatches</a> a synthetic event <var>event</var> to <var>target</var> and returns true if either <var>event</var>'s <code title="dom-Event-cancelable"><a href="#dom-event-cancelable">cancelable</a></code> attribute value is false or its <code title="dom-Event-preventDefault"><a href="#dom-event-preventdefault">preventDefault()</a></code> method was not invoked, and false otherwise.

</dl>

<p>The
<dfn id="dom-eventtarget-addeventlistener" title="dom-EventTarget-addEventListener"><code>addEventListener(<var>type</var>, <var>callback</var>, <var>capture</var>)</code></dfn>
method must run these steps:
<ol>
  1. If <var>callback</var> is null, terminate these steps.
  2. Append an <a href="#concept-event-listener" title="concept-event-listener">event listener</a> to the associated list of <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> with <b>type</b> set to <var>type</var>, <b>callback</b> set to <var>callback</var>, and <b>capture</b> set to <var>capture</var>, unless there already is an <a href="#concept-event-listener" title="concept-event-listener">event listener</a> in that list with the same <b>type</b>, <b>callback</b>, and <b>capture</b>.

</ol>

<p>The
<dfn id="dom-eventtarget-removeeventlistener" title="dom-EventTarget-removeEventListener"><code>removeEventListener(<var>type</var>, <var>callback</var>, <var>capture</var>)</code></dfn>
method must run these steps:
<ol>
  1. Remove an <a href="#concept-event-listener" title="concept-event-listener">event listener</a> from the associated list of <a href="#concept-event-listener" title="concept-event-listener">event listeners</a>, whose <b>type</b> is <var>name</var>, <b>callback</b> is <var>callback</var>, and <b>capture</b> is <var>capture</var>.</p>

</ol>

<p>The
<dfn id="dom-eventtarget-dispatchevent" title="dom-EventTarget-dispatchEvent"><code>dispatchEvent(<var>event</var>)</code></dfn>
method must run these steps:
<ol>
  1. If <var>event</var>'s <a href="#dispatch-flag">dispatch flag</a> is set, or if its <a href="#initialized-flag">initialized flag</a> is not set, <a href="#dfn-throw" title="concept-throw">throw</a> an "<code>InvalidStateError</code>" exception.[[!WEBIDL]]
  2. Initialize <var>event</var>'s <code title="dom-Event-isTrusted"><a href="#dom-event-istrusted">isTrusted</a></code> attribute to false.
  3. <a href="#concept-event-dispatch" title="concept-event-dispatch">Dispatch</a> the <var>event</var> and return the value that returns.

</ol>

<h3 id="events-dispatching-events">Dispatching events</h3>

<p>To <dfn id="concept-event-dispatch" title="concept-event-dispatch">dispatch</dfn> an
<a href="#concept-event" title="concept-event">event</a> to a given object, with an optional
<var>target override</var>, run these steps:

<ol>
  1. Let <var>event</var> be the <a href="#concept-event" title="concept-event">event</a> that is dispatched.

  2. Set <var>event</var>'s <a href="#dispatch-flag">dispatch flag</a>.

  3. Initialize <var>event</var>'s <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute to <var>target override</var>, if it is given, and the object to which <var>event</var> is dispatched otherwise.

  4. If <var>event</var>'s <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value is <a href="#concept-tree-participate" title="concept-tree-participate">participating</a> in a <a href="#concept-tree" title="concept-tree">tree</a>, let <var>event path</var> be a static ordered list of all its <a href="#concept-tree-ancestor" title="concept-tree-ancestor">ancestors</a> in <a href="#concept-tree-order" title="concept-tree-order">tree order</a>, and let <var>event path</var> be the empty list otherwise.

  5. Initialize <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute to <code title="dom-Event-CAPTURING_PHASE"><a href="#dom-event-capturing_phase">CAPTURING_PHASE</a></code>.

  6. For each object in <var>event path</var>, <a href="#concept-event-listener-invoke" title="concept-event-listener-invoke">invoke</a> its <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> with event <var>event</var>, as long as <var>event</var>'s <a href="#stop-propagation-flag">stop propagation flag</a> is unset.

  7. Initialize <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute to <code title="dom-Event-AT_TARGET"><a href="#dom-event-at_target">AT_TARGET</a></code>.

  8. <a href="#concept-event-listener-invoke" title="concept-event-listener-invoke">Invoke</a> the <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> of <var>event</var>'s <code title="dom-Event-target"><a href="#dom-event-target">target</a></code> attribute value with <var>event</var>, if <var>event</var>'s <a href="#stop-propagation-flag">stop propagation flag</a> is unset.

  9. If <var>event</var>'s <code title="dom-Event-bubbles"><a href="#dom-event-bubbles">bubbles</a></code> attribute value is true, run these substeps:

  <ol>
    1. Reverse the order of <var>event path</var>.

    2. Initialize <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute to <code title="dom-Event-BUBBLING_PHASE"><a href="#dom-event-bubbling_phase">BUBBLING_PHASE</a></code>.

    3. For each object in <var>event path</var>, <a href="#concept-event-listener-invoke" title="concept-event-listener-invoke">invoke</a> its <a href="#concept-event-listener" title="concept-event-listener">event listeners</a>, with event <var>event</var> as long as <var>event</var>'s <a href="#stop-propagation-flag">stop propagation flag</a> is unset.

  </ol>

  10. Unset <var>event</var>'s <a href="#dispatch-flag">dispatch flag</a>.

  11. Initialize <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute to <code title="dom-Event-NONE"><a href="#dom-event-none">NONE</a></code>.

  12. Initialize <var>event</var>'s <code title="dom-Event-currentTarget"><a href="#dom-event-currenttarget">currentTarget</a></code> attribute to null.

  13. Return false if <var>event</var>'s <a href="#canceled-flag">canceled flag</a> is set, and true otherwise.

</ol>


<p>To <dfn id="concept-event-listener-invoke" title="concept-event-listener-invoke">invoke</dfn> the
<a href="#concept-event-listener" title="concept-event-listener">event listeners</a> for an object with an
event run these steps:</p>
<ol>
  1. Let <var>event</var> be the <a href="#concept-event" title="concept-event">event</a> for which the <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> are invoked.
  2. Let <var>listeners</var> be a copy of the <a href="#concept-event-listener" title="concept-event-listener">event listeners</a> associated with the object for which these steps are run.
  3. Initialize <var>event</var>'s <code title="dom-Event-currentTarget"><a href="#dom-event-currenttarget">currentTarget</a></code> attribute to the object for which these steps are run.
  4. Then run these substeps for each <a href="#concept-event-listener" title="concept-event-listener">event listener</a> in <var>listeners</var>:

  <ol>
    1. If <var>event</var>'s <a href="#stop-immediate-propagation-flag">stop immediate propagation flag</a> is set, terminate the <a href="#concept-event-listener-invoke" title="concept-event-listener-invoke">invoke</a> algorithm.
    2. Let <var>listener</var> be the <a href="#concept-event-listener" title="concept-event-listener">event listener</a>.
    3. If <var>event</var>'s <code title="dom-Event-type"><a href="#dom-event-type">type</a></code> attribute value is not <var>listener</var>'s <b>type</b>, terminate these substeps (and run them for the next <a href="#concept-event-listener" title="concept-event-listener">event listener</a>).
    4. If <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute value is <code title="dom-Event-CAPTURING_PHASE"><a href="#dom-event-capturing_phase">CAPTURING_PHASE</a></code> and <var>listener</var>'s <b>capture</b> is false, terminate these substeps (and run them for the next <a href="#concept-event-listener" title="concept-event-listener">event listener</a>).
    5. If <var>event</var>'s <code title="dom-Event-eventPhase"><a href="#dom-event-eventphase">eventPhase</a></code> attribute value is <code title="dom-Event-BUBBLING_PHASE"><a href="#dom-event-bubbling_phase">BUBBLING_PHASE</a></code> and <var>listener</var>'s <b>capture</b> is true, terminate these substeps (and run them for the next <a href="#concept-event-listener" title="concept-event-listener">event listener</a>).
    6. Call <var>listener</var>'s <b>callback</b>'s <code title="dom-EventListener-handleEvent">handleEvent</code>, with the event passed to this algorithm as the first argument and <var>event</var>'s <code title="dom-Event-currentTarget"><a href="#dom-event-currenttarget">currentTarget</a></code> attribute value as <a class="external" data-anolis-spec="webidl" href="http://www.w3.org/TR/WebIDL-1/#dfn-callback-this-value">callback this value</a>. If this throws any exception, <a class="external" data-anolis-spec="html" href="http://www.w3.org/TR/html51/webappapis.html#report-the-exception">report the exception</a>.
  </ol>
 </li>
</ol>

</section>
